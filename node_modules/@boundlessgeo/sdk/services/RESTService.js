'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
icensed under the Apache License, Version 2.0 (the "License").
ou may not use this file except in compliance with the License.
ou may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
nless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _urlParse = require('url-parse');

var _urlParse2 = _interopRequireDefault(_urlParse);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RESTService = function () {
  function RESTService() {
    _classCallCheck(this, RESTService);
  }

  _createClass(RESTService, [{
    key: '_getBaseUrl',
    value: function _getBaseUrl(layer) {
      var url;
      if (layer.get('wfsInfo')) {
        url = layer.get('wfsInfo').url;
      } else if (layer.getSource() instanceof _openlayers2.default.source.TileWMS) {
        url = layer.getSource().getUrls()[0];
      } else if (layer.getSource() instanceof _openlayers2.default.source.ImageWMS) {
        url = layer.getSource().getUrl();
      } else {
        url = layer.get('url');
      }
      var urlObj = new _urlParse2.default(url, true);
      urlObj.set('pathname', urlObj.pathname.replace(/wms|ows|wfs/, 'rest'));
      return urlObj;
    }
  }, {
    key: '_getTrailingChar',
    value: function _getTrailingChar(urlObj) {
      return urlObj.pathname.slice(-1) === '/' ? '' : '/';
    }
  }, {
    key: '_getStyleNameUrl',
    value: function _getStyleNameUrl(layer, opt_proxy) {
      var urlObj = this._getBaseUrl(layer);
      var id;
      if (layer.get('name')) {
        id = layer.get('name').split(':').pop();
      } else if (layer.get('wfsInfo')) {
        id = layer.get('wfsInfo').featureType;
      }
      if (id) {
        urlObj.set('pathname', urlObj.pathname + this._getTrailingChar(urlObj) + 'layers/' + id + '.json');
        return _util2.default.getProxiedUrl(urlObj.toString(), opt_proxy);
      } else {
        return null;
      }
    }
  }, {
    key: '_parseStyleName',
    value: function _parseStyleName(jsonData) {
      var styleName = jsonData.layer.defaultStyle.name;
      if (styleName.indexOf(':') === -1) {
        // look for workspace in JSON output
        if (jsonData.layer.defaultStyle.workspace) {
          styleName = jsonData.layer.defaultStyle.workspace + ':' + jsonData.layer.defaultStyle.name;
        }
      }
      return styleName;
    }
  }, {
    key: 'getStyleName',
    value: function getStyleName(layer, onSuccess, onFailure, opt_proxy, opt_requestHeaders) {
      var url = this._getStyleNameUrl(layer, opt_proxy);
      if (url) {
        _util2.default.doGET(url, function (xmlhttp) {
          var styleName = this._parseStyleName(JSON.parse(xmlhttp.responseText));
          onSuccess.call(this, styleName);
        }, function (xmlhttp) {
          onFailure.call(this, xmlhttp);
        }, this, opt_requestHeaders);
      } else {
        onFailure.call(this);
      }
    }
  }, {
    key: '_createStylePayload',
    value: function _createStylePayload(styleName) {
      return '<style><name>' + styleName + '</name><filename>' + styleName + '.sld</filename></style>';
    }
  }, {
    key: '_getCreateStyleUrl',
    value: function _getCreateStyleUrl(layer, opt_proxy) {
      var urlObj = this._getBaseUrl(layer);
      urlObj.set('pathname', urlObj.pathname + this._getTrailingChar(urlObj) + 'styles');
      return _util2.default.getProxiedUrl(urlObj.toString(), opt_proxy);
    }
  }, {
    key: 'createStyle',
    value: function createStyle(layer, sld, onSuccess, onFailure, opt_proxy, opt_requestHeaders) {
      var url = this._getCreateStyleUrl(layer, opt_proxy);
      var styleName = 'web_sdk_style_' + Math.floor(100000 + Math.random() * 900000);
      _util2.default.doPOST(url, this._createStylePayload(styleName), function (xmlhttp) {
        layer.set('styleName', styleName);
        this.updateStyle(url, layer, sld, onSuccess, onFailure);
      }, function (xmlhttp) {
        if (xmlhttp.responseText.indexOf('already exists') !== -1) {
          // retry under a new name
          this.createStyle(url, layer, sld, onSuccess, onFailure);
        } else {
          onFailure.call(this, xmlhttp);
        }
      }, this, undefined, false, opt_requestHeaders);
    }
  }, {
    key: '_getUpdateStyleUrl',
    value: function _getUpdateStyleUrl(layer, opt_proxy) {
      var urlObj = this._getBaseUrl(layer);
      var styleName = layer.get('styleName');
      if (styleName.indexOf(':') !== -1) {
        var styleInfo = styleName.split(':');
        var workspace = styleInfo[0];
        var name = styleInfo[1];
        // workspaces styles
        urlObj.set('pathname', urlObj.pathname + this._getTrailingChar(urlObj) + 'workspaces/' + workspace + '/styles/' + name);
        return _util2.default.getProxiedUrl(urlObj.toString(), opt_proxy);
      } else {
        urlObj.set('pathname', urlObj.pathname + this._getTrailingChar(urlObj) + 'styles/' + layer.get('styleName'));
        return _util2.default.getProxiedUrl(urlObj.toString(), opt_proxy);
      }
    }
  }, {
    key: 'updateStyle',
    value: function updateStyle(layer, sld, onSuccess, onFailure, opt_proxy, opt_requestHeaders) {
      _util2.default.doPOST(this._getUpdateStyleUrl(layer, opt_proxy), sld, function (xmlhttp) {
        onSuccess.call(this, xmlhttp);
      }, function (xmlhttp) {
        onFailure.call(this, xmlhttp);
      }, this, 'application/vnd.ogc.sld+xml; charset=UTF-8', true, opt_requestHeaders);
    }
  }]);

  return RESTService;
}();

exports.default = new RESTService();