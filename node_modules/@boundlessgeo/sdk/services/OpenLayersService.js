'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
icensed under the Apache License, Version 2.0 (the "License").
ou may not use this file except in compliance with the License.
ou may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and limitations under the License.


var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var sldDefaults = {
  strokeColor: '#000000',
  strokeWidth: 1
};

var OpenLayersService = function () {
  function OpenLayersService() {
    _classCallCheck(this, OpenLayersService);
  }

  _createClass(OpenLayersService, [{
    key: 'createStyle',
    value: function createStyle(styleState, geometryType) {
      var result = [];
      for (var i = 0, ii = styleState.symbolizers.length; i < ii; ++i) {
        var symbolState = styleState.symbolizers[i];
        var fill;
        var radius = parseFloat(symbolState.symbolSize) / 2;
        if (symbolState.hasFill !== false && symbolState.fillColor) {
          fill = new _openlayers2.default.style.Fill({
            color: _util2.default.transformColor(symbolState.fillColor)
          });
        }
        var stroke;
        if (symbolState.hasStroke !== false && (symbolState.strokeColor || symbolState.strokeWidth !== undefined)) {
          stroke = new _openlayers2.default.style.Stroke({
            color: symbolState.strokeColor ? _util2.default.transformColor(symbolState.strokeColor) : sldDefaults.strokeColor,
            width: symbolState.strokeWidth !== undefined ? symbolState.strokeWidth : sldDefaults.strokeWidth
          });
        }
        var text;
        if (symbolState.labelAttribute) {
          text = new _openlayers2.default.style.Text({
            font: symbolState.fontSize + 'px Calibri,sans-serif',
            fill: symbolState.fontColor ? new _openlayers2.default.style.Fill({
              color: _util2.default.transformColor(symbolState.fontColor)
            }) : undefined
          });
        }
        var style;
        if (geometryType === 'Polygon') {
          style = new _openlayers2.default.style.Style({
            fill: fill,
            stroke: stroke,
            text: text
          });
        } else if (geometryType === 'LineString') {
          style = new _openlayers2.default.style.Style({
            stroke: stroke,
            text: text
          });
        } else if (geometryType === 'Point') {
          var image;
          var rotation = symbolState.rotation ? parseFloat(symbolState.rotation) / 180 * Math.PI : undefined;
          if (symbolState.externalGraphic) {
            image = new _openlayers2.default.style.Icon({
              src: symbolState.externalGraphic,
              rotation: rotation,
              opacity: symbolState.opacity,
              scale: symbolState.symbolSize / Math.max(symbolState.imageWidth, symbolState.imageHeight)
            });
          } else {
            if (symbolState.symbolType === 'circle') {
              image = new _openlayers2.default.style.Circle({
                fill: fill,
                stroke: stroke,
                rotation: rotation,
                radius: radius
              });
            } else if (symbolState.symbolType === 'square') {
              image = new _openlayers2.default.style.RegularShape({
                fill: fill,
                stroke: stroke,
                points: 4,
                radius: radius,
                rotation: rotation,
                angle: Math.PI / 4
              });
            } else if (symbolState.symbolType === 'triangle') {
              image = new _openlayers2.default.style.RegularShape({
                fill: fill,
                stroke: stroke,
                rotation: rotation,
                points: 3,
                radius: radius,
                angle: 0
              });
            } else if (symbolState.symbolType === 'star') {
              image = new _openlayers2.default.style.RegularShape({
                fill: fill,
                stroke: stroke,
                rotation: rotation,
                points: 5,
                radius: radius,
                radius2: 0.5 * radius,
                angle: 0
              });
            } else if (symbolState.symbolType === 'cross') {
              image = new _openlayers2.default.style.RegularShape({
                fill: fill,
                stroke: stroke,
                rotation: rotation,
                points: 4,
                radius: radius,
                radius2: 0,
                angle: 0
              });
            } else if (symbolState.symbolType === 'x') {
              image = new _openlayers2.default.style.RegularShape({
                fill: fill,
                stroke: stroke,
                rotation: rotation,
                points: 4,
                radius: radius,
                radius2: 0,
                angle: Math.PI / 4
              });
            }
          }
          style = new _openlayers2.default.style.Style({
            image: image,
            text: text
          });
        }
        result.push(style);
      }
      return result;
    }
  }]);

  return OpenLayersService;
}();

exports.default = new OpenLayersService();