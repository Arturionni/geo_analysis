'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
icensed under the Apache License, Version 2.0 (the "License").
ou may not use this file except in compliance with the License.
ou may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * See the License for the specific language governing permissions and limitations under the License.


var _urlParse = require('url-parse');

var _urlParse2 = _interopRequireDefault(_urlParse);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var wmtsGetFeatureInfoFormats = {
  'application/json': new _openlayers2.default.format.GeoJSON(),
  'application/vnd.ogc.gml': new _openlayers2.default.format.WFS()
};

var parser = new _openlayers2.default.format.WMTSCapabilities();

var cache = {};

var WMTSService = function () {
  function WMTSService() {
    _classCallCheck(this, WMTSService);
  }

  _createClass(WMTSService, [{
    key: 'createLayer',
    value: function createLayer(layer, url, titleObj, projection) {
      var caps = cache[url];
      var options = _openlayers2.default.source.WMTS.optionsFromCapabilities(caps, { layer: layer.Name, format: 'image/png', projection: projection.getCode() });
      return new _openlayers2.default.layer.Tile({
        title: titleObj.title,
        emptyTitle: titleObj.empty,
        popupInfo: caps.OperationsMetadata.GetFeatureInfo ? '#AllAttributes' : undefined,
        id: layer.Name,
        name: layer.Name,
        isRemovable: true,
        source: new _openlayers2.default.source.WMTS(options)
      });
    }
  }, {
    key: 'getCapabilitiesUrl',
    value: function getCapabilitiesUrl(url, opt_proxy) {
      var urlObj = new _urlParse2.default(url);
      urlObj.set('query', {
        request: 'GetCapabilities',
        version: '1.0.0'
      });
      return _util2.default.getProxiedUrl(urlObj.toString(), opt_proxy);
    }
  }, {
    key: 'getCapabilities',
    value: function getCapabilities(url, onSuccess, onFailure, opt_proxy) {
      _util2.default.doGET(this.getCapabilitiesUrl(url, opt_proxy), function (xmlhttp) {
        onSuccess.call(this, this.parseCapabilities(xmlhttp, url));
      }, function (xmlhttp) {
        onFailure.call(this, xmlhttp);
      }, this);
    }
  }, {
    key: 'parseCapabilities',
    value: function parseCapabilities(xmlhttp, url) {
      var info = parser.read(xmlhttp.responseText);
      cache[url] = info;
      var layers = [];
      for (var i = 0, ii = info.Contents.Layer.length; i < ii; ++i) {
        var layer = info.Contents.Layer[i];
        layers.push({
          Name: layer.Identifier,
          Title: layer.Title
        });
      }
      return {
        Layer: layers,
        Title: info.ServiceIdentification.Title
      };
    }
  }, {
    key: 'getFeatureInfoUrl',
    value: function getFeatureInfoUrl(layer, coordinate, view, infoFormat, opt_proxy) {
      var resolution = view.getResolution();
      var source = layer.getSource();
      var tilegrid = source.getTileGrid();
      var tileResolutions = tilegrid.getResolutions();
      var zoomIdx,
          diff = Infinity;
      for (var i = 0; i < tileResolutions.length; i++) {
        var tileResolution = tileResolutions[i];
        var diffP = Math.abs(resolution - tileResolution);
        if (diffP < diff) {
          diff = diffP;
          zoomIdx = i;
        }
        if (tileResolution < resolution) {
          break;
        }
      }
      var tileSize = tilegrid.getTileSize(zoomIdx);
      var tileOrigin = tilegrid.getOrigin(zoomIdx);
      var fx = (coordinate[0] - tileOrigin[0]) / (resolution * tileSize);
      var fy = (tileOrigin[1] - coordinate[1]) / (resolution * tileSize);
      var tileCol = Math.floor(fx);
      var tileRow = Math.floor(fy);
      var tileI = Math.floor((fx - tileCol) * tileSize);
      var tileJ = Math.floor((fy - tileRow) * tileSize);
      var matrixIds = tilegrid.getMatrixIds()[zoomIdx];
      var matrixSet = source.getMatrixSet();
      var url = source.getUrls()[0];
      var urlObj = new _urlParse2.default(url);
      urlObj.set('query', {
        service: 'WMTS',
        request: 'GetFeatureInfo',
        version: source.getVersion(),
        layer: source.getLayer(),
        infoformat: infoFormat,
        style: source.getStyle(),
        format: source.getFormat(),
        tilecol: tileCol,
        tilerow: tileRow,
        tilematrix: matrixIds,
        tilematrixset: matrixSet,
        i: tileI,
        j: tileJ
      });
      return _util2.default.getProxiedUrl(urlObj.toString(), opt_proxy);
    }
  }, {
    key: 'getFeatureInfo',
    value: function getFeatureInfo(layer, coordinate, map, infoFormat, onSuccess, onFailure, opt_proxy) {
      var view = map.getView();
      var url = this.getFeatureInfoUrl(layer, coordinate, view, infoFormat, opt_proxy);
      _util2.default.doGET(url, function (response) {
        var result = {};
        if (infoFormat === 'text/plain' || infoFormat === 'text/html') {
          if (response.responseText.trim() !== 'no features were found') {
            result.text = response.responseText;
          } else {
            result = false;
          }
        } else {
          result.features = wmtsGetFeatureInfoFormats[infoFormat].readFeatures(response.responseText);
        }
        result.layer = layer;
        onSuccess.call(this, result);
      }, onFailure);
    }
  }]);

  return WMTSService;
}();

exports.default = new WMTSService();