'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Apache License, Version 2.0 (the "License").
ou may not use this file except in compliance with the License.
ou may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and limitations under the License.


var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _urlParse = require('url-parse');

var _urlParse2 = _interopRequireDefault(_urlParse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var format = new _openlayers2.default.format.EsriJSON();

var ArcGISRestService = function () {
  function ArcGISRestService() {
    _classCallCheck(this, ArcGISRestService);
  }

  _createClass(ArcGISRestService, [{
    key: 'createLayer',
    value: function createLayer(layer, url, titleObj, projection) {
      var units = projection.getUnits();
      return new _openlayers2.default.layer.Tile({
        title: titleObj.title,
        emptyTitle: titleObj.empty,
        id: layer.Name,
        maxResolution: layer.MinScale !== 0 ? _util2.default.getResolutionForScale(layer.MinScale, units) : undefined,
        minResolution: layer.MaxScale !== 0 ? _util2.default.getResolutionForScale(layer.MaxScale, units) : undefined,
        name: layer.Name,
        isRemovable: true,
        wfsInfo: layer.Queryable,
        popupInfo: layer.Queryable ? '#AllAttributes' : undefined,
        source: new _openlayers2.default.source.TileArcGISRest({
          urls: [url],
          params: {
            LAYERS: layer.Name
          }
        })
      });
    }
  }, {
    key: 'parseCapabilities',
    value: function parseCapabilities(jsonData) {
      var layers = [];
      // TODO parse layer hierarchy
      for (var i = 0, ii = jsonData.layers.length; i < ii; ++i) {
        var layer = {};
        var esriLayer = jsonData.layers[i];
        layer.MinScale = esriLayer.minScale;
        layer.MaxScale = esriLayer.maxScale;
        layer.Name = String(esriLayer.id);
        layer.Queryable = jsonData.capabilities && jsonData.capabilities.indexOf('Query') !== -1;
        layer.Title = esriLayer.name;
        layers.push(layer);
      }
      return {
        Layer: layers,
        Title: jsonData.serviceDescription
      };
    }
  }, {
    key: 'getCapabilitiesUrl',
    value: function getCapabilitiesUrl(url) {
      var urlObj = new _urlParse2.default(url);
      urlObj.set('query', {
        f: 'json',
        pretty: 'false',
        callback: '__cbname__'
      });
      return urlObj.toString();
    }
  }, {
    key: 'getCapabilities',
    value: function getCapabilities(url, onSuccess, onFailure, opt_proxy) {
      // because it's JSONP we don't need to take into account opt_proxy
      _util2.default.doJSONP(this.getCapabilitiesUrl(url), function (jsonData) {
        onSuccess.call(this, this.parseCapabilities(jsonData));
      }, onFailure, this);
    }
  }, {
    key: 'getLegendUrl',
    value: function getLegendUrl(source) {
      var url = source.getUrls()[0];
      var urlObj = new _urlParse2.default(url + '/legend');

      urlObj.set('query', {
        f: 'json',
        pretty: 'false',
        callback: '__cbname__'
      });
      var legendUrl = urlObj.toString();
      // proxy the legend graphic url
      if (typeof source.opt_proxy !== 'undefined' && typeof source.use_proxy !== 'undefined' && source.use_proxy === true) {
        legendUrl = _util2.default.getProxiedUrl(legendUrl, source.opt_proxy);
      }
      return legendUrl;
    }
  }, {
    key: 'getLegend',
    value: function getLegend(source, onSuccess) {
      _util2.default.doJSONP(this.getLegendUrl(source), function (jsonData) {
        onSuccess.call(this, jsonData);
      }, undefined, this);
    }
  }, {
    key: 'getFeatureInfoUrl',
    value: function getFeatureInfoUrl(layer, coordinate, map) {
      var view = map.getView();
      var urlObj = new _urlParse2.default(layer.getSource().getUrls()[0] + '/identify');
      urlObj.set('query', {
        geometryType: 'esriGeometryPoint',
        geometry: coordinate.join(','),
        sr: view.getProjection().getCode().split(':')[1],
        layers: layer.get('name'),
        tolerance: 2,
        mapExtent: view.calculateExtent(map.getSize()).join(','),
        imageDisplay: map.getSize().join(',') + ',90',
        f: 'json',
        callback: '__cbname__',
        pretty: 'false'
      });
      return urlObj.toString();
    }
  }, {
    key: 'parseGetFeatureInfo',
    value: function parseGetFeatureInfo(layer, jsonData) {
      var response = { layer: layer, features: [] };
      for (var i = 0, ii = jsonData.results.length; i < ii; ++i) {
        var feature = format.readFeature(jsonData.results[i]);
        if (feature) {
          response.features.push(feature);
        }
      }
      return response;
    }
  }, {
    key: 'getFeatureInfo',
    value: function getFeatureInfo(layer, coordinate, map, infoFormat, onSuccess, onFailure, opt_proxy) {
      var url = this.getFeatureInfoUrl(layer, coordinate, map);
      var me = this;
      _util2.default.doJSONP(url, function (jsonData) {
        onSuccess.call(me, me.parseGetFeatureInfo(layer, jsonData));
      });
    }
  }, {
    key: 'getLoadFeaturesUrl',
    value: function getLoadFeaturesUrl(layer, startIndex, pageSize, sortingInfo, srsName) {
      var urlObj = new _urlParse2.default(layer.getSource().getUrls()[0] + '/' + layer.get('name') + '/query');
      var params = {
        where: 'OBJECTID >= ' + startIndex + ' AND OBJECTID < ' + (startIndex + pageSize),
        f: 'json',
        callback: '__cbname__',
        pretty: 'false',
        outSR: srsName.split(':')[1]
      };
      if (sortingInfo.length === 1) {
        params.orderByFields = sortingInfo[0].id + ' ' + (sortingInfo[0].asc ? 'ASC' : 'DESC');
      }
      urlObj.set('query', params);
      return urlObj.toString();
    }
  }, {
    key: 'loadFeatures',
    value: function loadFeatures(layer, startIndex, pageSize, sortingInfo, srsName, success, failure) {
      _util2.default.doJSONP(this.getLoadFeaturesUrl(layer, startIndex, pageSize, sortingInfo, srsName), function (jsonData) {
        if (jsonData.error) {
          failure.call(this, { status: jsonData.error.code, statusText: jsonData.error.message }, jsonData.error.details.join(' '));
        } else {
          success.call(this, format.readFeatures(jsonData));
        }
      }, failure, this);
    }
  }, {
    key: 'getNumberOfFeaturesUrl',
    value: function getNumberOfFeaturesUrl(layer) {
      var urlObj = new _urlParse2.default(layer.getSource().getUrls()[0] + '/' + layer.get('name') + '/query');
      var params = {
        where: '1=1',
        f: 'json',
        callback: '__cbname__',
        pretty: 'false',
        returnCountOnly: true
      };
      urlObj.set('query', params);
      return urlObj.toString();
    }
  }, {
    key: 'getNumberOfFeatures',
    value: function getNumberOfFeatures(layer, callback) {
      if (layer.get('numberOfFeatures') === undefined) {
        _util2.default.doJSONP(this.getNumberOfFeaturesUrl(layer), function (jsonData) {
          callback.call(this, jsonData.count);
        }, undefined, this);
      }
    }
  }]);

  return ArcGISRestService;
}();

exports.default = new ArcGISRestService();