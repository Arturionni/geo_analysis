'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _LayerSelector = require('./LayerSelector');

var _LayerSelector2 = _interopRequireDefault(_LayerSelector);

var _LayerStore = require('../stores/LayerStore');

var _LayerStore2 = _interopRequireDefault(_LayerStore);

var _FeatureStore = require('../stores/FeatureStore');

var _FeatureStore2 = _interopRequireDefault(_FeatureStore);

var _AppDispatcher = require('../dispatchers/AppDispatcher');

var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

var _toolutil = require('../toolutil');

var _toolutil2 = _interopRequireDefault(_toolutil);

var _ToolConstants = require('../constants/ToolConstants');

var _ToolConstants2 = _interopRequireDefault(_ToolConstants);

var _reactIntl = require('react-intl');

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _WFSService = require('../services/WFSService');

var _WFSService2 = _interopRequireDefault(_WFSService);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _Snackbar = require('material-ui/Snackbar');

var _Snackbar2 = _interopRequireDefault(_Snackbar);

require('./BasePopup.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  cancel: {
    'id': 'editpopup.cancel',
    'defaultMessage': 'Cancel'
  },
  save: {
    'id': 'editpopup.save',
    'defaultMessage': 'Add'
  },
  layer: {
    'id': 'editpopup.layer',
    'defaultMessage': 'Assign to layer'
  },
  errormsg: {
    'id': 'editpopup.errormsg',
    'defaultMessage': 'Error saving this feature to GeoServer. {msg}'
  },
  updatemsg: {
    'id': 'editpopup.updatemsg',
    'defaultMessage': 'Error updating the feature\'s attributes using WFS-T.'
  }
});

/**
 * Popup that can be used for feature editing (attribute form).
 *
 * ```xml
 * <EditPopup map={map} />
 * ```
 */
var EditPopup = (_temp = _class = function (_React$Component) {
  _inherits(EditPopup, _React$Component);

  function EditPopup(props, context) {
    _classCallCheck(this, EditPopup);

    var _this = _possibleConstructorReturn(this, (EditPopup.__proto__ || Object.getPrototypeOf(EditPopup)).call(this, props));

    _LayerStore2.default.bindMap(_this.props.map);
    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this._proxy = context.proxy;
    _this._requestHeaders = context.requestHeaders;
    _this._dispatchToken = _toolutil2.default.register(_this);
    _this.state = {
      layers: [],
      error: false,
      open: false,
      feature: null,
      layer: null,
      dirty: {},
      values: {}
    };
    _this.props.map.on('singleclick', _this._onMapClick, _this);
    return _this;
  }

  _createClass(EditPopup, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._onChangeLayersCb = this._onChangeLayers.bind(this);
      _LayerStore2.default.addChangeListener(this._onChangeLayersCb);
      this._onChangeLayers();
      this.overlayPopup = new _openlayers2.default.Overlay({
        autoPan: true,
        stopEvent: false,
        element: _reactDom2.default.findDOMNode(this).parentNode
      });
      this.props.map.addOverlay(this.overlayPopup);
      var me = this;
      this._dispatchToken2 = _AppDispatcher2.default.register(function (payload) {
        var action = payload.action;
        switch (action.type) {
          case _ToolConstants2.default.SHOW_EDIT_POPUP:
            me.setState({
              feature: action.feature,
              layer: action.layer,
              values: action.feature.getProperties()
            }, function () {
              me._onChangeLayers();
              me._callback = action.callback;
              me.setVisible(true);
              me.overlayPopup.setPosition(_openlayers2.default.extent.getTopRight(action.feature.getGeometry().getExtent()));
            });
            break;
          default:
            break;
        }
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _AppDispatcher2.default.unregister(this._dispatchToken);
      _AppDispatcher2.default.unregister(this._dispatchToken2);
      _LayerStore2.default.removeChangeListener(this._onChangeLayersCb);
    }
  }, {
    key: 'activate',
    value: function activate(interactions) {
      this.active = true;
      // it is intentional not to call activate on ToolUtil here
    }
  }, {
    key: 'deactivate',
    value: function deactivate() {
      this.active = false;
      // it is intentional not to call deactivate on ToolUtil here
    }
  }, {
    key: '_getLayers',
    value: function _getLayers() {
      var state = _LayerStore2.default.getState();
      var layers = [];
      for (var i = 0, ii = state.flatLayers.length; i < ii; ++i) {
        var layer = state.flatLayers[i];
        if (layer instanceof _openlayers2.default.layer.Tile && layer.getVisible() && layer.getSource() instanceof _openlayers2.default.source.TileWMS && layer.get('popupInfo')) {
          layers.push(layer);
        }
      }
      return layers;
    }
  }, {
    key: '_onMapClick',
    value: function _onMapClick(evt) {
      if (this.active) {
        var map = this.props.map;
        var pixel = map.getEventPixel(evt.originalEvent);
        var coord = evt.coordinate;
        var me = this;
        var found = false;
        map.forEachFeatureAtPixel(pixel, function (feature, layer) {
          if (feature) {
            if (layer !== null && layer.get('isWFST')) {
              found = true;
              me.setState({
                feature: feature,
                layer: layer
              }, function () {
                me.setVisible(true);
                me.overlayPopup.setPosition(coord);
              });
            }
          }
        });
        if (!found) {
          // try WFS queries
          var layers = this._getLayers();
          for (var i = 0, ii = layers.length; i < ii; ++i) {
            _WFSService2.default.distanceWithin(layers[i], map.getView(), coord, function (feature) {
              me.setState({
                feature: feature,
                layer: this
              }, function () {
                me.setVisible(true);
                me.overlayPopup.setPosition(coord);
              });
            }.bind(layers[i]), undefined, this._proxy, this._requestHeaders);
          }
        }
      }
    }
  }, {
    key: '_doCallback',
    value: function _doCallback() {
      if (this._callback) {
        this._callback(true);
        delete this._callback;
      }
    }
  }, {
    key: '_onCancel',
    value: function _onCancel() {
      this.setVisible(false);
      this._doCallback();
    }
  }, {
    key: '_onSuccess',
    value: function _onSuccess() {
      this.setVisible(false);
    }
  }, {
    key: 'setVisible',
    value: function setVisible(visible) {
      this.props.map.getInteractions().forEach(function (interaction) {
        if (interaction instanceof _openlayers2.default.interaction.MouseWheelZoom) {
          interaction.setActive(!visible);
        }
      });
      _reactDom2.default.findDOMNode(this).parentNode.style.display = visible ? 'block' : 'none';
    }
  }, {
    key: '_onChangeLayers',
    value: function _onChangeLayers() {
      var flatLayers = _LayerStore2.default.getState().flatLayers;
      var layers = [];
      for (var i = 0, ii = flatLayers.length; i < ii; ++i) {
        var lyr = flatLayers[i];
        if (this._filterLayerList(lyr)) {
          layers.push(lyr);
        }
      }
      this.setState({ layers: layers });
    }
  }, {
    key: '_filterLayerList',
    value: function _filterLayerList(lyr) {
      if (this.state.feature) {
        var geom = this.state.feature.getGeometry();
        var geomType;
        if (geom instanceof _openlayers2.default.geom.Polygon) {
          geomType = 'Polygon';
        } else if (geom instanceof _openlayers2.default.geom.LineString) {
          geomType = 'Line';
        } else if (geom instanceof _openlayers2.default.geom.Point) {
          geomType = 'Point';
        }
        var local = lyr.get('geometryType') && lyr.get('geometryType').indexOf(geomType) !== -1;
        var wfs = lyr.get('isWFST') && lyr.get('wfsInfo') !== undefined && lyr.get('wfsInfo').geometryType.indexOf(geomType) !== -1;
        return lyr.get('disableEdit') !== true && (local || wfs);
      } else {
        return lyr.get('isWFST') && lyr.get('wfsInfo') !== undefined;
      }
    }
  }, {
    key: '_onLayerSelectChange',
    value: function _onLayerSelectChange(layer) {
      this.setState({ layer: layer });
    }
  }, {
    key: '_redraw',
    value: function _redraw() {
      this.state.layer.getSource().updateParams({ '_olSalt': Math.random() });
    }
  }, {
    key: '_setError',
    value: function _setError(msg) {
      this.setState({
        open: true,
        error: true,
        msg: msg
      });
    }
  }, {
    key: '_onChangeGeom',
    value: function _onChangeGeom(evt) {
      this._geomDirty = true;
      evt.target.un('change', this._onChangeGeom, this);
    }
  }, {
    key: 'save',
    value: function save() {
      var formatMessage = this.props.intl.formatMessage;

      var id = this.state.feature.getId();
      var me = this,
          key,
          geomName;
      var onFailure = function onFailure(xmlhttp, msg) {
        me._setError(msg || xmlhttp.status + ' ' + xmlhttp.statusText);
      };
      // INSERT
      if (id === undefined) {
        for (key in this.state.dirty) {
          this.state.feature.set(key, this.state.values[key]);
        }
        if (this.state.layer.get('wfsInfo')) {
          var geom = this.state.feature.getGeometry();
          var oldGeomName = this.state.feature.getGeometryName();
          geomName = this.state.layer.get('wfsInfo').geometryName;
          var geometryType = this.state.layer.get('wfsInfo').geometryType;
          var newGeom;
          if (geometryType.indexOf('Multi') !== -1) {
            if (geometryType === 'MultiPolygon' && geom instanceof _openlayers2.default.geom.Polygon) {
              newGeom = new _openlayers2.default.geom.MultiPolygon();
              newGeom.appendPolygon(geom);
            } else if (geometryType === 'MultiLineString' && geom instanceof _openlayers2.default.geom.LineString) {
              newGeom = new _openlayers2.default.geom.MultiLineString();
              newGeom.appendLineString(geom);
            } else if (geometryType === 'MultiPoint' && geom instanceof _openlayers2.default.geom.Point) {
              newGeom = new _openlayers2.default.geom.MultiPoint();
              newGeom.appendPoint(geom);
            }
          }
          if (oldGeomName !== geomName) {
            this.state.feature.setGeometryName(geomName);
          }
          this.state.feature.setGeometry(newGeom ? newGeom : geom);
          if (oldGeomName !== geomName) {
            this.state.feature.set(oldGeomName, undefined);
          }
          _WFSService2.default.insertFeature(this.state.layer, this.props.map.getView(), this.state.feature, function (insertId) {
            if (insertId == 'new0') {
              // reload data if we're dealing with a shapefile store
              var source = me.state.layer.getSource();
              if (source instanceof _openlayers2.default.source.Vector) {
                source.clear();
              } else {
                me._redraw();
              }
            } else {
              this.state.feature.setId(insertId);
              _FeatureStore2.default.addFeature(this.state.layer, this.state.feature);
            }
            me._doCallback();
            me.setVisible(false);
          }, onFailure);
        } else {
          this.state.layer.getSource().addFeature(this.state.feature);
          me._doCallback();
          me.setVisible(false);
        }
      } else {
        // UPDATE
        if (!this.state.layer.get('wfsInfo')) {
          for (key in this.state.dirty) {
            this.state.feature.set(key, this.state.values[key]);
          }
          me.setState({ dirty: {} });
          me._doCallback();
          me.setVisible(false);
        } else {
          var values = {};
          for (key in this.state.dirty) {
            values[key] = this.state.values[key];
          }
          if (this._geomDirty) {
            geomName = this.state.layer.get('wfsInfo') ? this.state.layer.get('wfsInfo').geometryName : this.state.feature.getGeometryName();
            values[geomName] = this.state.feature.getGeometry();
          }
          var onSuccess = function onSuccess(result) {
            if (result && result.transactionSummary.totalUpdated === 1) {
              for (key in me.state.dirty) {
                me.state.feature.set(key, values[key]);
              }
              me.setState({ dirty: {} });
              if (!(me.state.layer.getSource() instanceof _openlayers2.default.source.Vector)) {
                me._redraw();
              }
            } else {
              me._setError(formatMessage(messages.updatemsg));
            }
            me._doCallback();
            me.setVisible(false);
          };
          _WFSService2.default.updateFeature(this.state.layer, this.props.map.getView(), this.state.feature, values, onSuccess, onFailure);
        }
      }
    }
  }, {
    key: '_onChangeField',
    value: function _onChangeField(evt) {
      var dirty = this.state.dirty;
      var values = this.state.values;
      values[evt.target.id] = evt.target.value;
      dirty[evt.target.id] = true;
      this.setState({ values: values, dirty: dirty });
    }
  }, {
    key: '_handleRequestClose',
    value: function _handleRequestClose() {
      this.setState({
        open: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var error;
      if (this.state.error === true) {
        error = _react2.default.createElement(_Snackbar2.default, {
          open: this.state.open,
          bodyStyle: { height: 'auto', lineHeight: '28px', padding: 24, whiteSpace: 'pre-line' },
          message: formatMessage(messages.errormsg, { msg: this.state.msg }),
          autoHideDuration: 5000,
          onRequestClose: this._handleRequestClose.bind(this)
        });
      }
      var editForm;
      if (this.state.feature && this.state.layer) {
        this.state.feature.on('change', this._onChangeGeom, this);
        var inputs = [];
        var feature = this.state.feature,
            layer = this.state.layer;
        var fid = feature.getId();
        var keys = layer.get('wfsInfo') ? layer.get('wfsInfo').attributes : layer.get('attributes');
        for (var i = 0, ii = keys.length; i < ii; ++i) {
          var key = keys[i];
          var value = this.state.values[key] || '';
          inputs.push(_react2.default.createElement(_TextField2.default, { floatingLabelFixed: true, floatingLabelText: key, key: key, id: key, onChange: this._onChangeField.bind(this), value: value }));
        }
        editForm = _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)('sdk-component edit-form', this.props.className) },
          _react2.default.createElement(
            'span',
            { className: 'edit-form-fid' },
            fid
          ),
          _react2.default.createElement('br', null),
          inputs
        );
      }
      var id = this.state.layer ? this.state.layer.get('id') : undefined;
      var layerSelector = this.state.layer ? undefined : _react2.default.createElement(_LayerSelector2.default, { intl: this.props.intl, labelText: formatMessage(messages.layer), value: id, onChange: this._onLayerSelectChange.bind(this), layers: this.state.layers });
      var buttons = _react2.default.createElement(
        'span',
        { style: { float: 'right' } },
        _react2.default.createElement(_Button2.default, { buttonType: 'Flat', primary: true, onTouchTap: this._onCancel.bind(this), label: formatMessage(messages.cancel) }),
        _react2.default.createElement(_Button2.default, { disabled: !this.state.layer, buttonType: 'Flat', primary: true, onTouchTap: this.save.bind(this), label: formatMessage(messages.save) })
      );
      return _react2.default.createElement(
        'div',
        { style: this.props.style, className: (0, _classnames2.default)('sdk-component edit-popup', this.props.className) },
        error,
        _react2.default.createElement(
          'div',
          { className: 'popup-content', ref: 'content' },
          layerSelector,
          editForm
        ),
        buttons
      );
    }
  }]);

  return EditPopup;
}(_react2.default.Component), _class.propTypes = {
  /**
   * The ol3 map to register for singleClick.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  proxy: _react2.default.PropTypes.string,
  requestHeaders: _react2.default.PropTypes.object,
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(EditPopup);