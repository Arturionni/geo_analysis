'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _Dialog = require('./Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactIntl = require('react-intl');

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _LabelEditor = require('./LabelEditor');

var _LabelEditor2 = _interopRequireDefault(_LabelEditor);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  title: {
    'id': 'labelmodal.title',
    'defaultMessage': 'Label for layer {layer}'
  },
  applybutton: {
    'id': 'labelmodal.applybutton',
    'defaultMessage': 'Apply'
  },
  clearbutton: {
    'id': 'labelmodal.clearbutton',
    'defaultMessage': 'Clear'
  },
  closebutton: {
    'id': 'labelmodal.closebutton',
    'defaultMessage': 'Close'
  }
});

/**
 * A modal window for applying labels to a vector layer. Only works for local vector layers currently.
 *
 * ```xml
 * <LabelModal layer={this.props.layer} />
 * ```
 */
var LabelModal = (_temp = _class = function (_React$PureComponent) {
  _inherits(LabelModal, _React$PureComponent);

  function LabelModal(props, context) {
    _classCallCheck(this, LabelModal);

    var _this = _possibleConstructorReturn(this, (LabelModal.__proto__ || Object.getPrototypeOf(LabelModal)).call(this, props));

    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this.state = {
      attributes: []
    };
    return _this;
  }

  _createClass(LabelModal, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var source = this.props.layer.getSource();
      if (source && !(source instanceof _openlayers2.default.source.Cluster)) {
        if (source.getState() === 'ready' && source.getFeatures().length > 0) {
          this._getAttributes(source);
        } else {
          source.on('change', function (evt) {
            this._getAttributes(source);
          }, this);
        }
      }
    }
  }, {
    key: '_getAttributes',
    value: function _getAttributes(source) {
      if (this.state.attributes.length === 0 && source.getState() === 'ready' && source.getFeatures().length > 0) {
        var feature = source.getFeatures()[0];
        if (feature) {
          var geom = feature.getGeometryName();
          var keys = feature.getKeys();
          var idx = keys.indexOf(geom);
          keys.splice(idx, 1);
          this.setState({ attributes: keys });
        }
      }
    }
  }, {
    key: '_setStyleFunction',
    value: function _setStyleFunction() {
      var layer = this.props.layer;
      var style = layer.getStyle();
      this._style = style;
      this._styleSet = true;
      var me = this;
      layer.setStyle(function (feature, resolution) {
        var rawValue = feature.get(me._labelState.labelAttribute);
        var value = '';
        if (rawValue !== undefined) {
          value += rawValue;
        }
        var text = new _openlayers2.default.style.Text({
          text: value,
          font: me._labelState.fontSize + 'px Calibri,sans-serif',
          fill: new _openlayers2.default.style.Fill({
            color: _util2.default.transformColor(me._labelState.fontColor)
          })
        });
        var modifyStyle = function modifyStyle(s) {
          // TODO, see if we can optimize / cache this
          if (s instanceof _openlayers2.default.style.Style) {
            s = [s];
          } else {
            s = s.slice();
          }
          s.push(new _openlayers2.default.style.Style({
            text: text
          }));
          return s;
        };
        if (style instanceof _openlayers2.default.style.Style || Array.isArray(style)) {
          return modifyStyle(style);
        } else {
          var result = style.call(me, feature, resolution);
          return modifyStyle(result);
        }
      });
    }
  }, {
    key: '_clearLabel',
    value: function _clearLabel() {
      if (this._style) {
        this.props.layer.setStyle(this._style);
        this._styleSet = false;
      }
    }
  }, {
    key: '_onChangeLabel',
    value: function _onChangeLabel(labelState) {
      this._labelState = labelState;
    }
  }, {
    key: '_setLabel',
    value: function _setLabel() {
      if (!this._styleSet) {
        this._setStyleFunction();
      } else {
        this.props.layer.changed();
      }
    }
  }, {
    key: 'close',
    value: function close() {
      this.props.onRequestClose();
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var actions = [_react2.default.createElement(_Button2.default, { buttonType: 'Flat', label: formatMessage(messages.closebutton), onTouchTap: this.close.bind(this) }), _react2.default.createElement(_Button2.default, { buttonType: 'Flat', label: formatMessage(messages.applybutton), onTouchTap: this._setLabel.bind(this) }), _react2.default.createElement(_Button2.default, { buttonType: 'Flat', label: formatMessage(messages.clearbutton), onTouchTap: this._clearLabel.bind(this) })];
      return _react2.default.createElement(
        _Dialog2.default,
        { style: this.props.style, inline: this.props.inline, open: this.props.open, className: (0, _classnames2.default)('sdk-component label-modal', this.props.className), autoScrollBodyContent: true, modal: true, actions: actions, title: formatMessage(messages.title, { layer: this.props.layer.get('title') }), onRequestClose: this.close.bind(this) },
        _react2.default.createElement(_LabelEditor2.default, _extends({}, this.props, { initialState: this._labelState, onChange: this._onChangeLabel.bind(this), attributes: this.state.attributes }))
      );
    }
  }]);

  return LabelModal;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * The layer associated with the style modal.
   */
  layer: _react2.default.PropTypes.instanceOf(_openlayers2.default.layer.Vector).isRequired,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(LabelModal);