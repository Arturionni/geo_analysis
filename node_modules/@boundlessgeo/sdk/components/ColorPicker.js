'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactcss = require('reactcss');

var _reactcss2 = _interopRequireDefault(_reactcss);

var _reactColor = require('react-color');

var _Popover = require('material-ui/Popover');

var _Popover2 = _interopRequireDefault(_Popover);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ColorPicker = (_temp = _class = function (_React$Component) {
  _inherits(ColorPicker, _React$Component);

  function ColorPicker(props) {
    _classCallCheck(this, ColorPicker);

    var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, props));

    _this.state = {
      displayColorPicker: false,
      color: props.initialColor
    };
    return _this;
  }

  _createClass(ColorPicker, [{
    key: 'handleClick',
    value: function handleClick(event) {
      this.setState({
        open: true,
        anchorEl: event.currentTarget,
        displayColorPicker: !this.state.displayColorPicker
      });
    }
  }, {
    key: 'handleClose',
    value: function handleClose() {
      this.setState({
        displayColorPicker: false
      });
    }
  }, {
    key: 'handleChange',
    value: function handleChange(color) {
      this.setState({
        color: color
      });
      this.props.onChange(color);
    }
  }, {
    key: 'render',
    value: function render() {
      var styles = (0, _reactcss2.default)({
        'default': {
          color: {
            width: '36px',
            height: '14px',
            borderRadius: '2px',
            background: 'rgba(' + this.state.color.rgb.r + ', ' + this.state.color.rgb.g + ', ' + this.state.color.rgb.b + ', ' + (this.state.color.rgb.a || 1) + ')'
          },
          swatch: {
            padding: '5px',
            background: '#fff',
            borderRadius: '1px',
            boxShadow: '0 0 0 1px rgba(0,0,0,.1)',
            cursor: 'pointer',
            display: 'block',
            position: 'absolute',
            top: '18px',
            right: '18px'
          },
          popover: {
            position: 'absolute',
            zIndex: 10000
          },
          cover: {
            position: 'fixed',
            top: '0px',
            right: '0px',
            bottom: '0px',
            left: '0px'
          }
        }
      });
      return _react2.default.createElement(
        'div',
        { style: this.props.style },
        _react2.default.createElement(
          'div',
          { style: styles.swatch, onClick: this.handleClick.bind(this) },
          _react2.default.createElement('div', { style: styles.color })
        ),
        this.state.displayColorPicker ? _react2.default.createElement(
          _Popover2.default,
          { onRequestClose: this.handleClose.bind(this), anchorEl: this.state.anchorEl, open: this.state.displayColorPicker, style: styles.popover },
          _react2.default.createElement('div', { style: styles.cover, onClick: this.handleClose.bind(this) }),
          _react2.default.createElement(_reactColor.SketchPicker, { presetColors: [], color: this.state.color, onChangeComplete: this.handleChange.bind(this) })
        ) : null
      );
    }
  }]);

  return ColorPicker;
}(_react2.default.Component), _class.propTypes = {
  /**
   * Callback that is called when a change is made.
   */
  onChange: _react2.default.PropTypes.func.isRequired,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Initial color.
   */
  initialColor: _react2.default.PropTypes.object
}, _class.defaultProps = {
  initialColor: {
    rgb: {
      r: 255,
      g: 0,
      b: 0,
      a: 0.5
    },
    hex: '#FF0000'
  }
}, _temp);
exports.default = ColorPicker;