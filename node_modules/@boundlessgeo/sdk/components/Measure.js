'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

/* eslint react/prop-types: 0 */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

require('./Measure.css');

var _IconMenu = require('material-ui/IconMenu');

var _IconMenu2 = _interopRequireDefault(_IconMenu);

var _MenuItem = require('material-ui/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactIntl = require('react-intl');

var _AppDispatcher = require('../dispatchers/AppDispatcher');

var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

var _toolutil = require('../toolutil');

var _toolutil2 = _interopRequireDefault(_toolutil);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _Divider = require('material-ui/Divider');

var _Divider2 = _interopRequireDefault(_Divider);

var _delete = require('material-ui/svg-icons/action/delete');

var _delete2 = _interopRequireDefault(_delete);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  dropdowntext: {
    'id': 'measure.dropdowntext',
    'defaultMessage': 'Measure'
  },
  dropdowntitle: {
    'id': 'measure.dropdowntitle',
    'defaultMessage': 'Measure distance and area on the map'
  },
  measuredistancetext: {
    'id': 'measure.measuredistancetext',
    'defaultMessage': 'Distance'
  },
  measureareatext: {
    'id': 'measure.measureareatext',
    'defaultMessage': 'Area'
  },
  cleartext: {
    'id': 'measure.cleartext',
    'defaultMessage': 'Remove'
  }
});

var wgs84Sphere = new _openlayers2.default.Sphere(6378137);

/**
 * Adds area and length measure tools as a menu button.
 *
 * ```xml
 * <Measure toggleGroup='navigation' map={map}/>
 * ```
 *
 * ![Measure](../Measure.png)
 * ![MeasureOpen](../MeasureOpen.png)
 */
var Measure = (_temp = _class = function (_React$PureComponent) {
  _inherits(Measure, _React$PureComponent);

  function Measure(props, context) {
    _classCallCheck(this, Measure);

    var _this = _possibleConstructorReturn(this, (Measure.__proto__ || Object.getPrototypeOf(Measure)).call(this, props));

    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this._dispatchToken = _toolutil2.default.register(_this);
    _this._tooltips = [];
    _this.state = {
      secondary: false,
      value: null,
      disabled: false
    };
    return _this;
  }

  _createClass(Measure, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var areaStyle = Measure.areaStyle;
      var lengthStyle = Measure.lengthStyle;
      this._layer = new _openlayers2.default.layer.Vector({
        title: null,
        zIndex: 1000,
        managed: false,
        style: function style(feature) {
          if (feature.getGeometry() instanceof _openlayers2.default.geom.Polygon) {
            return areaStyle;
          } else {
            return lengthStyle;
          }
        },
        source: new _openlayers2.default.source.Vector({ wrapX: false })
      });
      this.props.map.addLayer(this._layer);
      var source = this._layer.getSource();
      this._interactions = {
        'AREA': new _openlayers2.default.interaction.Draw({
          source: source,
          type: 'Polygon',
          style: Measure.drawStyle
        }),
        'LENGTH': new _openlayers2.default.interaction.Draw({
          source: source,
          type: 'LineString',
          style: Measure.drawStyle
        })
      };
      for (var key in this._interactions) {
        this._interactions[key].on('drawstart', this._onDrawStart, this);
        this._interactions[key].on('drawend', this._onDrawEnd, this);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _AppDispatcher2.default.unregister(this._dispatchToken);
    }
  }, {
    key: '_onDrawStart',
    value: function _onDrawStart(evt) {
      this._sketch = evt.feature;
      this._createTooltip();
    }
  }, {
    key: '_onDrawEnd',
    value: function _onDrawEnd() {
      this._tooltipElement.className = 'sdk-tooltip sdk-tooltip-static';
      this._tooltip.setOffset([0, -7]);
      this._sketch = null;
      this._tooltipElement = null;
    }
  }, {
    key: '_formatArea',
    value: function _formatArea(polygon) {
      var area;
      if (this.props.geodesic) {
        var sourceProj = this.props.map.getView().getProjection();
        var geom = polygon.clone().transform(sourceProj, 'EPSG:4326');
        var coordinates = geom.getLinearRing(0).getCoordinates();
        area = Math.abs(wgs84Sphere.geodesicArea(coordinates));
      } else {
        area = polygon.getArea();
      }
      if (area > 10000) {
        return Math.round(area / 1000000 * 100) / 100 + ' ' + 'km<sup>2</sup>';
      } else {
        return Math.round(area * 100) / 100 + ' ' + 'm<sup>2</sup>';
      }
    }
  }, {
    key: '_formatLength',
    value: function _formatLength(line) {
      var length;
      if (this.props.geodesic) {
        var coordinates = line.getCoordinates();
        length = 0;
        var sourceProj = this.props.map.getView().getProjection();
        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          var c1 = _openlayers2.default.proj.transform(coordinates[i], sourceProj, 'EPSG:4326');
          var c2 = _openlayers2.default.proj.transform(coordinates[i + 1], sourceProj, 'EPSG:4326');
          length += wgs84Sphere.haversineDistance(c1, c2);
        }
      } else {
        length = Math.round(line.getLength() * 100) / 100;
      }
      if (length > 100) {
        return Math.round(length / 1000 * 100) / 100 + ' ' + 'km';
      } else {
        return Math.round(length * 100) / 100 + ' ' + 'm';
      }
    }
  }, {
    key: '_pointerMoveHandler',
    value: function _pointerMoveHandler(evt) {
      if (!evt.dragging) {
        if (this._sketch) {
          var output, tooltipCoord;
          var geom = this._sketch.getGeometry();
          if (geom instanceof _openlayers2.default.geom.Polygon) {
            output = this._formatArea(geom);
            tooltipCoord = geom.getInteriorPoint().getCoordinates();
          } else if (geom instanceof _openlayers2.default.geom.LineString) {
            output = this._formatLength(geom);
            tooltipCoord = geom.getLastCoordinate();
          }
          this._tooltipElement.innerHTML = output;
          this._tooltip.setPosition(tooltipCoord);
        }
      }
    }
  }, {
    key: '_createTooltip',
    value: function _createTooltip() {
      if (this._tooltipElement) {
        this._tooltipElement.parentNode.removeChild(this._tooltipElement);
      }
      this._tooltipElement = document.createElement('div');
      this._tooltipElement.className = 'sdk-tooltip sdk-tooltip-measure';
      this._tooltip = new _openlayers2.default.Overlay({
        element: this._tooltipElement,
        offset: [0, -15],
        positioning: 'bottom-center'
      });
      this._tooltips.push(this._tooltip);
      this.props.map.addOverlay(this._tooltip);
    }
  }, {
    key: 'activate',
    value: function activate(interactions) {
      _toolutil2.default.activate(this, interactions);
      this.setState({ secondary: true });
    }
  }, {
    key: 'deactivate',
    value: function deactivate() {
      _toolutil2.default.deactivate(this);
      this.setState({ value: null, secondary: false });
    }
  }, {
    key: '_measureDistance',
    value: function _measureDistance() {
      var map = this.props.map;
      this.deactivate();
      map.on('pointermove', this._pointerMoveHandler, this);
      this.activate(this._interactions.LENGTH);
    }
  }, {
    key: '_measureArea',
    value: function _measureArea() {
      var map = this.props.map;
      this.deactivate();
      map.on('pointermove', this._pointerMoveHandler, this);
      this.activate(this._interactions.AREA);
    }
  }, {
    key: '_clear',
    value: function _clear() {
      var map = this.props.map;
      this.deactivate();
      for (var i = 0, ii = this._tooltips.length; i < ii; i++) {
        map.removeOverlay(this._tooltips[i]);
      }
      this._tooltips = [];
      this._layer.getSource().clear();
      map.un('pointermove', this._pointerMoveHandler, this);
    }
  }, {
    key: '_handleChange',
    value: function _handleChange(event, value) {
      if (value === 1) {
        this._measureDistance();
      } else if (value === 2) {
        this._measureArea();
      } else {
        this._clear();
      }
      this.setState({ value: value });
    }
  }, {
    key: 'disable',
    value: function disable() {
      this._clear();
      this.setState({ disabled: true });
    }
  }, {
    key: 'enable',
    value: function enable() {
      this.setState({ disabled: false });
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      return _react2.default.createElement(
        _IconMenu2.default,
        {
          style: this.props.style,
          anchorOrigin: { horizontal: 'right', vertical: 'bottom' }, targetOrigin: { horizontal: 'right', vertical: 'top' },
          className: (0, _classnames2.default)('sdk-component measure', this.props.className),
          iconButtonElement: _react2.default.createElement(_Button2.default, { secondary: this.state.secondary, buttonType: 'Icon', tooltip: formatMessage(messages.dropdowntitle), disabled: this.state.disabled, iconClassName: 'headerIcons ms ms-measure-distance' }),
          value: this.state.value,
          onChange: this._handleChange.bind(this) },
        _react2.default.createElement(_MenuItem2.default, { disabled: this.state.disabled, value: 1, primaryText: formatMessage(messages.measuredistancetext), leftIcon: _react2.default.createElement('i', { className: 'ms ms-measure-distance' }) }),
        _react2.default.createElement(_MenuItem2.default, { disabled: this.state.disabled, value: 2, primaryText: formatMessage(messages.measureareatext), leftIcon: _react2.default.createElement('i', { className: 'ms ms-measure-area' }) }),
        _react2.default.createElement(_Divider2.default, null),
        _react2.default.createElement(_MenuItem2.default, { disabled: this.state.disabled, primaryText: formatMessage(messages.cleartext), leftIcon: _react2.default.createElement(_delete2.default, null) })
      );
    }
  }]);

  return Measure;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * The map onto which to activate and deactivate the interactions.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * The toggleGroup to use. When this tool is activated, all other tools in the same toggleGroup will be deactivated.
   */
  toggleGroup: _react2.default.PropTypes.string,
  /**
   * Identifier to use for this tool. Can be used to group tools together.
   */
  toolId: _react2.default.PropTypes.string,
  /**
   * Should measurements be geodesic?
   */
  geodesic: _react2.default.PropTypes.bool,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  geodesic: true
}, _class.lengthStyle = new _openlayers2.default.style.Style({
  stroke: new _openlayers2.default.style.Stroke({
    color: '#FFC107',
    width: 2
  })
}), _class.areaStyle = new _openlayers2.default.style.Style({
  fill: new _openlayers2.default.style.Fill({
    color: 'rgba(255,213,79, 0.5)'
  }),
  stroke: new _openlayers2.default.style.Stroke({
    color: '#FFA000'
  })
}), _class.drawStyle = new _openlayers2.default.style.Style({
  fill: new _openlayers2.default.style.Fill({
    color: 'rgba(255, 255, 255, 0.2)'
  }),
  stroke: new _openlayers2.default.style.Stroke({
    color: 'rgba(0, 0, 0, 0.5)',
    lineDash: [10, 10],
    width: 2
  }),
  image: new _openlayers2.default.style.Circle({
    radius: 5,
    stroke: new _openlayers2.default.style.Stroke({
      color: 'rgba(0, 0, 0, 0.7)'
    }),
    fill: new _openlayers2.default.style.Fill({
      color: 'rgba(255, 255, 255, 0.2)'
    })
  })
}), _temp);
exports.default = (0, _reactIntl.injectIntl)(Measure);