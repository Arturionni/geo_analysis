'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _reactIntl = require('react-intl');

var _SelectField = require('material-ui/SelectField');

var _SelectField2 = _interopRequireDefault(_SelectField);

var _MenuItem = require('material-ui/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _Dialog = require('material-ui/Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _Toggle = require('material-ui/Toggle');

var _Toggle2 = _interopRequireDefault(_Toggle);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  dd: {
    'id': 'zoomtolonlat.dd',
    'defaultMessage': 'DD'
  },
  dms: {
    'id': 'zoomtolonlat.dms',
    'defaultMessage': 'DMS'
  },
  west: {
    'id': 'zoomtolatlon.west',
    'defaultMessage': 'West'
  },
  east: {
    'id': 'zoomtolatlon.east',
    'defaultMessage': 'East'
  },
  north: {
    'id': 'zoomtolatlon.north',
    'defaultMessage': 'North'
  },
  south: {
    'id': 'zoomtolatlon.south',
    'defaultMessage': 'South'
  },
  modaltitle: {
    'id': 'zoomtolatlon.modaltitle',
    'defaultMessage': 'Zoom to latitude/longitude'
  },
  ddtitle: {
    'id': 'zoomtolatlon.ddtitle',
    'defaultMessage': 'Decimal degrees (DD)'
  },
  dmstitle: {
    'id': 'zoomtolatlon.dmstitle',
    'defaultMessage': 'Degrees minutes seconds (DMS)'
  },
  buttontitle: {
    'id': 'zoomtolatlon.buttontitle',
    'defaultMessage': 'Zoom to latitude / longitude coordinates'
  },
  directionlabel: {
    'id': 'zoomtolatlon.directionlabel',
    'defaultMessage': 'Direction'
  },
  latitudelabel: {
    'id': 'zoomtolatlon.latitudelabel',
    'defaultMessage': 'Latitude'
  },
  degreeslabel: {
    'id': 'zoomtolatlon.degreeslabel',
    'defaultMessage': 'D'
  },
  minuteslabel: {
    'id': 'zoomtolatlon.minuteslabel',
    'defaultMessage': 'M'
  },
  secondslabel: {
    'id': 'zoomtolatlon.secondslabel',
    'defaultMessage': 'S'
  },
  longitudelabel: {
    'id': 'zoomtolatlon.longitudelabel',
    'defaultMessage': 'Longitude'
  },
  zoombuttontext: {
    'id': 'zoomtolatlon.zoombuttontext',
    'defaultMessage': 'Zoom'
  },
  closebuttontext: {
    'id': 'zoomtolatlon.closebuttontext',
    'defaultMessage': 'Cancel'
  }
});

/**
 * Component that allows zooming the map to a lat / lon position.
 *
 * ```xml
 * <ZoomToLatLon map={map} zoom={12} />
 * ```
 */
var ZoomToLatLon = (_temp = _class = function (_React$PureComponent) {
  _inherits(ZoomToLatLon, _React$PureComponent);

  function ZoomToLatLon(props, context) {
    _classCallCheck(this, ZoomToLatLon);

    var _this = _possibleConstructorReturn(this, (ZoomToLatLon.__proto__ || Object.getPrototypeOf(ZoomToLatLon)).call(this, props));

    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this.state = {
      dms: false,
      open: false,
      londirection: 'E',
      latdirection: 'N'
    };
    return _this;
  }

  _createClass(ZoomToLatLon, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: 'openDialog',
    value: function openDialog() {
      this.setState({ open: true });
    }
  }, {
    key: 'closeDialog',
    value: function closeDialog() {
      this.setState({ open: false });
    }
  }, {
    key: '_dmsToDegrees',
    value: function _dmsToDegrees(degrees, minutes, seconds, direction) {
      var dd = degrees + minutes / 60 + seconds / (60 * 60);
      if (direction === 'S' || direction === 'W') {
        dd = dd * -1;
      }
      return dd;
    }
  }, {
    key: '_zoomToLatLon',
    value: function _zoomToLatLon() {
      var lat, lon;
      if (!this.state.dms) {
        lat = parseFloat(this.refs.lat.getValue());
        lon = parseFloat(this.refs.lon.getValue());
      } else {
        lat = this._dmsToDegrees(parseFloat(this.refs.latd.getValue()), parseFloat(this.refs.latm.getValue()), parseFloat(this.refs.lats.getValue()), this.state.latdirection);
        lon = this._dmsToDegrees(parseFloat(this.refs.lond.getValue()), parseFloat(this.refs.lonm.getValue()), parseFloat(this.refs.lons.getValue()), this.state.londirection);
      }
      var view = this.props.map.getView();
      view.setCenter(_openlayers2.default.proj.fromLonLat([lon, lat], view.getProjection()));
      view.setZoom(this.props.zoom);
      this.closeDialog();
    }
  }, {
    key: 'handleChange',
    value: function handleChange(value) {
      if (value === parseInt(value, 10)) {
        this.setState({
          value: value
        });
      }
    }
  }, {
    key: '_onNorthSouthChange',
    value: function _onNorthSouthChange(evt, idx, value) {
      this.setState({ latdirection: value });
    }
  }, {
    key: '_onEastWestChange',
    value: function _onEastWestChange(evt, idx, value) {
      this.setState({ londirection: value });
    }
  }, {
    key: '_onToggle',
    value: function _onToggle() {
      var dms = this.state.dms;
      this.setState({ dms: !dms });
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var styles = {
        thumbOff: {
          backgroundColor: this._muiTheme.toggle.thumbOnColor
        },
        trackOff: {
          backgroundColor: this._muiTheme.toggle.trackOnColor
        }
      };
      var actions = [_react2.default.createElement(
        'span',
        { style: { position: 'absolute', bottom: 10, display: 'flex' } },
        _react2.default.createElement(
          'span',
          { style: { width: 50 } },
          formatMessage(messages.dd)
        ),
        _react2.default.createElement(_Toggle2.default, { style: { width: 50 }, thumbStyle: styles.thumbOff, trackStyle: styles.trackOff, toggled: this.state.dms, onToggle: this._onToggle.bind(this) }),
        _react2.default.createElement(
          'span',
          { style: { width: 50 } },
          formatMessage(messages.dms)
        )
      ), _react2.default.createElement(_Button2.default, { primary: true, buttonType: 'Flat', label: formatMessage(messages.closebuttontext), onTouchTap: this.closeDialog.bind(this) }), _react2.default.createElement(_Button2.default, { primary: true, buttonType: 'Flat', label: formatMessage(messages.zoombuttontext), onTouchTap: this._zoomToLatLon.bind(this) })];
      var body;
      if (!this.state.dms) {
        body = _react2.default.createElement(
          'span',
          null,
          _react2.default.createElement(_TextField2.default, { ref: 'lat', floatingLabelFixed: true, floatingLabelText: formatMessage(messages.latitudelabel) }),
          _react2.default.createElement('br', null),
          _react2.default.createElement(_TextField2.default, { ref: 'lon', floatingLabelFixed: true, floatingLabelText: formatMessage(messages.longitudelabel) })
        );
      } else {
        body = _react2.default.createElement(
          'span',
          null,
          _react2.default.createElement(
            'p',
            { style: { color: this._muiTheme.rawTheme.palette.accent1Color } },
            formatMessage(messages.latitudelabel)
          ),
          _react2.default.createElement(
            _SelectField2.default,
            { style: { top: -6, width: 100 }, value: this.state.latdirection, onChange: this._onNorthSouthChange.bind(this), floatingLabelText: formatMessage(messages.directionlabel) },
            _react2.default.createElement(_MenuItem2.default, { value: 'N', primaryText: formatMessage(messages.north) }),
            _react2.default.createElement(_MenuItem2.default, { value: 'S', primaryText: formatMessage(messages.south) })
          ),
          _react2.default.createElement(_TextField2.default, { ref: 'latd', style: { width: 150 }, hintText: formatMessage(messages.degreeslabel) }),
          _react2.default.createElement(_TextField2.default, { ref: 'latm', style: { width: 150 }, hintText: formatMessage(messages.minuteslabel) }),
          _react2.default.createElement(_TextField2.default, { ref: 'lats', style: { width: 150 }, hintText: formatMessage(messages.secondslabel) }),
          _react2.default.createElement('br', null),
          _react2.default.createElement(
            'p',
            { style: { color: this._muiTheme.rawTheme.palette.accent1Color } },
            formatMessage(messages.longitudelabel)
          ),
          _react2.default.createElement(
            _SelectField2.default,
            { style: { top: -6, width: 100 }, value: this.state.londirection, onChange: this._onEastWestChange.bind(this), floatingLabelText: formatMessage(messages.directionlabel) },
            _react2.default.createElement(_MenuItem2.default, { value: 'W', primaryText: formatMessage(messages.west) }),
            _react2.default.createElement(_MenuItem2.default, { value: 'E', primaryText: formatMessage(messages.east) })
          ),
          _react2.default.createElement(_TextField2.default, { ref: 'lond', style: { width: 150 }, hintText: formatMessage(messages.degreeslabel) }),
          _react2.default.createElement(_TextField2.default, { ref: 'lonm', style: { width: 150 }, hintText: formatMessage(messages.minuteslabel) }),
          _react2.default.createElement(_TextField2.default, { ref: 'lons', style: { width: 150 }, hintText: formatMessage(messages.secondslabel) })
        );
      }
      return _react2.default.createElement(
        'span',
        { style: this.props.style },
        _react2.default.createElement(_Button2.default, _extends({ buttonType: 'Icon' }, this.props, { iconClassName: 'headerIcons ms ms-zoom-to', className: (0, _classnames2.default)('sdk-component zoom-to-latlon', this.props.className), onTouchTap: this.openDialog.bind(this), tooltip: formatMessage(messages.buttontitle) })),
        _react2.default.createElement(
          _Dialog2.default,
          { actions: actions, open: this.state.open, autoScrollBodyContent: true, onRequestClose: this.closeDialog.bind(this), modal: true, title: formatMessage(messages.modaltitle) },
          body
        )
      );
    }
  }]);

  return ZoomToLatLon;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * The map onto which to zoom.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * The zoom level used when centering the view.
   */
  zoom: _react2.default.PropTypes.number,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  zoom: 14
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(ZoomToLatLon);