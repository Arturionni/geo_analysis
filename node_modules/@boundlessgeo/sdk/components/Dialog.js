'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Dialog = require('material-ui/Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _AppBar = require('material-ui/AppBar');

var _AppBar2 = _interopRequireDefault(_AppBar);

var _IconButton = require('material-ui/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _arrowBack = require('material-ui/svg-icons/navigation/arrow-back');

var _arrowBack2 = _interopRequireDefault(_arrowBack);

var _Drawer = require('material-ui/Drawer');

var _Drawer2 = _interopRequireDefault(_Drawer);

require('./Dialog.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Intermediate class for dialogs. Allows components to use dialogs that can
 * easily switch between modal dialogs and inline dialogs (Drawer).
 */
var Dialog = (_temp = _class = function (_React$PureComponent) {
  _inherits(Dialog, _React$PureComponent);

  function Dialog() {
    _classCallCheck(this, Dialog);

    return _possibleConstructorReturn(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).apply(this, arguments));
  }

  _createClass(Dialog, [{
    key: 'render',
    value: function render() {
      if (this.props.inline) {
        return _react2.default.createElement(
          _Drawer2.default,
          { style: this.props.style, width: 360, className: this.props.className, autoScrollBodyContent: this.props.autoScrollBodyContent, title: this.props.title, open: this.props.open, onRequestClose: this.props.onRequestClose },
          _react2.default.createElement(_AppBar2.default, {
            title: this.props.title,
            iconElementLeft: _react2.default.createElement(
              _IconButton2.default,
              null,
              ' ',
              _react2.default.createElement(_arrowBack2.default, null),
              ' '
            ), onLeftIconButtonTouchTap: this.props.onRequestClose }),
          _react2.default.createElement(
            'div',
            { className: 'noBorderPaper' },
            this.props.children
          ),
          _react2.default.createElement(
            'div',
            { className: 'footerButtons' },
            _react2.default.Children.toArray(this.props.actions)
          )
        );
      } else {
        return _react2.default.createElement(_Dialog2.default, this.props);
      }
    }
  }]);

  return Dialog;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Css classname to use.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Should the dialog show inline, or as a modal dialog?
   */
  inline: _react2.default.PropTypes.bool,
  /**
   * Function to call when dialog closes.
   */
  onRequestClose: _react2.default.PropTypes.func,
  /**
   * Title of the dialog.
   */
  title: _react2.default.PropTypes.string,
  /**
   * Should we auto scroll the content of the dialog body?
   */
  autoScrollBodyContent: _react2.default.PropTypes.bool,
  /**
   * Action buttons for the dialog.
   */
  actions: _react2.default.PropTypes.node,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  children: _react2.default.PropTypes.node
}, _class.defaultProps = {
  inline: false,
  open: false
}, _temp);
exports.default = Dialog;