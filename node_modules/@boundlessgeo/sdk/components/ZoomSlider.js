'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _debounce = require('debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _Slider = require('material-ui/Slider');

var _Slider2 = _interopRequireDefault(_Slider);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Horizontal slider to allow zooming the map. Make sure that the containing div has a size.
 *
 * ```xml
 * <ZoomSlider map={map} />
 * ```
 */
var ZoomSlider = (_temp = _class = function (_React$PureComponent) {
  _inherits(ZoomSlider, _React$PureComponent);

  function ZoomSlider(props) {
    _classCallCheck(this, ZoomSlider);

    var _this = _possibleConstructorReturn(this, (ZoomSlider.__proto__ || Object.getPrototypeOf(ZoomSlider)).call(this, props));

    _this.state = {};
    _this._onChange = (0, _debounce2.default)(_this._onChange, _this.props.refreshRate);
    return _this;
  }

  _createClass(ZoomSlider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.props.map.getView().on('change:resolution', this._handleChangeResolution, this);
      this._handleChangeResolution();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.props.map.getView().un('change:resolution', this._handleChangeResolution, this);
    }
  }, {
    key: '_handleChangeResolution',
    value: function _handleChangeResolution() {
      this.setState({
        value: this._getValue(this.props.map.getView().getResolution())
      });
    }
  }, {
    key: '_getValue',
    value: function _getValue(resolution) {
      var view = this.props.map.getView();
      var maxResolution = view.getMaxResolution();
      var minResolution = view.getMinResolution();
      var max = Math.log(maxResolution / minResolution) / Math.log(2);
      return 1 - Math.log(maxResolution / resolution) / Math.log(2) / max;
    }
  }, {
    key: '_onChange',
    value: function _onChange(evt, value) {
      var map = this.props.map;
      var view = map.getView();
      var maxResolution = view.getMaxResolution();
      var minResolution = view.getMinResolution();
      var max = Math.log(maxResolution / minResolution) / Math.log(2);
      var resolution = maxResolution / Math.pow(2, (1 - value) * max);
      view.setResolution(view.constrainResolution(resolution));
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Slider2.default, { style: this.props.style, className: (0, _classnames2.default)('sdk-component zoom-slider', this.props.className), onChange: this._onChange.bind(this), value: this.state.value });
    }
  }]);

  return ZoomSlider;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Refresh rate in ms for handling changes from the slider.
   */
  refreshRate: _react2.default.PropTypes.number,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
  * Css class name to apply on the root element of this component.
  */
  className: _react2.default.PropTypes.string,
  /**
   * The map to use.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired
}, _class.defaultProps = {
  refreshRate: 100
}, _temp);
exports.default = ZoomSlider;