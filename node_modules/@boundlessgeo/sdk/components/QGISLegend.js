'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

/* eslint react/prop-types: 0 */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _LayerStore = require('../stores/LayerStore');

var _LayerStore2 = _interopRequireDefault(_LayerStore);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _image = require('material-ui/svg-icons/image/image');

var _image2 = _interopRequireDefault(_image);

var _Paper = require('material-ui/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

var _List = require('material-ui/List');

require('./QGISLegend.css');

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  buttontitle: {
    'id': 'qgislegend.buttontitle',
    'defaultMessage': 'Legend'
  }
});

/**
 * A component that shows a legend based on artefacts created by the QGIS plugin Web Application Builder.
 *
 * ```javascript
 * var legendData = {
 *   'geo20130827100512660': [
 *     {
 *      'href': '0_1.png',
 *       'title': 'Hill_111'
 *     }, {
 *       'href': '0_2.png',
 *       'title': 'Hill_112'
 *     }
 *   ],
 *   'pt120130827095302041': [
 *     {
 *       'href': '2_0.png',
 *       'title': '85.0-116.84'
 *     }, {
 *       'href': '2_1.png',
 *       'title': '116.84-148.68'
 *     }
 *   ]
 * };
 * ```
 *
 * ```xml
 * <QGISLegend map={map} legendBasePath='./resources/legend/' legendData={legendData} pullRight/>
 * ```
 */
var QGISLegend = (_temp = _class = function (_React$PureComponent) {
  _inherits(QGISLegend, _React$PureComponent);

  function QGISLegend(props, context) {
    _classCallCheck(this, QGISLegend);

    var _this = _possibleConstructorReturn(this, (QGISLegend.__proto__ || Object.getPrototypeOf(QGISLegend)).call(this, props));

    _LayerStore2.default.bindMap(_this.props.map);
    _this.state = {
      muiTheme: context.muiTheme || (0, _getMuiTheme2.default)(),
      visible: _this.props.showExpandedOnStartup
    };
    return _this;
  }

  _createClass(QGISLegend, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._onChangeCb = this._onChange.bind(this);
      _LayerStore2.default.addChangeListener(this._onChangeCb);
      this._onChange();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _LayerStore2.default.removeChangeListener(this._onChangeCb);
    }
  }, {
    key: '_onChange',
    value: function _onChange() {
      this.setState(_LayerStore2.default.getState());
    }
  }, {
    key: '_hidePanel',
    value: function _hidePanel() {
      this.setState({ visible: false });
    }
  }, {
    key: '_showPanel',
    value: function _showPanel() {
      this.setState({ visible: true });
    }
  }, {
    key: '_togglePanel',
    value: function _togglePanel() {
      this.setState({ visible: !this.state.visible });
    }
  }, {
    key: '_renderItems',
    value: function _renderItems(legendData, legendBasePath) {
      var legendNodes = [];
      var props = this.props;
      var symbolFunc = function symbolFunc(symbol) {
        var src = legendBasePath + symbol.href;
        var style = props.size ? { width: props.size, height: props.size } : undefined;
        return _react2.default.createElement(_List.ListItem, { disabled: true, key: symbol.title, primaryText: symbol.title, leftIcon: _react2.default.createElement('img', { style: style, src: src }) });
      };
      for (var id in legendData) {
        var layer = _LayerStore2.default.findLayer(id);
        var title = layer.get('title');
        if (title !== null && layer.getVisible()) {
          var symbols = legendData[id].map(symbolFunc);
          legendNodes.push(_react2.default.createElement(_List.ListItem, { initiallyOpen: true, key: id, nestedItems: symbols, primaryText: title }));
        }
      }
      return _react2.default.createElement(
        _List.List,
        null,
        legendNodes
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var divClass = {
        'legend': true,
        'shown': this.state.visible,
        'sdk-component': true,
        'qgis-legend': true
      };
      var items = this._renderItems(this.props.legendData, this.props.legendBasePath);
      return _react2.default.createElement(
        'div',
        { style: this.props.style, className: (0, _classnames2.default)(divClass, this.props.className) },
        _react2.default.createElement(
          _Button2.default,
          { buttonType: 'Action', mini: true, secondary: true, className: 'legendbutton', tooltip: formatMessage(messages.buttontitle), onTouchTap: this._togglePanel.bind(this) },
          _react2.default.createElement(_image2.default, null)
        ),
        _react2.default.createElement(
          _Paper2.default,
          { zDepth: 0, className: 'legend-panel' },
          items
        )
      );
    }
  }]);

  return QGISLegend;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * The map from which to extract the layers.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * The base path (relative url) to use for finding the artefacts.
   */
  legendBasePath: _react2.default.PropTypes.string,
  /**
   * The label and image to use per layer. The object is keyed by layer name currently. For example: {'swamp': [['', '4_0.png']]}.
   */
  legendData: _react2.default.PropTypes.object.isRequired,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Should we expand on startup of the application?
   */
  showExpandedOnStartup: _react2.default.PropTypes.bool,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Size in pixels of the legend icons
   */
  size: _react2.default.PropTypes.number,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  legendBasePath: './legend/',
  showExpandedOnStartup: false
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(QGISLegend);