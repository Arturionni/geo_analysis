'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _FeatureStore = require('../stores/FeatureStore');

var _FeatureStore2 = _interopRequireDefault(_FeatureStore);

var _close = require('material-ui/svg-icons/navigation/close');

var _close2 = _interopRequireDefault(_close);

var _c3Windows = require('c3-windows');

var _c3Windows2 = _interopRequireDefault(_c3Windows);

require('./c3.min.css');

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _MenuItem = require('material-ui/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _SelectField = require('material-ui/SelectField');

var _SelectField2 = _interopRequireDefault(_SelectField);

var _Paper = require('material-ui/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactIntl = require('react-intl');

require('./Chart.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AGGREGATION_MIN = 0;
var AGGREGATION_MAX = 1;
var AGGREGATION_SUM = 2;
var AGGREGATION_AVG = 3;
var DISPLAY_MODE_FEATURE = 0;
var DISPLAY_MODE_CATEGORY = 1;
var DISPLAY_MODE_COUNT = 2;

var messages = (0, _reactIntl.defineMessages)({
  combotext: {
    'id': 'chart.combotext',
    'defaultMessage': 'Chart Name'
  },
  count: {
    'id': 'chart.count',
    'defaultMessage': 'Feature count'
  }
});
/**
 * $$src/components/ChartDetail.md$$
 *
 */
var Chart = (_temp = _class = function (_React$Component) {
  _inherits(Chart, _React$Component);

  function Chart(props, context) {
    _classCallCheck(this, Chart);

    var _this = _possibleConstructorReturn(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).call(this, props));

    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this.state = {
      chart: _this.props.charts[0],
      value: _this.props.charts[0].title,
      selected: null
    };
    return _this;
  }

  _createClass(Chart, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._onChangeCb = this._onChange.bind(this);
      _FeatureStore2.default.addChangeListener(this._onChangeCb);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _FeatureStore2.default.removeChangeListener(this._onChangeCb);
    }
  }, {
    key: '_onChange',
    value: function _onChange() {
      this._storeConfig = _FeatureStore2.default.getState();
      this.setState({ selected: this._storeConfig[this.state.chart.layer].selected });
    }
  }, {
    key: '_getColumns',
    value: function _getColumns() {
      var chart = this.state.chart;
      var formatMessage = this.props.intl.formatMessage;

      var i, ii, j, jj, values, cat, key;
      var categoryField = chart.categoryField;
      var valueFields = chart.valueFields;
      var selectedFeatures = this.state.selected ? this.state.selected : [];
      var columns = [['x']];
      if (chart.displayMode === DISPLAY_MODE_COUNT) {
        var count = formatMessage(messages.count);
        columns.push([count]);
      } else {
        for (i = 0, ii = valueFields.length; i < ii; i++) {
          columns.push([valueFields[i]]);
        }
      }
      switch (chart.displayMode) {
        case DISPLAY_MODE_FEATURE:
          for (i = 0, ii = selectedFeatures.length; i < ii; ++i) {
            columns[0].push(selectedFeatures[i].get(categoryField));
            for (j = 0, jj = valueFields.length; j < jj; ++j) {
              columns[j + 1].push(selectedFeatures[i].get(valueFields[j]));
            }
          }
          break;
        case DISPLAY_MODE_CATEGORY:
          values = {};
          for (i = 0, ii = selectedFeatures.length; i < ii; i++) {
            cat = selectedFeatures[i].get(categoryField);
            if (cat !== undefined && cat !== null) {
              cat = cat.toString();
              if (!(cat in values)) {
                values[cat] = [];
                for (j = 0, jj = valueFields.length; j < jj; j++) {
                  values[cat].push([selectedFeatures[i].get(valueFields[j])]);
                }
              } else {
                for (j = 0, jj = valueFields.length; j < jj; j++) {
                  values[cat][j].push(selectedFeatures[i].get(valueFields[j]));
                }
              }
            }
          }
          for (key in values) {
            columns[0].push(key);
            var v;
            for (i = 0, ii = valueFields.length; i < ii; i++) {
              if (chart.operation === AGGREGATION_SUM || chart.operation === AGGREGATION_AVG) {
                v = 0;
                jj = values[key][i].length;
                for (j = 0; j < jj; ++j) {
                  v += values[key][i][j];
                }
                if (chart.operation === AGGREGATION_AVG) {
                  v /= jj;
                }
              } else if (chart.operation === AGGREGATION_MIN) {
                Math.min.apply(Math, values[key][i]);
              } else if (chart.operation === AGGREGATION_MAX) {
                Math.max.apply(Math, values[key][i]);
              }
              columns[i + 1].push(v);
            }
          }
          break;
        case DISPLAY_MODE_COUNT:
          values = {};
          for (i = 0, ii = selectedFeatures.length; i < ii; i++) {
            cat = selectedFeatures[i].get(categoryField);
            if (cat !== undefined && cat !== null) {
              cat = cat.toString();
              if (!(cat in values)) {
                values[cat] = 1;
              } else {
                values[cat]++;
              }
            }
          }
          var sorted = [];
          for (key in values) {
            sorted.push([key, values[key]]);
          }
          sorted.sort(function (a, b) {
            return b[1] - a[1];
          });
          for (i = 0, ii = sorted.length; i < ii; i++) {
            columns[0].push(sorted[i][0]);
            columns[1].push(sorted[i][1]);
          }
          break;
        default:
          break;
      }
      return columns;
    }
  }, {
    key: '_selectChart',
    value: function _selectChart(evt, idx, value) {
      for (var i = 0, ii = this.props.charts.length; i < ii; ++i) {
        var chart = this.props.charts[i];
        if (chart.title === value) {
          this.setState({
            chart: chart,
            value: value,
            selected: this._storeConfig[chart.layer].selected
          });
          break;
        }
      }
    }
  }, {
    key: '_onClose',
    value: function _onClose() {
      this.props.onClose();
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var columns = this._getColumns();
      _c3Windows2.default.generate({
        bindto: '#chart',
        data: {
          x: 'x',
          columns: columns,
          type: 'bar'
        },
        padding: {
          right: 30
        },
        axis: {
          x: {
            type: 'category',
            tick: {
              rotate: 70,
              multiline: false
            },
            height: 100
          }
        }
      });
      var options = this.props.charts.map(function (chart, idx) {
        var title = chart.title;
        return _react2.default.createElement(_MenuItem2.default, { key: idx, value: title, primaryText: title });
      });
      var closer = this.props.onClose ? _react2.default.createElement(
        _Button2.default,
        { buttonType: 'Icon', style: { float: 'right', zIndex: 1000 }, ref: 'popupCloser', onTouchTap: this.props.onClose },
        _react2.default.createElement(_close2.default, null)
      ) : undefined;
      return _react2.default.createElement(
        _Paper2.default,
        { style: this.props.style, zDepth: 0, className: (0, _classnames2.default)('sdk-component chart', this.props.className) },
        _react2.default.createElement(
          _SelectField2.default,
          { style: { width: 350 }, floatingLabelText: formatMessage(messages.combotext), floatingLabelFixed: true, value: this.state.value, onChange: this._selectChart.bind(this) },
          options
        ),
        closer,
        _react2.default.createElement('div', { id: 'chart' })
      );
    }
  }]);

  return Chart;
}(_react2.default.Component), _class.propTypes = {
  /**
   * An array of configuration objects. Configuration objects have title, categoryField, layer,
   * valueFields, displayMode and operation keys.
    * title (string, required) is the title to display for the chart.
    * categoryField (string, optional) is the attribute to use as the category.
    * layer (string, required) is the id property of the corresponding layer to use.
    * valueFields (array of string, required) is an array of field names to use for displaying values in the chart.
    * displayMode (enum(0, 1, 2), required) defines how the feature attributes will be used to create the chart.
           When using a value of 0 (by feature), an element will be added to the chart for each selected feature.
           When using a value of 1 (by category), selected features will be grouped according to a category defined by the categoryField.
           When using a value of 2 (count by category) the chart will show the number of features in each category.
    * The statistic function to use when displayMode is by category (1) is defined in the operation (enum(0, 1, 2, 3), optional) key.
           A value of 0 means MIN,
           a value of 1 means MAX,
           a value of 2 means SUM
           and a value of 3 means AVG (Average).
   */
  charts: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
    title: _react2.default.PropTypes.string.isRequired,
    categoryField: _react2.default.PropTypes.string,
    layer: _react2.default.PropTypes.string.isRequired,
    valueFields: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.string).isRequired,
    displayMode: _react2.default.PropTypes.oneOf([0, 1, 2]).isRequired,
    operation: _react2.default.PropTypes.oneOf([0, 1, 2, 3])
  })).isRequired,
  /**
   * Css class name to apply on the menu or div.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Callback function when the closer icon is pressed.
   */
  onClose: _react2.default.PropTypes.func,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(Chart);