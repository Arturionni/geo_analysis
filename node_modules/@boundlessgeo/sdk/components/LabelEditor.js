'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ColorPicker = require('./ColorPicker');

var _ColorPicker2 = _interopRequireDefault(_ColorPicker);

var _Paper = require('material-ui/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

var _MenuItem = require('material-ui/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _SelectField = require('material-ui/SelectField');

var _SelectField2 = _interopRequireDefault(_SelectField);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _reactIntl = require('react-intl');

var _Subheader = require('material-ui/Subheader');

var _Subheader2 = _interopRequireDefault(_Subheader);

var _List = require('material-ui/List');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  header: {
    'id': 'labeleditor.header',
    'defaultMessage': 'Label'
  },
  attributelabel: {
    'id': 'labeleditor.attributelabel',
    'defaultMessage': 'Attribute'
  },
  fillcolorlabel: {
    'id': 'labeleditor.fillcolorlabel',
    'defaultMessage': 'Font color'
  },
  sizelabel: {
    'id': 'labeleditor.sizelabel',
    'defaultMessage': 'Font size'
  },
  emptytext: {
    'id': 'labeleditor.emptytext',
    'defaultMessage': 'Select an attribute'
  }
});

/**
 * Editor for label properties. Can edit the label attribute, fontSize and fontColor.
 *
 * ```xml
 * <LabelEditor attributes={this.props.attributes} onChange={this.props.onChange} />
 * ```
 */
var LabelEditor = (_temp = _class = function (_React$PureComponent) {
  _inherits(LabelEditor, _React$PureComponent);

  function LabelEditor(props) {
    _classCallCheck(this, LabelEditor);

    var _this = _possibleConstructorReturn(this, (LabelEditor.__proto__ || Object.getPrototypeOf(LabelEditor)).call(this, props));

    _this.state = {
      labelAttribute: _this.props.initialLabelAttribute,
      fontSize: _this.props.initialFontSize,
      fontColor: _this.props.initialFontColor
    };
    return _this;
  }

  _createClass(LabelEditor, [{
    key: '_onItemChange',
    value: function _onItemChange(evt, idx, value) {
      this.setState({ labelAttribute: value }, function () {
        this.props.onChange(this.state);
      });
    }
  }, {
    key: '_onChangeFontSize',
    value: function _onChangeFontSize(evt) {
      this.setState({ fontSize: evt.currentTarget.value }, function () {
        this.props.onChange(this.state);
      });
    }
  }, {
    key: '_onChangeFill',
    value: function _onChangeFill(color) {
      this.setState({ fontColor: color }, function () {
        this.props.onChange(this.state);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var listStyle = {
        padding: '0px 16px',
        marginLeft: 0
      };
      var boxStyle = {
        marginLeft: 0
      };
      var attributeItems = [];
      attributeItems.push(_react2.default.createElement(_MenuItem2.default, { key: 0, style: { 'minHeight': '32px' }, value: null, primaryText: ' ' }));
      for (var i = 0, ii = this.props.attributes.length; i < ii; ++i) {
        var attribute = this.props.attributes[i];
        attributeItems.push(_react2.default.createElement(_MenuItem2.default, { key: i + 1, value: attribute, primaryText: attribute }));
      }
      return _react2.default.createElement(
        _Paper2.default,
        { style: this.props.style, zDepth: 0, className: (0, _classnames2.default)('sdk-component label-editor style-contentContainer', this.props.className) },
        _react2.default.createElement(
          _Subheader2.default,
          { className: 'style-listHeader' },
          formatMessage(messages.header)
        ),
        _react2.default.createElement(
          _List.ListItem,
          { insetChildren: true, innerDivStyle: listStyle },
          _react2.default.createElement(
            _SelectField2.default,
            { floatingLabelFixed: true, fullWidth: true, floatingLabelText: formatMessage(messages.attributelabel), hintText: formatMessage(messages.emptytext), value: this.state.labelAttribute, onChange: this._onItemChange.bind(this) },
            attributeItems
          )
        ),
        _react2.default.createElement(
          _List.ListItem,
          { insetChildren: true, innerDivStyle: listStyle },
          _react2.default.createElement(_TextField2.default, { fullWidth: true, floatingLabelFixed: true, defaultValue: this.state.fontSize, floatingLabelText: formatMessage(messages.sizelabel), onChange: this._onChangeFontSize.bind(this) })
        ),
        _react2.default.createElement(_List.ListItem, { innerDivStyle: boxStyle, primaryText: formatMessage(messages.fillcolorlabel), rightIconButton: _react2.default.createElement(_ColorPicker2.default, { onChange: this._onChangeFill.bind(this), initialColor: this.state.fontColor }) })
      );
    }
  }]);

  return LabelEditor;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * List of attributes.
   */
  attributes: _react2.default.PropTypes.array.isRequired,
  /**
   * Callback that is called when a change is made.
   */
  onChange: _react2.default.PropTypes.func.isRequired,
  /**
   * Initial font color.
   */
  initialFontColor: _react2.default.PropTypes.object,
  /**
   * Initial font size.
   */
  initialFontSize: _react2.default.PropTypes.string,
  /**
   * Initial label attribute.
   */
  initialLabelAttribute: _react2.default.PropTypes.string,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
  * @ignore
  */
  intl: _reactIntl.intlShape.isRequired
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  initialLabelAttribute: null,
  initialFontSize: '12',
  initialFontColor: {
    rgb: {
      r: 0,
      g: 0,
      b: 0,
      a: 1
    },
    hex: '#000000'
  }
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(LabelEditor);