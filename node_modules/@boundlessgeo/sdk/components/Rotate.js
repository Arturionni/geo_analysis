'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _navigation = require('material-ui/svg-icons/maps/navigation');

var _navigation2 = _interopRequireDefault(_navigation);

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  rotatetitle: {
    'id': 'rotate.rotatetitle',
    'defaultMessage': 'Reset rotation'
  }
});

/**
 * A button that shows the rotation of the map and allows to reset it.
 *
 * ```xml
 * <Rotate map={map} />
 * ```
 *
 * ![Rotate](../Rotate.png)
 */
var Rotate = (_temp = _class = function (_React$PureComponent) {
  _inherits(Rotate, _React$PureComponent);

  function Rotate(props, context) {
    _classCallCheck(this, Rotate);

    var _this = _possibleConstructorReturn(this, (Rotate.__proto__ || Object.getPrototypeOf(Rotate)).call(this, props));

    _this.state = {
      rotation: 0
    };
    return _this;
  }

  _createClass(Rotate, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var view = this.props.map.getView();
      this.setState({
        rotation: view.getRotation()
      });
      view.on('change:rotation', function () {
        this.setState({ rotation: view.getRotation() });
      }, this);
    }
  }, {
    key: '_resetNorth',
    value: function _resetNorth() {
      var map = this.props.map;
      var view = map.getView();
      var currentRotation = view.getRotation();
      if (currentRotation !== 0) {
        if (this.props.duration > 0) {
          view.animate({
            rotation: 0,
            duration: this.props.duration,
            easing: _openlayers2.default.easing.easeOut
          });
        } else {
          view.setRotation(0);
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.state.rotation === 0 && this.props.autoHide) {
        return _react2.default.createElement('article', null);
      } else {
        var formatMessage = this.props.intl.formatMessage;

        var iconStyle = {
          transform: 'rotate(' + this.state.rotation + 'rad)'
        };
        return _react2.default.createElement(
          _Button2.default,
          { style: this.props.style, tooltipPosition: this.props.tooltipPosition, buttonType: 'Action', mini: true, secondary: true, className: (0, _classnames2.default)('sdk-component rotate', this.props.className), iconStyle: iconStyle, tooltip: formatMessage(messages.rotatetitle), onTouchTap: this._resetNorth.bind(this) },
          _react2.default.createElement(_navigation2.default, null)
        );
      }
    }
  }]);

  return Rotate;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Animation duration in milliseconds.
   */
  duration: _react2.default.PropTypes.number,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * The ol3 map to use.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Should we hide the button if not rotated?
   */
  autoHide: _react2.default.PropTypes.bool,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Position of the tooltip.
   */
  tooltipPosition: _react2.default.PropTypes.oneOf(['bottom', 'bottom-right', 'bottom-left', 'right', 'left', 'top-right', 'top', 'top-left']),
  /**
   * i18n message strings. Provided through the application through context.
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.defaultProps = {
  autoHide: true,
  duration: 250
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(Rotate);