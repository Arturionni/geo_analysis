'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _AppDispatcher = require('../dispatchers/AppDispatcher');

var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

var _ToolConstants = require('../constants/ToolConstants');

var _ToolConstants2 = _interopRequireDefault(_ToolConstants);

var _LayerStore = require('../stores/LayerStore');

var _LayerStore2 = _interopRequireDefault(_LayerStore);

var _CircularProgress = require('material-ui/CircularProgress');

var _CircularProgress2 = _interopRequireDefault(_CircularProgress);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

require('./LoadingPanel.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A loading panel shows a spinner when tiles or images are loading.
 *
 * ```xml
 * <LoadingPanel map={map} />
 * ```
 */
var LoadingPanel = (_temp = _class = function (_React$PureComponent) {
  _inherits(LoadingPanel, _React$PureComponent);

  function LoadingPanel(props) {
    _classCallCheck(this, LoadingPanel);

    var _this = _possibleConstructorReturn(this, (LoadingPanel.__proto__ || Object.getPrototypeOf(LoadingPanel)).call(this, props));

    _this.state = {
      show: null,
      forceHide: false
    };
    _this._loading = 0;
    _this._loaded = 0;
    _LayerStore2.default.bindMap(_this.props.map);
    return _this;
  }

  _createClass(LoadingPanel, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: (0, _getMuiTheme2.default)() };
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._onChangeCb = this._onChange.bind(this);
      _LayerStore2.default.addChangeListener(this._onChangeCb);
      this._onChange();
      var me = this;
      this._dispatchToken = _AppDispatcher2.default.register(function (payload) {
        var action = payload.action;
        switch (action.type) {
          case _ToolConstants2.default.START_PLAYBACK:
            me.setState({ forceHide: true });
            break;
          case _ToolConstants2.default.STOP_PLAYBACK:
            me.setState({ forceHide: false });
            break;
          default:
            break;
        }
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _AppDispatcher2.default.unregister(this._dispatchToken);
      _LayerStore2.default.removeChangeListener(this._onChangeCb);
    }
  }, {
    key: '_addLoading',
    value: function _addLoading() {
      if (this._loading === 0) {
        this.setState({ show: true });
      }
      ++this._loading;
      this._update();
    }
  }, {
    key: '_hide',
    value: function _hide() {
      if (this._loading === this._loaded) {
        this.setState({ show: false });
      }
    }
  }, {
    key: '_update',
    value: function _update() {
      if (this._loading === this._loaded) {
        this._loading = 0;
        this._loaded = 0;
        var me = this;
        global.setTimeout(function () {
          me._hide();
        }, 100);
      }
    }
  }, {
    key: '_addLoaded',
    value: function _addLoaded() {
      var me = this;
      global.setTimeout(function () {
        ++me._loaded;
        me._update();
      }, 100);
    }
  }, {
    key: '_onChange',
    value: function _onChange() {
      var layers = _LayerStore2.default.getState().flatLayers;
      var me = this;
      layers.forEach(function (lyr) {
        var source;
        if (!(lyr instanceof _openlayers2.default.layer.Group)) {
          source = lyr.getSource();
        }
        if (source) {
          if (source instanceof _openlayers2.default.source.Tile) {
            source.on('tileloadstart', me._addLoading, me);
            source.on('tileloadend', me._addLoaded, me);
            source.on('tileloaderror', me._addLoaded, me);
          } else if (source instanceof _openlayers2.default.source.Image) {
            source.on('imageloadstart', me._addLoading, me);
            source.on('imageloadend', me._addLoaded, me);
            source.on('imageloaderror', me._addLoaded, me);
          }
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.state.show && !this.state.forceHide) {
        return _react2.default.createElement(
          'div',
          { style: this.props.style, className: (0, _classnames2.default)('sdk-component loading-panel', this.props.className) },
          _react2.default.createElement(_CircularProgress2.default, { size: 60, thickness: 7 })
        );
      } else {
        return _react2.default.createElement('article', { style: this.props.style, className: (0, _classnames2.default)('sdk-component loading-panel hidden', this.props.className) });
      }
    }
  }]);

  return LoadingPanel;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Map for whose layers to listen to load events.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = LoadingPanel;