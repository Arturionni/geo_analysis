'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /* Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactDnd = require('react-dnd');

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _Dialog = require('./Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _FeatureTable = require('./FeatureTable');

var _FeatureTable2 = _interopRequireDefault(_FeatureTable);

var _FilterModal = require('./FilterModal');

var _FilterModal2 = _interopRequireDefault(_FilterModal);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _LabelModal = require('./LabelModal');

var _LabelModal2 = _interopRequireDefault(_LabelModal);

var _StyleModal = require('./StyleModal');

var _StyleModal2 = _interopRequireDefault(_StyleModal);

var _LayerActions = require('../actions/LayerActions');

var _LayerActions2 = _interopRequireDefault(_LayerActions);

var _SLDService = require('../services/SLDService');

var _SLDService2 = _interopRequireDefault(_SLDService);

var _WMSService = require('../services/WMSService');

var _WMSService2 = _interopRequireDefault(_WMSService);

var _Slider = require('material-ui/Slider');

var _Slider2 = _interopRequireDefault(_Slider);

var _List = require('material-ui/List');

var _WMSLegend = require('./WMSLegend');

var _WMSLegend2 = _interopRequireDefault(_WMSLegend);

var _ArcGISRestLegend = require('./ArcGISRestLegend');

var _ArcGISRestLegend2 = _interopRequireDefault(_ArcGISRestLegend);

var _reactIntl = require('react-intl');

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _Popover = require('material-ui/Popover');

var _Popover2 = _interopRequireDefault(_Popover);

var _Menu = require('material-ui/Menu');

var _Menu2 = _interopRequireDefault(_Menu);

var _MenuItem = require('material-ui/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _Divider = require('material-ui/Divider');

var _Divider2 = _interopRequireDefault(_Divider);

var _fileSaver = require('file-saver');

var _fileSaver2 = _interopRequireDefault(_fileSaver);

var _reactDndTextDragpreview = require('react-dnd-text-dragpreview');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var layerListItemSource = {
  canDrag: function canDrag(props, monitor) {
    return props.layer.get('canDrag') !== false && props.allowReordering && props.layer.get('type') !== 'base' && props.layer.get('type') !== 'base-group';
  },
  beginDrag: function beginDrag(props) {
    return {
      index: props.index,
      layer: props.layer,
      group: props.group
    };
  }
};

var layerListItemTarget = {
  hover: function hover(props, monitor, component) {
    if (props.layer.get('type') === 'base' || props.layer.get('type') === 'base-group') {
      return;
    }
    var sourceItem = monitor.getItem();
    var dragIndex = sourceItem.index;
    var hoverIndex = props.index;
    // Don't replace items with themselves
    if (dragIndex === hoverIndex) {
      return;
    }

    // Determine rectangle on screen
    var comp = _reactDom2.default.findDOMNode(component);
    if (!comp) {
      return;
    }
    var hoverBoundingRect = comp.getBoundingClientRect();

    // Get vertical middle
    var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;

    // Determine mouse position
    var clientOffset = monitor.getClientOffset();

    // Get pixels to the top
    var hoverClientY = clientOffset.y - hoverBoundingRect.top;

    // Only perform the move when the mouse has crossed half of the items height
    // When dragging downwards, only move when the cursor is below 50%
    // When dragging upwards, only move when the cursor is above 50%

    // Dragging downwards
    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {
      return;
    }

    // Dragging upwards
    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {
      return;
    }

    // Time to actually perform the action
    props.moveLayer(dragIndex, hoverIndex, sourceItem.layer, sourceItem.group);
  }
};

function collect(connect, monitor) {
  return {
    connectDragSource: connect.dragSource(),
    connectDragPreview: connect.dragPreview()
  };
}

function collectDrop(connect, monitor) {
  return {
    connectDropTarget: connect.dropTarget()
  };
}

var dragPreviewStyleDefault = {
  backgroundColor: 'rgb(68, 67, 67)',
  color: 'white',
  fontSize: 14,
  paddingTop: 4,
  paddingRight: 7,
  paddingBottom: 6,
  paddingLeft: 7,
  fontFamily: 'Roboto'
};

var messages = (0, _reactIntl.defineMessages)({
  closebutton: {
    'id': 'layerlist.closebutton',
    'defaultMessage': 'Close'
  },
  tablemodaltitle: {
    'id': 'layerlist.tablemodaltitle',
    'defaultMessage': 'Table'
  },
  zoombuttonlabel: {
    'id': 'layerlist.zoombuttonlabel',
    'defaultMessage': 'Zoom to layer'
  },
  downloadbuttonlabel: {
    'id': 'layerlist.downloadbuttonlabel',
    'defaultMessage': 'Download layer'
  },
  filterbuttonlabel: {
    'id': 'layerlist.filterbuttonlabel',
    'defaultMessage': 'Filter layer'
  },
  labelbuttonlabel: {
    'id': 'layerlist.labelbuttonlabel',
    'defaultMessage': 'Edit layer label'
  },
  stylingbuttonlabel: {
    'id': 'layerlist.stylingbuttonlabel',
    'defaultMessage': 'Edit layer style'
  },
  removebuttonlabel: {
    'id': 'layerlist.removebuttonlabel',
    'defaultMessage': 'Remove layer'
  },
  editbuttonlabel: {
    'id': 'layerlist.editbuttonlabel',
    'defaultMessage': 'Edit layer'
  },
  tablebuttonlabel: {
    'id': 'layerlist.tablebuttonlabel',
    'defaultMessage': 'Show table'
  },
  draglayerlabel: {
    'id': 'layerlist.draglayerlabel',
    'defaultMessage': 'Moving Layer'
  }
});

/**
$$src/components/LayerListItemDetail.md$$
 */

var LayerListItem = (_temp = _class = function (_React$Component) {
  _inherits(LayerListItem, _React$Component);

  function LayerListItem(props, context) {
    _classCallCheck(this, LayerListItem);

    var _this = _possibleConstructorReturn(this, (LayerListItem.__proto__ || Object.getPrototypeOf(LayerListItem)).call(this, props));

    _this._handleMenuOpen = function (event) {
      // This prevents ghost click.
      event.preventDefault();

      _this.setState({
        popover: true,
        anchorEl: event.currentTarget
      });
    };

    _this._handleRequestClose = function () {
      _this.setState({
        popover: false
      });
    };

    _this._proxy = context.proxy;
    _this._requestHeaders = context.requestHeaders;
    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this.state = {
      filterOpen: false,
      labelOpen: false,
      tableOpen: false,
      open: props.layer.get('isGroupExpanded') === false ? false : true,
      styleOpen: false,
      checked: props.layer.getVisible(),
      previousBase: ''
    };
    return _this;
  }

  _createClass(LayerListItem, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var dragPreviewStyle = this.props.dragPreviewStyle || dragPreviewStyleDefault;

      var dragPreview = (0, _reactDndTextDragpreview.createDragPreview)(this.formatDragMessage(this.props), dragPreviewStyle);
      this.props.connectDragPreview(dragPreview);

      if (this.props.group) {
        if (this.props.group.get('type') !== 'base-group') {
          this.props.group.on('change:visible', this._changeGroupVisible, this);
        }
      }
      this.props.layer.on('change:visible', this._changeLayerVisible, this);
      if (this.props.handleResolutionChange) {
        this.props.map.getView().on('change:resolution', this._changeResolution, this);
      }
      if (!this.props.layer.get('wfsInfo')) {
        this.props.layer.once('change:wfsInfo', function () {
          this.forceUpdate();
        }, this);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.props.group) {
        if (this.props.group.get('type') !== 'base-group') {
          this.props.group.un('change:visible', this._changeGroupVisible, this);
        }
      }
      this.props.layer.un('change:visible', this._changeLayerVisible, this);
      if (this.props.handleResolutionChange) {
        this.props.map.getView().un('change:resolution', this._changeResolution, this);
      }
    }

    // provides custom message for dragPreview

  }, {
    key: 'formatDragMessage',
    value: function formatDragMessage(props) {
      var formatMessage = this.props.intl.formatMessage;

      var title = props.layer.get('title');
      //IE might not like es6 template strings
      return formatMessage(messages.draglayerlabel) + ' - ' + title;
    }
  }, {
    key: '_changeGroupVisible',
    value: function _changeGroupVisible(evt) {
      this.setState({ checked: evt.target.getVisible() });
    }
  }, {
    key: '_changeLayerVisible',
    value: function _changeLayerVisible(evt) {
      this.setState({ checked: evt.target.getVisible() });
      // this.forceUpdate();
    }
  }, {
    key: '_changeResolution',
    value: function _changeResolution() {
      this.setState({ resolution: this.props.map.getView().getResolution() });
    }
  }, {
    key: '_getLayerGroupId',
    value: function _getLayerGroupId(target, groups) {
      var groupId = void 0;
      var returnGroupId = void 0;
      var layers = groups.getLayers();
      layers.forEach(function (group) {
        if (group instanceof _openlayers2.default.layer.Group) {
          groupId = group.get('id');
          var groupLayers = group.getLayers();
          groupLayers.forEach(function (layer) {
            if (layer.get('id') === target) {
              returnGroupId = groupId;
            }
          });
        }
      });
      return returnGroupId || '';
    }
  }, {
    key: '_getParentVisibilty',
    value: function _getParentVisibilty(target, groups) {
      var isParentVisible = true;
      var returnVal = true;
      var layers = groups.getLayers();
      layers.forEach(function (group) {
        if (group instanceof _openlayers2.default.layer.Group) {
          isParentVisible = group.getVisible();
          var children = group.getLayers();
          children.forEach(function (layer) {
            if (layer.get('id') === target) {
              returnVal = isParentVisible;
            }
          });
        }
      });
      return returnVal;
    }
  }, {
    key: '_handleVisibility',
    value: function _handleVisibility(event) {
      var parentVisibility = this._getParentVisibilty(this.props.layer.get('id'), this.props.map.getLayerGroup());
      if (parentVisibility) {
        this.props.layer.setVisible(!this.props.layer.getVisible());
      }
    }
  }, {
    key: '_handleBaseVisibility',
    value: function _handleBaseVisibility(event) {
      var i, ii;
      var baseLayers = [];

      var layers = this.props.map.getLayers();
      this.forEachLayer(baseLayers, this.props.map.getLayerGroup());
      for (i = 0, ii = baseLayers.length; i < ii; ++i) {
        baseLayers[i].setVisible(false);
      }
      layers.forEach(function (l) {
        if (l instanceof _openlayers2.default.layer.Group) {
          l.setVisible(true);
        }
      });
      this.props.layer.setVisible(true);
      this.props.setBaseLayer(this.props.layer.get('id'));
    }
  }, {
    key: 'forEachLayer',
    value: function forEachLayer(layers, layer) {
      var self = this;
      if (layer instanceof _openlayers2.default.layer.Group) {
        layer.getLayers().forEach(function (groupLayer) {
          self.forEachLayer(layers, groupLayer);
        });
      } else if (layer.get('type') === 'base') {
        layers.push(layer);
      }
    }
  }, {
    key: '_handleBaseParentVisibility',
    value: function _handleBaseParentVisibility(event) {
      var i, ii;
      var baseLayers = [];

      if (event.target.className.indexOf('fa-eye-slash') > 0) {
        this.props.setBaseLayer(this.state.previousBase);
        this.forEachLayer(baseLayers, this.props.map.getLayerGroup());
        for (i = 0, ii = baseLayers.length; i < ii; ++i) {
          if (baseLayers[i].get('id') === this.state.previousBase) {
            baseLayers[i].setVisible(true);
          }
        }
      } else {
        this.setState({ previousBase: this.props.currentBaseLayer });
        this.props.setBaseLayer('baseParent');
        this.forEachLayer(baseLayers, this.props.map.getLayerGroup());
        for (i = 0, ii = baseLayers.length; i < ii; ++i) {
          baseLayers[i].setVisible(false);
        }
      }
    }
  }, {
    key: '_toggleNested',
    value: function _toggleNested(event) {
      this.setState({ open: !this.state.open });
    }
  }, {
    key: '_download',
    value: function _download() {
      var formatInfo = this.constructor.formats[this.props.downloadFormat];
      var format = formatInfo.format;
      var layer = this.props.layer;
      var source = layer.getSource();
      if (source instanceof _openlayers2.default.source.Cluster) {
        source = source.getSource();
      }
      var features = source.getFeatures();
      var output = format.writeFeatures(features, { featureProjection: this.props.map.getView().getProjection() });
      var blob = new Blob([output], { type: formatInfo.mimeType + ';charset=utf-8' });
      _fileSaver2.default.saveAs(blob, layer.get('title') + '.' + formatInfo.extension);
    }
  }, {
    key: '_filter',
    value: function _filter() {
      this.setState({
        filterOpen: true
      });
    }
  }, {
    key: '_closeFilter',
    value: function _closeFilter() {
      this.setState({
        filterOpen: false
      });
    }
  }, {
    key: '_label',
    value: function _label() {
      this.setState({
        labelOpen: true
      });
    }
  }, {
    key: '_closeLabel',
    value: function _closeLabel() {
      this.setState({
        labelOpen: false
      });
    }
  }, {
    key: '_style',
    value: function _style() {
      if (!this.props.layer.get('styleInfo')) {
        var sld_body;
        if (!(this.props.layer instanceof _openlayers2.default.layer.Vector)) {
          sld_body = this.props.layer.getSource().getParams().SLD_BODY;
        }
        if (sld_body) {
          this.props.layer.set('styleInfo', _SLDService2.default.parse(sld_body));
          this._showStyling();
        } else {
          var me = this;
          _WMSService2.default.getStyles(this.props.layer.get('wfsInfo').url, this.props.layer, function (info) {
            me.props.layer.set('styleInfo', info);
            me._showStyling();
          }, undefined, this._proxy, this._requestHeaders);
        }
      } else {
        this._showStyling();
      }
    }
  }, {
    key: '_modifyLatLonBBOX',
    value: function _modifyLatLonBBOX(bbox) {
      bbox[0] = Math.max(-180, bbox[0]);
      bbox[1] = Math.max(-85, bbox[1]);
      bbox[2] = Math.min(180, bbox[2]);
      bbox[3] = Math.min(85, bbox[3]);
      return bbox;
    }
  }, {
    key: '_showTable',
    value: function _showTable() {
      this.setState({
        tableOpen: true
      });
    }
  }, {
    key: '_closeTable',
    value: function _closeTable() {
      this.setState({
        tableOpen: false
      });
    }
  }, {
    key: '_showStyling',
    value: function _showStyling() {
      this.props.layer.set('canDrag', false);
      this.setState({
        styleOpen: true
      });
    }
  }, {
    key: '_closeStyling',
    value: function _closeStyling() {
      this.setState({
        styleOpen: false
      });
      this.props.layer.set('canDrag', true);
    }
  }, {
    key: '_zoomTo',
    value: function _zoomTo() {
      var map = this.props.map;
      var view = map.getView();
      var extent = this.props.layer.get('EX_GeographicBoundingBox');
      if (extent) {
        if (view.getProjection().getCode() === 'EPSG:3857') {
          this._modifyLatLonBBOX(extent);
        }
        extent = _openlayers2.default.proj.transformExtent(extent, 'EPSG:4326', view.getProjection());
      }
      if (!extent) {
        extent = this.props.layer.getSource().getExtent();
      }
      map.getView().fit(extent, map.getSize());
    }
  }, {
    key: '_remove',
    value: function _remove() {
      _LayerActions2.default.removeLayer(this.props.layer, this.props.group);
    }
  }, {
    key: '_edit',
    value: function _edit() {
      _LayerActions2.default.editLayer(this.props.layer);
    }
  }, {
    key: '_changeOpacity',
    value: function _changeOpacity(evt, value) {
      this.props.layer.setOpacity(value);
    }
  }, {
    key: '_onTableUpdate',
    value: function _onTableUpdate() {
      if (this.refs.tableModal) {
        this.refs.tableModal.forceUpdate();
      }
    }
  }, {
    key: 'calculateInRange',
    value: function calculateInRange() {
      if (!this.props.handleResolutionChange) {
        return true;
      }
      var layer = this.props.layer;
      var map = this.props.map;
      var resolution = map.getView().getResolution();
      return resolution >= layer.getMinResolution() && resolution < layer.getMaxResolution();
    }
  }, {
    key: 'renderItem',
    value: function renderItem(item, isDragging) {
      if (isDragging) {
        return _react2.default.createElement(
          'div',
          null,
          item
        );
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          connectDragSource = _props.connectDragSource,
          connectDropTarget = _props.connectDropTarget,
          isDragging = _props.isDragging,
          Item = _props.Item;

      var layer = this.props.layer;
      var source = layer.getSource ? layer.getSource() : undefined;
      var formatMessage = this.props.intl.formatMessage;

      var opacity;
      if (this.props.showOpacity && source && layer.get('type') !== 'base') {
        var val = layer.getOpacity();
        var slider = _react2.default.createElement(_Slider2.default, { sliderStyle: { marginTop: '0px', top: '14px', marginBottom: '0' }, defaultValue: val, onChange: this._changeOpacity.bind(this) });
        opacity = _react2.default.createElement(
          _MenuItem2.default,
          { leftIcon: _react2.default.createElement('i', { className: 'menuIcon ms ms-opacity' }) },
          slider
        );
      }
      var table;
      if (this.props.showTable && (this.props.layer instanceof _openlayers2.default.layer.Vector || this.props.layer.get('wfsInfo') !== undefined)) {
        table = _react2.default.createElement(_MenuItem2.default, { onTouchTap: this._showTable.bind(this), primaryText: formatMessage(messages.tablebuttonlabel), leftIcon: _react2.default.createElement('i', { className: 'fa fa-table' }) });
      }

      var downArrow = _react2.default.createElement('i', { className: 'fa fa-angle-down', onTouchTap: this._toggleNested.bind(this) });
      var sideArrow = _react2.default.createElement('i', { className: 'fa fa-angle-right', onTouchTap: this._toggleNested.bind(this) });
      var arrowIcon = this.state.open ? downArrow : sideArrow;

      var layersIcon = _react2.default.createElement('i', { className: 'ms ms-layers' });
      if (layer.get('type') !== 'base-group' && !(layer instanceof _openlayers2.default.layer.Group)) {
        arrowIcon = _react2.default.createElement('i', { className: 'fa fa-fw' });
      }
      var zoomTo;
      if (layer.get('type') !== 'base' && layer.get('type') !== 'base-group' && (source && source.getExtent || layer.get('EX_GeographicBoundingBox')) && this.props.showZoomTo) {
        zoomTo = _react2.default.createElement('i', { className: 'fa fa-crosshairs', onTouchTap: this._zoomTo.bind(this) });
      }
      var download;
      if (layer instanceof _openlayers2.default.layer.Vector && this.props.showDownload) {
        var disabled = false;
        if (this.props.downloadFormat === 'GPX') {
          var features = layer.getSource().getFeatures();
          if (features.length > 0) {
            var geom = features[0].getGeometry();
            disabled = geom instanceof _openlayers2.default.geom.Polygon || geom instanceof _openlayers2.default.geom.MultiPolygon;
          }
        }
        download = _react2.default.createElement(_MenuItem2.default, { disabled: disabled, primaryText: formatMessage(messages.downloadbuttonlabel), leftIcon: _react2.default.createElement('i', { className: 'fa fa-download' }), onTouchTap: this._download.bind(this) });
      }
      var filter, filterModal;
      if (layer instanceof _openlayers2.default.layer.Vector && this.props.allowFiltering) {
        filter = _react2.default.createElement(_MenuItem2.default, { primaryText: formatMessage(messages.filterbuttonlabel), leftIcon: _react2.default.createElement('i', { className: 'fa fa-filter' }), onTouchTap: this._filter.bind(this) });
        filterModal = _react2.default.createElement(_FilterModal2.default, _extends({}, this.props, { ref: 'filterModal', open: this.state.filterOpen, onRequestClose: this._closeFilter.bind(this), inline: this.props.inlineDialogs, layer: this.props.layer }));
      }
      var label, labelModal;
      if (layer instanceof _openlayers2.default.layer.Vector && this.props.allowLabeling && layer.getSource() instanceof _openlayers2.default.source.Vector) {
        label = _react2.default.createElement(_MenuItem2.default, { primaryText: formatMessage(messages.labelbuttonlabel), leftIcon: _react2.default.createElement('i', { className: 'fa fa-tag' }), onTouchTap: this._label.bind(this) });
        labelModal = _react2.default.createElement(_LabelModal2.default, _extends({}, this.props, { ref: 'labelModal', open: this.state.labelOpen, onRequestClose: this._closeLabel.bind(this), inline: this.props.inlineDialogs, layer: this.props.layer }));
      }
      var remove;
      if (this.props.allowRemove && layer.get('type') !== 'base' && layer.get('isRemovable') === true) {
        remove = _react2.default.createElement(_MenuItem2.default, { primaryText: formatMessage(messages.removebuttonlabel), leftIcon: _react2.default.createElement('i', { className: 'menuIcon fa fa-trash' }), onTouchTap: this._remove.bind(this) });
      }
      var edit;
      if (this.props.allowEditing && layer.get('isWFST') === true) {
        edit = _react2.default.createElement(_MenuItem2.default, { onTouchTap: this._edit.bind(this), primaryText: formatMessage(messages.editbuttonlabel), leftIcon: _react2.default.createElement('i', { className: 'fa fa-pencil' }) });
      }
      var tableModal, styleModal;
      var styling = _react2.default.createElement('i', { className: 'fa fa-fw' });
      var canStyle = layer.get('wfsInfo') && this.props.allowStyling;
      if (canStyle) {
        styling = _react2.default.createElement(
          'i',
          { className: 'ms ms-style', onTouchTap: this._style.bind(this) },
          ' '
        );
        styleModal = _react2.default.createElement(_StyleModal2.default, _extends({}, this.props, { ref: 'styleModal', open: this.state.styleOpen, inline: this.props.inlineDialogs, onRequestClose: this._closeStyling.bind(this), layer: this.props.layer }));
      }
      if (this.props.showTable && (this.props.layer instanceof _openlayers2.default.layer.Vector || this.props.layer.get('wfsInfo') !== undefined)) {
        var actions = [_react2.default.createElement(_Button2.default, { buttonType: 'Flat', label: formatMessage(messages.closebutton), onTouchTap: this._closeTable.bind(this) })];
        tableModal = _react2.default.createElement(
          _Dialog2.default,
          { ref: 'tableModal', inline: this.props.inlineDialogs, actions: actions, title: formatMessage(messages.tablemodaltitle), open: this.state.tableOpen, onRequestClose: this._closeTable.bind(this) },
          _react2.default.createElement(
            'div',
            { style: { height: 400 } },
            _react2.default.createElement(_FeatureTable2.default, { allowEdit: this.props.inlineDialogs, onUpdate: this._onTableUpdate.bind(this), map: this.props.map, layer: this.props.layer, intl: this.props.intl })
          )
        );
      }
      var legend;
      if (this.props.includeLegend && this.props.layer.getVisible() && this.calculateInRange()) {
        if (this.props.layer instanceof _openlayers2.default.layer.Tile && this.props.layer.getSource() instanceof _openlayers2.default.source.TileWMS || this.props.layer instanceof _openlayers2.default.layer.Image && this.props.layer.getSource() instanceof _openlayers2.default.source.ImageWMS) {
          legend = _react2.default.createElement(_WMSLegend2.default, { layer: this.props.layer });
        }
        if (this.props.layer instanceof _openlayers2.default.layer.Tile && this.props.layer.getSource() instanceof _openlayers2.default.source.TileArcGISRest) {
          legend = _react2.default.createElement(_ArcGISRestLegend2.default, { layer: this.props.layer });
        }
      }

      var showBasemapEye = this.props.layer.get('visible') || this.props.currentBaseLayer === this.props.layer.get('id');
      var checked = _react2.default.createElement('i', { className: 'fa fa-eye', onTouchTap: this._handleVisibility.bind(this) });
      var unchecked = _react2.default.createElement('i', { className: 'fa fa-eye-slash', onTouchTap: this._handleVisibility.bind(this) });
      var baseVisibility = _react2.default.createElement('i', { onTouchTap: this._handleBaseVisibility.bind(this), className: (0, _classnames2.default)({ 'fa': true, 'fa-eye': showBasemapEye, 'fa-eye-slash': !showBasemapEye }) });
      var baseParentVisibility = _react2.default.createElement('i', { id: 'baseParentVisibility', onTouchTap: this._handleBaseParentVisibility.bind(this), className: (0, _classnames2.default)({ 'fa': true, 'fa-eye-slash': this.props.currentBaseLayer === 'baseParent', 'fa-eye': this.props.currentBaseLayer !== 'baseParent' }) });
      var fixedWidth = _react2.default.createElement('i', { className: 'fa fa-fw' });

      var isVisible = this.state.checked;
      if (!this.props.layer.getVisible() && this.state.checked) {
        isVisible = false;
      }
      var visibility = isVisible ? checked : unchecked;
      var popoverEllipsis = !(this.props.layer instanceof _openlayers2.default.layer.Group) && (opacity || download || filter || remove || table || label || edit) ? _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement('i', { className: 'fa fa-ellipsis-v', onTouchTap: this._handleMenuOpen.bind(this) }),
        _react2.default.createElement(
          _Popover2.default,
          {
            open: this.state.popover,
            anchorEl: this.state.anchorEl,
            anchorOrigin: { horizontal: 'right', vertical: 'bottom' },
            targetOrigin: { horizontal: 'right', vertical: 'top' },
            onRequestClose: this._handleRequestClose.bind(this)
          },
          _react2.default.createElement(
            _Menu2.default,
            null,
            opacity,
            _react2.default.createElement(_Divider2.default, null),
            download,
            filter,
            remove,
            table,
            label,
            edit
          )
        )
      ) : undefined;
      var flexContainer = {
        display: 'flex',
        padding: '8px'
      };
      var muted;
      var isNested = false;
      var rightIconButtons = _react2.default.createElement(
        'span',
        { className: 'fixedContainer' },
        styling,
        zoomTo,
        visibility,
        popoverEllipsis
      );
      if (layer.get('type') === 'base-group') {
        rightIconButtons = _react2.default.createElement(
          'span',
          { className: 'fixedContainer' },
          baseParentVisibility,
          fixedWidth
        );
        muted = this.props.currentBaseLayer === 'baseParent';
      } else if (layer.get('type') === 'base') {
        rightIconButtons = _react2.default.createElement(
          'span',
          { className: 'fixedContainer' },
          baseVisibility,
          fixedWidth
        );
        muted = !showBasemapEye;
        isNested = true;
      } else if (layer instanceof _openlayers2.default.layer.Group) {
        rightIconButtons = _react2.default.createElement(
          'span',
          { className: 'fixedContainer' },
          visibility,
          fixedWidth
        );
        muted = !isVisible;
      } else {
        isNested = !!this._getLayerGroupId(layer.get('id'), this.props.map.getLayerGroup());
        muted = !isVisible;
      }
      return connectDragSource(connectDropTarget(_react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_List.ListItem, {
          className: (0, _classnames2.default)({ 'sdk-component': true, 'menuItemContainer': true, 'layer-list-item': true }, this.props.className),
          insetChildren: true,
          innerDivStyle: flexContainer,
          autoGenerateNestedIndicator: false,
          primaryText: _react2.default.createElement(
            'span',
            { className: (0, _classnames2.default)({ 'menuItem': true, muted: muted, 'n1': isNested }) },
            _react2.default.createElement(
              'span',
              { className: 'statusIcons' },
              arrowIcon,
              layersIcon,
              ' ',
              _react2.default.createElement(
                'span',
                { className: 'layer-list-name' },
                this.props.title
              )
            ),
            rightIconButtons
          ),
          nestedItems: this.props.nestedItems,
          open: this.state.open }),
        _react2.default.createElement(
          'div',
          { style: { paddingLeft: 72 } },
          legend,
          _react2.default.createElement(
            'span',
            null,
            filterModal,
            labelModal,
            styleModal,
            tableModal
          )
        ),
        this.renderItem(Item, isDragging)
      )));
    }
  }]);

  return LayerListItem;
}(_react2.default.Component), _class.propTypes = {
  /**
   * @ignore
   */
  connectDragSource: _react2.default.PropTypes.func.isRequired,
  /**
   * @ignore
   */
  connectDragPreview: _react2.default.PropTypes.func.isRequired,
  /**
   * @ignore
   */
  connectDropTarget: _react2.default.PropTypes.func.isRequired,
  /**
   * @ignore
   */
  isDragging: _react2.default.PropTypes.bool,
  /**
  * @ignore
  */
  Item: _react2.default.PropTypes.object,
  /**
  * @ignore
  */
  moveLayer: _react2.default.PropTypes.func.isRequired,
  /**
   * @ignore
   */
  index: _react2.default.PropTypes.number.isRequired,
  /**
   * The map in which the layer of this item resides.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * The layer associated with this item.
   */
  layer: _react2.default.PropTypes.instanceOf(_openlayers2.default.layer.Base).isRequired,
  /**
   * The group layer to which this item might belong.
   */
  group: _react2.default.PropTypes.instanceOf(_openlayers2.default.layer.Group),
  /**
   * The feature format to serialize in for downloads.
   */
  downloadFormat: _react2.default.PropTypes.oneOf(['GeoJSON', 'KML', 'GPX']),
  /**
   * The title to show for the layer.
   */
  title: _react2.default.PropTypes.string.isRequired,
  /**
   * Should we show a button that can open up the feature table?
   */
  showTable: _react2.default.PropTypes.bool,
  /**
   * Should we show a zoom to button for the layer?
   */
  showZoomTo: _react2.default.PropTypes.bool,
  /**
   * Should we show allow reordering?
   */
  allowReordering: _react2.default.PropTypes.bool,
  /**
   * Should we allow for filtering of features in a layer?
   */
  allowFiltering: _react2.default.PropTypes.bool,
  /**
   * Should we allow for removal of layers?
   */
  allowRemove: _react2.default.PropTypes.bool,
  /**
   * Should we allow editing of features in a vector layer?
   */
  allowEditing: _react2.default.PropTypes.bool,
  /**
   * Should we allow for labeling of features in a layer?
   */
  allowLabeling: _react2.default.PropTypes.bool,
  /**
   * Should we allow for styling of features in a vector layer?
   */
  allowStyling: _react2.default.PropTypes.bool,
  /**
   * Should we show a download button?
   */
  showDownload: _react2.default.PropTypes.bool,
  /**
   * Should we include the legend in the layer list?
   */
  includeLegend: _react2.default.PropTypes.bool,
  /**
   * Should groups be collapsible?
   */
  collapsible: _react2.default.PropTypes.bool,
  /**
   * The nested items to show for this item.
   */
  nestedItems: _react2.default.PropTypes.array,
  /**
   * Should we show an opacity slider for the layer?
   */
  showOpacity: _react2.default.PropTypes.bool,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config for when label is out of scale.
   */
  labelStyleOutOfScale: _react2.default.PropTypes.object,
  /**
   * Should we handle resolution changes to show when a layer is in or out of scale?
   */
  handleResolutionChange: _react2.default.PropTypes.bool,
  /**
   * Should dialogs show inline instead of a modal?
   */
  inlineDialogs: _react2.default.PropTypes.bool,
  /**
  *  State from parent component to manage baseLayers
  */
  currentBaseLayer: _react2.default.PropTypes.string,
  /**
  *  Style for text of dragged layer
  */
  dragPreviewStyle: _react2.default.PropTypes.object,
  /**
  *  Callback from parent component to manage baseLayers
  */
  setBaseLayer: _react2.default.PropTypes.func,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object,
  proxy: _react2.default.PropTypes.string,
  requestHeaders: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  connectDragSource: function connectDragSource(a) {
    return a;
  },
  connectDropTarget: function connectDropTarget(a) {
    return a;
  },
  connectDragPreview: function connectDragPreview(a) {
    return a;
  }
}, _class.formats = {
  GeoJSON: {
    format: new _openlayers2.default.format.GeoJSON(),
    mimeType: 'text/json',
    extension: 'geojson'
  },
  KML: {
    format: new _openlayers2.default.format.KML(),
    mimeType: 'application/vnd.google-earth.kml+xml',
    extension: 'kml'
  },
  GPX: {
    format: new _openlayers2.default.format.GPX(),
    mimeType: 'application/gpx+xml',
    extension: 'gpx'
  } }, _temp);
exports.default = (0, _reactIntl.injectIntl)((0, _reactDnd.DropTarget)('layerlistitem', layerListItemTarget, collectDrop)((0, _reactDnd.DragSource)('layerlistitem', layerListItemSource, collect)(LayerListItem)));