'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _zoomIn2 = require('material-ui/svg-icons/action/zoom-in');

var _zoomIn3 = _interopRequireDefault(_zoomIn2);

var _zoomOut2 = require('material-ui/svg-icons/action/zoom-out');

var _zoomOut3 = _interopRequireDefault(_zoomOut2);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  zoomintitle: {
    'id': 'zoom.zoomintitle',
    'defaultMessage': 'Zoom in'
  },
  zoomouttitle: {
    'id': 'zoom.zoomouttitle',
    'defaultMessage': 'Zoom out'
  }
});

/**
 * Two buttons to zoom in and out.
 *
 * ```xml
 * <Zoom map={map} />
 * ```
 *
 * ![Zoom](../Zoom.png)
 */
var Zoom = (_temp = _class = function (_React$PureComponent) {
  _inherits(Zoom, _React$PureComponent);

  function Zoom(props, context) {
    _classCallCheck(this, Zoom);

    var _this = _possibleConstructorReturn(this, (Zoom.__proto__ || Object.getPrototypeOf(Zoom)).call(this, props));

    _this.state = {
      muiTheme: context.muiTheme || (0, _getMuiTheme2.default)()
    };
    return _this;
  }

  _createClass(Zoom, [{
    key: '_zoomIn',
    value: function _zoomIn() {
      this._zoomByDelta(this.props.delta);
    }
  }, {
    key: '_zoomOut',
    value: function _zoomOut() {
      this._zoomByDelta(-this.props.delta);
    }
  }, {
    key: '_zoomByDelta',
    value: function _zoomByDelta(delta) {
      var map = this.props.map;
      var view = map.getView();
      var currentResolution = view.getResolution();
      if (currentResolution) {
        var newResolution = view.constrainResolution(currentResolution, delta);
        if (this.props.duration > 0) {
          /* TODO: not yet API see https://github.com/openlayers/openlayers/issues/6548
                  if (view.getAnimating()) {
                    view.cancelAnimations();
                  }
          */
          view.animate({
            resolution: newResolution,
            duration: this.props.duration,
            easing: _openlayers2.default.easing.easeOut
          });
        } else {
          view.setResolution(newResolution);
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      return _react2.default.createElement(
        'div',
        { style: this.props.style, className: (0, _classnames2.default)('sdk-component zoom', this.props.className) },
        _react2.default.createElement(
          _Button2.default,
          { tooltipPosition: this.props.tooltipPosition, buttonType: 'Action', mini: true, tooltip: this.props.zoomInTipLabel ? this.props.zoomInTipLabel : formatMessage(messages.zoomintitle), onTouchTap: this._zoomIn.bind(this) },
          _react2.default.createElement(_zoomIn3.default, null)
        ),
        _react2.default.createElement('br', null),
        _react2.default.createElement(
          _Button2.default,
          { tooltipPosition: this.props.tooltipPosition, buttonType: 'Action', mini: true, style: { marginTop: 15 }, tooltip: this.props.zoomOutTipLabel ? this.props.zoomOutTipLabel : formatMessage(messages.zoomouttitle), onTouchTap: this._zoomOut.bind(this) },
          _react2.default.createElement(_zoomOut3.default, null)
        )
      );
    }
  }]);

  return Zoom;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Animation duration in milliseconds.
   */
  duration: _react2.default.PropTypes.number,
  /**
   * The zoom delta applied on each click.
   */
  delta: _react2.default.PropTypes.number,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * The ol3 map to use for zooming.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Tooltip to show for zoom in button.
   */
  zoomInTipLabel: _react2.default.PropTypes.string,
  /**
   * Tooltip to show for zoom out button.
   */
  zoomOutTipLabel: _react2.default.PropTypes.string,
  /**
   * Position of the tooltip.
   */
  tooltipPosition: _react2.default.PropTypes.oneOf(['bottom', 'bottom-right', 'bottom-left', 'right', 'left', 'top-right', 'top', 'top-left']),
  /**
   * Style config
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.defaultProps = {
  delta: 1,
  duration: 250
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(Zoom);