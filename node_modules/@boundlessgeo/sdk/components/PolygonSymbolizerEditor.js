'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _FillEditor = require('./FillEditor');

var _FillEditor2 = _interopRequireDefault(_FillEditor);

var _StrokeEditor = require('./StrokeEditor');

var _StrokeEditor2 = _interopRequireDefault(_StrokeEditor);

var _Paper = require('material-ui/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Style editor for a polygon symbolizer. Currently limited to fill and stroke. Used by the Rule Editor.
 *
 * ```xml
 * <PolygonSymbolizerEditor onChange={this.props.onChange} initialState={this.props.initialState} />
 * ```
 */
var PolygonSymbolizerEditor = (_temp = _class = function (_React$PureComponent) {
  _inherits(PolygonSymbolizerEditor, _React$PureComponent);

  function PolygonSymbolizerEditor(props) {
    _classCallCheck(this, PolygonSymbolizerEditor);

    return _possibleConstructorReturn(this, (PolygonSymbolizerEditor.__proto__ || Object.getPrototypeOf(PolygonSymbolizerEditor)).call(this, props));
  }

  _createClass(PolygonSymbolizerEditor, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _Paper2.default,
        { style: this.props.style, zDepth: 0, className: (0, _classnames2.default)('sdk-component polygon-symbolizer-editor', this.props.className) },
        _react2.default.createElement(_FillEditor2.default, { initialHasFill: this.props.initialState ? this.props.initialState.hasFill : undefined, onChange: this.props.onChange, initialFillColor: this.props.initialState ? this.props.initialState.fillColor : undefined }),
        _react2.default.createElement(_StrokeEditor2.default, { initialHasStroke: this.props.initialState ? this.props.initialState.hasStroke : undefined, onChange: this.props.onChange, initialStrokeColor: this.props.initialState ? this.props.initialState.strokeColor : undefined, initialStrokeWidth: this.props.initialState ? this.props.initialState.strokeWidth : undefined })
      );
    }
  }]);

  return PolygonSymbolizerEditor;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Callback that is called when a change is made.
   */
  onChange: _react2.default.PropTypes.func.isRequired,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Initial state for the polygon symbolizer.
   */
  initialState: _react2.default.PropTypes.object
}, _temp);
exports.default = PolygonSymbolizerEditor;