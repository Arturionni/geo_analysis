'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactIntl = require('react-intl');

var _LabelEditor = require('./LabelEditor');

var _LabelEditor2 = _interopRequireDefault(_LabelEditor);

var _Paper = require('material-ui/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

var _PolygonSymbolizerEditor = require('./PolygonSymbolizerEditor');

var _PolygonSymbolizerEditor2 = _interopRequireDefault(_PolygonSymbolizerEditor);

var _LineSymbolizerEditor = require('./LineSymbolizerEditor');

var _LineSymbolizerEditor2 = _interopRequireDefault(_LineSymbolizerEditor);

var _PointSymbolizerEditor = require('./PointSymbolizerEditor');

var _PointSymbolizerEditor2 = _interopRequireDefault(_PointSymbolizerEditor);

var _FilterEditor = require('./FilterEditor');

var _FilterEditor2 = _interopRequireDefault(_FilterEditor);

var _delete = require('material-ui/svg-icons/action/delete');

var _delete2 = _interopRequireDefault(_delete);

var _List = require('material-ui/List');

var _colors = require('material-ui/styles/colors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  removetext: {
    'id': 'ruleeditor.removetext',
    'defaultMessage': 'REMOVE'
  },
  titlelabel: {
    'id': 'ruleeditor.titlelabel',
    'defaultMessage': 'Title'
  },
  symbolizertitle: {
    'id': 'ruleeditor.symbolizertitle',
    'defaultMessage': 'Symbolizer'
  },
  labeltitle: {
    'id': 'ruleeditor.labeltitle',
    'defaultMessage': 'Label'
  },
  filtertitle: {
    'id': 'ruleeditor.filtertitle',
    'defaultMessage': 'Filter'
  }
});

/**
 * Editor for a style rule. This means editing symbolizer properties and filter. Used by the Style Modal.
 *
 * ```xml
 * <RuleEditor geometryType={this.state.geometryType} initialState={symbol} onChange={this._onChange.bind(this)} attributes={this.state.attributes} />
 * ```
 */
var RuleEditor = (_temp = _class = function (_React$PureComponent) {
  _inherits(RuleEditor, _React$PureComponent);

  function RuleEditor() {
    _classCallCheck(this, RuleEditor);

    return _possibleConstructorReturn(this, (RuleEditor.__proto__ || Object.getPrototypeOf(RuleEditor)).apply(this, arguments));
  }

  _createClass(RuleEditor, [{
    key: '_getSymbolizer',
    value: function _getSymbolizer() {
      if (this.props.initialState && this.props.initialState.symbolizers && this.props.initialState.symbolizers.length > 0) {
        return this.props.initialState.symbolizers[0];
      }
    }
  }, {
    key: '_getTextSymbolizer',
    value: function _getTextSymbolizer() {
      if (this.props.initialState) {
        for (var i = 0, ii = this.props.initialState.symbolizers.length; i < ii; ++i) {
          var sym = this.props.initialState.symbolizers[i];
          if (sym.labelAttribute) {
            return sym;
          }
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var divStyle = {
        color: 'red'
      };

      var items = [];
      var symbol = this._getSymbolizer();
      if (this.props.geometryType === 'Polygon') {
        items.push(_react2.default.createElement(_PolygonSymbolizerEditor2.default, { key: 'polygon', onChange: this.props.onChange, initialState: symbol }));
      } else if (this.props.geometryType === 'LineString') {
        items.push(_react2.default.createElement(_LineSymbolizerEditor2.default, { key: 'line', onChange: this.props.onChange, initialState: symbol }));
      } else if (this.props.geometryType === 'Point') {
        items.push(_react2.default.createElement(_PointSymbolizerEditor2.default, { key: 'point', onChange: this.props.onChange, initialState: symbol }));
      }
      var textSym = this._getTextSymbolizer();
      items.push(_react2.default.createElement(_LabelEditor2.default, { intl: this.props.intl, key: 'label', attributes: this.props.attributes, onChange: this.props.onChange, initialFontColor: textSym ? textSym.fontColor : undefined, initialFontSize: textSym ? textSym.fontSize : undefined, initialLabelAttribute: textSym ? textSym.labelAttribute : undefined }));
      items.push(_react2.default.createElement(_FilterEditor2.default, { attributes: this.props.attributes, intl: this.props.intl, key: 'filter', onChange: this.props.onChange, initialExpression: this.props.initialState ? this.props.initialState.expression : undefined }));
      items.push(_react2.default.createElement(_List.ListItem, { key: 'delete', style: divStyle, onTouchTap: this.props.onRemove, primaryText: formatMessage(messages.removetext), rightIcon: _react2.default.createElement(_delete2.default, { color: _colors.red500 }) }));
      return _react2.default.createElement(
        _Paper2.default,
        { style: this.props.style, className: (0, _classnames2.default)('sdk-component rule-editor', this.props.className), zDepth: 0 },
        items
      );
    }
  }]);

  return RuleEditor;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * List of attributes.
   */
  attributes: _react2.default.PropTypes.array,
  /**
   * Initial state.
   */
  initialState: _react2.default.PropTypes.object,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Callback that is called when a change is made.
   */
  onChange: _react2.default.PropTypes.func.isRequired,
  /**
   * The geometry type.
   */
  geometryType: _react2.default.PropTypes.oneOf(['Polygon', 'LineString', 'Point']),
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(RuleEditor);