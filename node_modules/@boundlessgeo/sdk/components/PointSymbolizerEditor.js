'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactIntl = require('react-intl');

var _FillEditor = require('./FillEditor');

var _FillEditor2 = _interopRequireDefault(_FillEditor);

var _Subheader = require('material-ui/Subheader');

var _Subheader2 = _interopRequireDefault(_Subheader);

var _StrokeEditor = require('./StrokeEditor');

var _StrokeEditor2 = _interopRequireDefault(_StrokeEditor);

var _Slider = require('material-ui/Slider');

var _Slider2 = _interopRequireDefault(_Slider);

var _SelectField = require('material-ui/SelectField');

var _SelectField2 = _interopRequireDefault(_SelectField);

var _Paper = require('material-ui/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

var _MenuItem = require('material-ui/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _List = require('material-ui/List');

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  header: {
    'id': 'pointsymbolizereditor.header',
    'defaultMessage': 'Symbolizer'
  },
  filllabel: {
    'id': 'pointsymbolizereditor.filllabel',
    'defaultMessage': 'Fill'
  },
  strokelabel: {
    'id': 'pointsymbolizereditor.strokelabel',
    'defaultMessage': 'Stroke'
  },
  opacity: {
    'id': 'pointsymbolizereditor.opacity',
    'defaultMessage': 'Opacity'
  },
  symboltype: {
    'id': 'pointsymbolizereditor.symboltype',
    'defaultMessage': 'Symbol'
  },
  symbolsize: {
    'id': 'pointsymbolizereditor.symbolsize',
    'defaultMessage': 'Size'
  },
  symbolrotation: {
    'id': 'pointsymbolizereditor.symbolrotation',
    'defaultMessage': 'Rotation'
  },
  externalgraphic: {
    'id': 'pointsymbolizereditor.externalgraphic',
    'defaultMessage': 'URL'
  }
});

var symboltypes = ['circle', 'square', 'triangle', 'star', 'cross', 'x'];

/**
 * Style editor for a point symbolizer. Can edit symbol type, stroke and fill. Is used by the Rule Editor.
 *
 * ```xml
 * <PointSymbolizerEditor onChange={this.props.onChange} initialState={this.props.initialState} />
 * ```
 */
var PointSymbolizerEditor = (_temp = _class = function (_React$PureComponent) {
  _inherits(PointSymbolizerEditor, _React$PureComponent);

  function PointSymbolizerEditor(props, context) {
    _classCallCheck(this, PointSymbolizerEditor);

    var _this = _possibleConstructorReturn(this, (PointSymbolizerEditor.__proto__ || Object.getPrototypeOf(PointSymbolizerEditor)).call(this, props));

    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this.state = {
      symbolType: props.initialState && props.initialState.symbolType ? props.initialState.symbolType : 'circle',
      symbolSize: props.initialState && props.initialState.symbolSize ? props.initialState.symbolSize : '4',
      rotation: props.initialState && props.initialState.rotation ? props.initialState.rotation : '0',
      externalGraphic: props.initialState ? props.initialState.externalGraphic : undefined,
      opacity: props.initialState ? props.initialState.opacity : undefined
    };
    return _this;
  }

  _createClass(PointSymbolizerEditor, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.state.externalGraphic) {
        this._getImageSize(this.state.externalGraphic, function (width, height) {
          this.setState({
            imageWidth: width,
            imageHeight: height
          }, this._onChange);
        }, this);
      } else {
        this._onChange();
      }
    }
  }, {
    key: '_onChange',
    value: function _onChange() {
      this.props.onChange(this.state);
    }
  }, {
    key: '_getImageSize',
    value: function _getImageSize(url, callback, scope) {
      var newImg = new Image();
      newImg.onload = function () {
        var height = newImg.height;
        var width = newImg.width;
        callback.call(scope, height, width);
      };
      newImg.onerror = function () {
        callback.call(scope, undefined, undefined);
      };
      newImg.src = url;
    }
  }, {
    key: '_onOpacityChange',
    value: function _onOpacityChange(evt, value) {
      this.setState({
        opacity: value
      }, this._onChange);
    }
  }, {
    key: '_onChangeSymbol',
    value: function _onChangeSymbol(evt, idx, value) {
      this.setState({ symbolType: value }, this._onChange);
    }
  }, {
    key: '_onSymbolSizeBlur',
    value: function _onSymbolSizeBlur(evt) {
      this.setState({ symbolSize: evt.target.value }, this._onChange);
    }
  }, {
    key: '_onSymbolSizeChange',
    value: function _onSymbolSizeChange(evt) {
      this.setState({ symbolSize: evt.target.value });
    }
  }, {
    key: '_onSymbolRotationChange',
    value: function _onSymbolRotationChange(evt) {
      this.setState({ rotation: evt.target.value });
    }
  }, {
    key: '_onSymbolRotationBlur',
    value: function _onSymbolRotationBlur(evt) {
      this.setState({ rotation: evt.target.value }, this._onChange);
    }
  }, {
    key: '_onUrlChange',
    value: function _onUrlChange(evt) {
      this.setState({
        externalGraphic: evt.target.value
      });
    }
  }, {
    key: '_onUrlBlur',
    value: function _onUrlBlur(evt) {
      var url = evt.target.value;
      this._getImageSize(url, function (width, height) {
        this.setState({
          externalGraphic: url,
          imageWidth: width,
          imageHeight: height
        }, this._onChange);
      }, this);
    }
  }, {
    key: 'render',
    value: function render() {
      var listStyle = {
        padding: '0px 16px',
        marginLeft: 0
      };
      var formatMessage = this.props.intl.formatMessage;

      var options = symboltypes.map(function (symbol, idx) {
        return _react2.default.createElement(_MenuItem2.default, { key: idx, value: symbol, primaryText: symbol });
      });
      return _react2.default.createElement(
        _Paper2.default,
        { style: this.props.style, zDepth: 0, className: (0, _classnames2.default)('sdk-component point-symbolizer-editor style-contentContainer', this.props.className) },
        _react2.default.createElement(
          _Subheader2.default,
          { className: 'style-listHeader' },
          formatMessage(messages.header)
        ),
        _react2.default.createElement(
          _List.ListItem,
          { innerDivStyle: listStyle, insetChildren: false },
          _react2.default.createElement(
            _SelectField2.default,
            { fullWidth: true, style: this.state.externalGraphic ? { display: 'none' } : undefined, floatingLabelText: formatMessage(messages.symboltype), value: this.state.symbolType, onChange: this._onChangeSymbol.bind(this) },
            options
          )
        ),
        _react2.default.createElement(
          _List.ListItem,
          { innerDivStyle: listStyle },
          _react2.default.createElement(_TextField2.default, { floatingLabelFixed: true, hintText: 'Number', fullWidth: true, value: this.state.symbolSize, onChange: this._onSymbolSizeChange.bind(this), onBlur: this._onSymbolSizeBlur.bind(this), floatingLabelText: formatMessage(messages.symbolsize) })
        ),
        _react2.default.createElement(
          _List.ListItem,
          { innerDivStyle: listStyle },
          _react2.default.createElement(_TextField2.default, { floatingLabelFixed: true, fullWidth: true, value: this.state.rotation, onChange: this._onSymbolRotationChange.bind(this), onBlur: this._onSymbolRotationBlur.bind(this), floatingLabelText: formatMessage(messages.symbolrotation) })
        ),
        _react2.default.createElement(
          _List.ListItem,
          { innerDivStyle: listStyle },
          _react2.default.createElement(_TextField2.default, { floatingLabelFixed: true, fullWidth: true, defaultValue: this.state.externalGraphic, onChange: this._onUrlChange.bind(this), onBlur: this._onUrlBlur.bind(this), floatingLabelText: formatMessage(messages.externalgraphic) })
        ),
        _react2.default.createElement(
          _List.ListItem,
          { innerDivStyle: listStyle, style: !this.state.externalGraphic ? { display: 'none' } : { width: '100%' }, primaryText: formatMessage(messages.opacity) },
          _react2.default.createElement(_Slider2.default, { defaultValue: this.state.opacity, onChange: this._onOpacityChange.bind(this) })
        ),
        _react2.default.createElement(_FillEditor2.default, { intl: this.props.intl, onChange: this.props.onChange, initialHasFill: this.props.initialState ? this.props.initialState.hasFill : undefined, initialFillColor: this.props.initialState ? this.props.initialState.fillColor : undefined }),
        _react2.default.createElement(_StrokeEditor2.default, { intl: this.props.intl, onChange: this.props.onChange, initialHasStroke: this.props.initialState ? this.props.initialState.hasStroke : undefined, initialStrokeWidth: this.props.initialState ? this.props.initialState.strokeWidth : undefined, initialStrokeColor: this.props.initialState ? this.props.initialState.strokeColor : undefined })
      );
    }
  }]);

  return PointSymbolizerEditor;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Callback that is called when a change is made.
   */
  onChange: _react2.default.PropTypes.func.isRequired,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Initial state for the point symbolizer.
   */
  initialState: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(PointSymbolizerEditor);