'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _AppDispatcher = require('../dispatchers/AppDispatcher');

var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

var _GeocodingConstants = require('../constants/GeocodingConstants');

var _GeocodingConstants2 = _interopRequireDefault(_GeocodingConstants);

var _GeocodingActions = require('../actions/GeocodingActions');

var _GeocodingActions2 = _interopRequireDefault(_GeocodingActions);

var _reactIntl = require('react-intl');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  placeholder: {
    'id': 'geocoding.placeholder',
    'defaultMessage': 'Search placename...'
  }
});

/**
 * Input field to search for placenames using a geocoding service (OSM nominatim).
 *
 * ```xml
 * <Geocoding maxResult={50} />
 * ```
 */
var Geocoding = (_temp = _class = function (_React$PureComponent) {
  _inherits(Geocoding, _React$PureComponent);

  function Geocoding(props) {
    _classCallCheck(this, Geocoding);

    var _this = _possibleConstructorReturn(this, (Geocoding.__proto__ || Object.getPrototypeOf(Geocoding)).call(this, props));

    var me = _this;
    _this.state = {
      value: ''
    };
    _this._dispatchToken = _AppDispatcher2.default.register(function (payload) {
      var action = payload.action;
      switch (action.type) {
        case _GeocodingConstants2.default.ZOOM_TO_RESULT:
          me.setState({ value: '' });
          break;
        default:
          break;
      }
    });
    return _this;
  }

  _createClass(Geocoding, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _AppDispatcher2.default.unregister(this._dispatchToken);
    }
  }, {
    key: '_searchAddress',
    value: function _searchAddress(event) {
      var value = this.refs.query.getValue();
      this.setState({ value: value });
      if (value !== '') {
        var cbname = 'fn' + Date.now();
        var script = document.createElement('script');
        script.src = 'http://nominatim.openstreetmap.org/search?format=json&limit=' + this.props.maxResults + '&q=' + value + '&json_callback=' + cbname;
        global[cbname] = function (jsonData) {
          _GeocodingActions2.default.showSearchResult(jsonData);
          delete global[cbname];
        };
        document.head.appendChild(script);
      } else {
        _GeocodingActions2.default.clearSearchResult();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      return _react2.default.createElement(_TextField2.default, { style: this.props.style, className: (0, _classnames2.default)('sdk-component geocoding', this.props.className), ref: 'query', value: this.state.value, hintText: formatMessage(messages.placeholder), onChange: this._searchAddress.bind(this) });
    }
  }]);

  return Geocoding;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * The maximum number of results to return on a search.
   */
  maxResults: _react2.default.PropTypes.number,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  maxResults: 5
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(Geocoding);