'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _LayerStore = require('../stores/LayerStore');

var _LayerStore2 = _interopRequireDefault(_LayerStore);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _AppDispatcher = require('../dispatchers/AppDispatcher');

var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

var _toolutil = require('../toolutil');

var _toolutil2 = _interopRequireDefault(_toolutil);

var _ToolConstants = require('../constants/ToolConstants');

var _ToolConstants2 = _interopRequireDefault(_ToolConstants);

var _WMSService = require('../services/WMSService');

var _WMSService2 = _interopRequireDefault(_WMSService);

var _WMTSService = require('../services/WMTSService');

var _WMTSService2 = _interopRequireDefault(_WMTSService);

var _ArcGISRestService = require('../services/ArcGISRestService');

var _ArcGISRestService2 = _interopRequireDefault(_ArcGISRestService);

var _Table = require('material-ui/Table');

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _close = require('material-ui/svg-icons/navigation/close');

var _close2 = _interopRequireDefault(_close);

var _reactIntl = require('react-intl');

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

require('./BasePopup.css');

require('./InfoPopup.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  nofeatures: {
    'id': 'infopopup.nofeatures',
    'defaultMessage': 'No features at this location'
  },
  nulltext: {
    'id': 'infopopup.nulltext',
    'defaultMessage': 'NULL'
  },
  nametext: {
    'id': 'infopopup.nametext',
    'defaultMessage': 'Name'
  },
  valuetext: {
    'id': 'infopopup.valuetext',
    'defaultMessage': 'Value'
  }
});

var ALL_ATTRS = '#AllAttributes';

/**
 * $$src/components/InfoPopupDetail.md$$
 *
 */
var InfoPopup = (_temp = _class = function (_React$Component) {
  _inherits(InfoPopup, _React$Component);

  function InfoPopup(props, context) {
    _classCallCheck(this, InfoPopup);

    var _this = _possibleConstructorReturn(this, (InfoPopup.__proto__ || Object.getPrototypeOf(InfoPopup)).call(this, props));

    _this._proxy = context.proxy;
    _this._requestHeaders = context.requestHeaders;
    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this._dispatchToken = _toolutil2.default.register(_this);
    _LayerStore2.default.bindMap(_this.props.map);
    if (_this.props.hover === true) {
      _this.props.map.on('pointermove', _this._onMapClick, _this);
    } else {
      _this.props.map.on('singleclick', _this._onMapClick, _this);
    }
    _this.active = true;
    _this._count = 0;
    _this.state = {
      popupTexts: []
    };
    return _this;
  }

  _createClass(InfoPopup, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.overlayPopup = new _openlayers2.default.Overlay({
        autoPan: !this.props.hover,
        element: _reactDom2.default.findDOMNode(this).parentNode
      });
      this.props.map.addOverlay(this.overlayPopup);
      var me = this;
      this._dispatchToken2 = _AppDispatcher2.default.register(function (payload) {
        var action = payload.action;
        switch (action.type) {
          case _ToolConstants2.default.SHOW_POPUP:
            me.setState({
              popupTexts: me._createSimpleTable({ features: [action.feature], layer: action.layer }),
              contentAsObject: true
            });
            me.setVisible(true);
            me.overlayPopup.setPosition(action.feature.getGeometry().getInteriorPoint().getCoordinates());
            break;
          default:
            break;
        }
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _AppDispatcher2.default.unregister(this._dispatchToken);
      _AppDispatcher2.default.unregister(this._dispatchToken2);
    }
  }, {
    key: 'activate',
    value: function activate(interactions) {
      this.active = true;
      // it is intentional not to call activate on ToolUtil here
    }
  }, {
    key: 'deactivate',
    value: function deactivate() {
      this.active = false;
      // it is intentional not to call deactivate on ToolUtil here
    }
  }, {
    key: '_getLayers',
    value: function _getLayers() {
      var state = _LayerStore2.default.getState();
      var layers = [];
      for (var i = 0, ii = state.flatLayers.length; i < ii; ++i) {
        var layer = state.flatLayers[i];
        if (layer instanceof _openlayers2.default.layer.Tile && layer.getVisible() && (layer.getSource() instanceof _openlayers2.default.source.TileArcGISRest || layer.getSource() instanceof _openlayers2.default.source.TileWMS || layer.getSource() instanceof _openlayers2.default.source.WMTS) && layer.get('popupInfo') && layer.get('popupInfo') !== '') {
          layers.push(layer);
        }
      }
      return layers;
    }
  }, {
    key: '_createSimpleTable',
    value: function _createSimpleTable(response) {
      var features = response.features;
      var layer = response.layer;
      var popupDef = layer.get('popupInfo');
      this._count++;
      var formatMessage = this.props.intl.formatMessage;

      var fid;
      var rows = [];
      for (var i = 0, ii = features.length; i < ii; ++i) {
        var feature = features[i];
        fid = feature.getId();
        var geom = feature instanceof _openlayers2.default.Feature ? feature.getGeometryName() : undefined;
        if (!Array.isArray(popupDef)) {
          popupDef = feature instanceof _openlayers2.default.Feature ? feature.getKeys() : Object.keys(feature.getProperties());
        }
        var style = { wordWrap: 'break-word', whiteSpace: 'normal' };
        popupDef.forEach(function (key) {
          if (key !== geom && key !== 'boundedBy') {
            rows.push(_react2.default.createElement(
              _Table.TableRow,
              { key: key },
              _react2.default.createElement(
                _Table.TableRowColumn,
                { style: style },
                key
              ),
              _react2.default.createElement(
                _Table.TableRowColumn,
                { style: style },
                feature.get(key)
              )
            ));
          }
        });
      }
      return _react2.default.createElement(
        _Table.Table,
        { key: this._count },
        _react2.default.createElement(
          _Table.TableHeader,
          { className: 'popup-table-header', style: { 'backgroundColor': 'white' }, displaySelectAll: false, adjustForCheckbox: false },
          _react2.default.createElement(
            _Table.TableRow,
            { style: { 'backgroundColor': 'white' } },
            _react2.default.createElement(
              _Table.TableHeaderColumn,
              { colSpan: '2', tooltip: fid, style: { overflowWrap: 'break-word', wordWrap: 'break-word', wordBreak: 'break-word', whiteSpace: 'normal', paddingRight: 48, fontSize: 14, color: 'rgba(0, 0, 0, 0.87)', textAlign: 'center' } },
              layer.get('title')
            )
          ),
          _react2.default.createElement(
            _Table.TableRow,
            { style: { 'backgroundColor': 'white' } },
            _react2.default.createElement(
              _Table.TableHeaderColumn,
              { style: { fontWeight: 'bold', color: 'rgba(0, 0, 0, 0.87)' } },
              formatMessage(messages.nametext)
            ),
            _react2.default.createElement(
              _Table.TableHeaderColumn,
              { style: { fontWeight: 'bold', color: 'rgba(0, 0, 0, 0.87)' } },
              formatMessage(messages.valuetext)
            )
          )
        ),
        _react2.default.createElement(
          _Table.TableBody,
          { className: 'popup-table-body', displayRowCheckbox: false },
          _react2.default.createElement(_Table.TableRow, { className: 'popup-table-headerpadding' }),
          rows
        )
      );
    }
  }, {
    key: '_fetchData',
    value: function _fetchData(evt, popupTexts, cb) {
      var map = this.props.map;
      this._cursor = map.getTarget().style.cursor;
      var me = this;
      map.getTarget().style.cursor = 'wait';
      var allLayers = this._getLayers();
      var len = allLayers.length;
      var finishedQueries = 0;
      var finishedQuery = function finishedQuery() {
        finishedQueries++;
        if (len === finishedQueries) {
          map.getTarget().style.cursor = me._cursor;
          cb();
        }
      };
      var onReadyAll = function onReadyAll(response) {
        if (response !== false && response.text) {
          popupTexts.push(response.text);
        }
        finishedQuery();
      };
      var formatMessage = this.props.intl.formatMessage;

      var popupDef;
      this._noFeaturesFound = false;
      var onReady = function onReady(response) {
        var features = response.features;
        if (features.length) {
          var popupContent;
          if (popupDef === ALL_ATTRS) {
            me._contentAsObject = true;
            popupContent = me._createSimpleTable(response);
          } else {
            for (var j = 0, jj = features.length; j < jj; ++j) {
              popupContent = popupDef;
              var feature = features[j];
              var values = feature.getProperties();
              for (var key in values) {
                var value = values[key];
                if (value) {
                  popupContent = popupContent.replace('[' + key + ']', value);
                } else {
                  popupContent = popupContent.replace('[' + key + ']', formatMessage(messages.nulltext));
                }
              }
            }
          }
          popupTexts.push(popupContent);
        } else {
          me._noFeaturesFound = true;
        }
        finishedQuery();
      };
      var called = false;
      for (var i = 0; i < len; i++) {
        var layer = allLayers[i];
        popupDef = layer.get('popupInfo');
        var source = layer.getSource();
        var service;
        if (source instanceof _openlayers2.default.source.TileWMS) {
          service = _WMSService2.default;
        } else if (source instanceof _openlayers2.default.source.TileArcGISRest) {
          service = _ArcGISRestService2.default;
        } else {
          service = _WMTSService2.default;
        }
        if (popupDef === ALL_ATTRS || Array.isArray(popupDef)) {
          called = true;
          var infoFormat = this.props.infoFormat;
          var callback = infoFormat === 'text/plain' || infoFormat === 'text/html' ? onReadyAll : onReady;
          service.getFeatureInfo(layer, evt.coordinate, map, infoFormat, callback, function () {
            map.getTarget().style.cursor = me._cursor;
          }, this._proxy, this._requestHeaders);
        } else if (popupDef.length > 0) {
          called = true;
          service.getFeatureInfo(layer, evt.coordinate, map, 'application/json', onReady, undefined, this._proxy, this.requestHeaders);
        }
      }
      if (called === false) {
        map.getTarget().style.cursor = me._cursor;
        cb();
      }
    }
  }, {
    key: '_onMapClick',
    value: function _onMapClick(evt) {
      if (this.active) {
        var formatMessage = this.props.intl.formatMessage;

        var map = this.props.map;
        var pixel = map.getEventPixel(evt.originalEvent);
        var coord = evt.coordinate;
        var popupTexts = [];
        this._contentAsObject = false;
        var me = this;
        map.forEachFeatureAtPixel(pixel, function (feature, layer) {
          if (feature && layer !== null) {
            var cluster = false;
            if (feature.get('features')) {
              if (feature.get('features').length === 1) {
                feature = feature.get('features')[0];
              } else {
                cluster = true;
              }
            }
            var popupDef = layer.get('popupInfo');
            if (popupDef === ALL_ATTRS || Array.isArray(popupDef)) {
              me._contentAsObject = true;
              popupTexts.push(me._createSimpleTable({ features: [feature], layer: layer }));
            } else if (popupDef && !cluster) {
              var featureKeys = feature.getKeys();
              for (var i = 0, ii = featureKeys.length; i < ii; i++) {
                var value = feature.get(featureKeys[i]);
                if (value) {
                  popupDef = popupDef.replace('[' + featureKeys[i] + ']', feature.get(featureKeys[i]));
                } else {
                  popupDef = popupDef.replace('[' + featureKeys[i] + ']', formatMessage(messages.nulltext));
                }
              }
              popupTexts.push(popupDef);
            }
          }
        });
        this._fetchData(evt, popupTexts, function () {
          if (popupTexts.length || me._noFeaturesFound) {
            me.setState({
              popupTexts: popupTexts,
              contentAsObject: me._contentAsObject
            });
            me.setVisible(true);
            me.overlayPopup.setPosition(coord);
          } else {
            me.setVisible(false);
          }
        });
      }
    }
  }, {
    key: '_updateScroll',
    value: function _updateScroll(evt) {
      var el = evt.target;
      var scrollPosition = el.getBoundingClientRect().top;
      var headers = el.querySelectorAll('.popup-table-header');
      var bodys = el.querySelectorAll('.popup-table-headerpadding');
      for (var i = 1; i < headers.length; i++) {
        var position = bodys[i].getBoundingClientRect().bottom;
        if (position < scrollPosition) {
          headers[i].classList.add('popup-header-fixed');
          bodys[i].classList.add('popup-body-noheader');
        } else {
          headers[i].classList.remove('popup-header-fixed');
          bodys[i].classList.remove('popup-body-noheader');
        }
      }
    }
  }, {
    key: 'setVisible',
    value: function setVisible(visible) {
      _reactDom2.default.findDOMNode(this).parentNode.style.display = visible ? 'block' : 'none';
      var me = this;
      // regular jsx onClick does not work when stopEvent is true
      var closer = _reactDom2.default.findDOMNode(this.refs.popupCloser);
      if (closer.onclick === null) {
        closer.onclick = function () {
          me.setVisible(false);
          return false;
        };
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var contentDiv;
      var formatMessage = this.props.intl.formatMessage;

      if (this.state.popupTexts.length == 0) {
        var nofeatures = formatMessage(messages.nofeatures);
        contentDiv = _react2.default.createElement(
          'div',
          { className: 'popup-content auto', ref: 'content' },
          _react2.default.createElement(
            'div',
            { style: { 'lineHeight': '58px' } },
            nofeatures
          )
        );
      } else if (this.state.contentAsObject) {
        contentDiv = _react2.default.createElement(
          'div',
          { className: 'popup-content', ref: 'content' },
          _react2.default.createElement('div', { className: 'popup-header' }),
          _react2.default.createElement(
            'div',
            { className: 'popup-body', onScroll: this._updateScroll.bind(this) },
            this.state.popupTexts
          )
        );
      } else {
        var content = this.state.popupTexts.join('<hr>');
        contentDiv = _react2.default.createElement('div', { className: 'popup-content auto', ref: 'content', dangerouslySetInnerHTML: { __html: content } });
      }
      return _react2.default.createElement(
        'div',
        { style: this.props.style, className: (0, _classnames2.default)('sdk-component info-popup', this.props.className) },
        _react2.default.createElement(
          _Button2.default,
          { buttonType: 'Icon', style: { zIndex: 1000, float: 'right' }, ref: 'popupCloser', onTouchTap: this.setVisible.bind(this, false) },
          _react2.default.createElement(_close2.default, null)
        ),
        contentDiv
      );
    }
  }]);

  return InfoPopup;
}(_react2.default.Component), _class.propTypes = {
  /**
   * The ol3 map to register for singleClick.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Should we show feature info on hover instead of on click?
   */
  hover: _react2.default.PropTypes.bool,
  /**
   * Identifier to use for this tool. Can be used to group tools together.
   */
  toolId: _react2.default.PropTypes.string,
  /**
   * Format to use for WMS GetFeatureInfo requests.
   */
  infoFormat: _react2.default.PropTypes.string,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  proxy: _react2.default.PropTypes.string,
  requestHeaders: _react2.default.PropTypes.object,
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  hover: false,
  toolId: 'nav',
  infoFormat: 'text/plain'
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(InfoPopup);