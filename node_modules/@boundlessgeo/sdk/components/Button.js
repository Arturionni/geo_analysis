'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RaisedButton = require('material-ui/RaisedButton');

var _RaisedButton2 = _interopRequireDefault(_RaisedButton);

var _FlatButton = require('material-ui/FlatButton');

var _FlatButton2 = _interopRequireDefault(_FlatButton);

var _FloatingActionButton = require('material-ui/FloatingActionButton');

var _FloatingActionButton2 = _interopRequireDefault(_FloatingActionButton);

var _IconButton = require('material-ui/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _FocusRipple = require('material-ui/internal/FocusRipple');

var _FocusRipple2 = _interopRequireDefault(_FocusRipple);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Button with built-in tooltip.
 *
 * ```xml
 * <Button buttonType='Flat' label='Close' tooltip='Close dialog' onTouchTap={this.close.bind(this)} />
 * ```
 */
var Button = (_temp = _class = function (_React$PureComponent) {
  _inherits(Button, _React$PureComponent);

  function Button() {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  _createClass(Button, [{
    key: 'render',
    value: function render() {
      var button;
      if (this.props.buttonType === 'Action') {
        button = _react2.default.createElement(_FloatingActionButton2.default, { iconStyle: this.props.iconStyle, disabled: this.props.disabled, backgroundColor: this.props.backgroundColor, onTouchTap: this.props.onTouchTap, children: this.props.children, mini: this.props.mini });
      } else if (this.props.buttonType === 'Flat') {
        button = _react2.default.createElement(_FlatButton2.default, { disableTouchRipple: true, disabled: this.props.disabled, secondary: this.props.secondary, primary: this.props.primary, onTouchTap: this.props.onTouchTap, icon: this.props.icon, children: this.props.children, label: this.props.label });
      } else if (this.props.buttonType === 'Icon') {
        button = _react2.default.createElement(
          _IconButton2.default,
          { iconClassName: this.props.iconClassName, disableTouchRipple: true, disabled: this.props.disabled, onTouchTap: this.props.onTouchTap },
          _react2.default.createElement(_FocusRipple2.default, { show: this.props.secondary }),
          this.props.children
        );
      } else {
        button = _react2.default.createElement(_RaisedButton2.default, { disableTouchRipple: true, disabled: this.props.disabled, secondary: this.props.secondary, onTouchTap: this.props.onTouchTap, icon: this.props.icon, children: this.props.children, label: this.props.label });
      }
      var className = {
        'sdk-component': true,
        'sdk-button': true,
        'hint--small': this.props.buttonType !== 'Action'
      };
      className['hint--' + this.props.tooltipPosition] = this.props.tooltip !== undefined;
      return _react2.default.createElement(
        'span',
        { style: this.props.style, className: (0, _classnames2.default)(className, this.props.className), 'aria-label': this.props.tooltip },
        button
      );
    }
  }]);

  return Button;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Type of button.
   */
  buttonType: _react2.default.PropTypes.oneOf(['Raised', 'Flat', 'Action', 'Icon']),
  /**
   * Position of the tooltip.
   */
  tooltipPosition: _react2.default.PropTypes.oneOf(['bottom', 'bottom-right', 'bottom-left', 'right', 'left', 'top-right', 'top', 'top-left']),
  /**
   * Should this button be disabled?
   */
  disabled: _react2.default.PropTypes.bool,
  /**
   * Css class name to apply on the span.
   */
  className: _react2.default.PropTypes.string,
  /**
   * The tooltip to show for this button.
   */
  tooltip: _react2.default.PropTypes.string,
  /**
   * Background color.
   */
  backgroundColor: _react2.default.PropTypes.string,
  /**
   * Function to execute when the button is clicked.
   */
  onTouchTap: _react2.default.PropTypes.func,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  children: _react2.default.PropTypes.node,
  /**
   * Should this button be mini? Only applies to certain button types.
   */
  mini: _react2.default.PropTypes.bool,
  /**
   * Optional icon.
   */
  icon: _react2.default.PropTypes.node,
  /**
   * Label to show on the button.
   */
  label: _react2.default.PropTypes.string,
  /**
   * Should we use the primary state?
   */
  primary: _react2.default.PropTypes.bool,
  /**
   * Should we use the secondary state?
   */
  secondary: _react2.default.PropTypes.bool,
  /**
   * Icon style config object.
   */
  iconStyle: _react2.default.PropTypes.object,
  /**
   * Icon class name.
   */
  iconClassName: _react2.default.PropTypes.string
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  buttonType: 'Raised',
  tooltipPosition: 'bottom'
}, _temp);
exports.default = Button;