'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _reactIntl = require('react-intl');

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Snackbar = require('material-ui/Snackbar');

var _Snackbar2 = _interopRequireDefault(_Snackbar);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _myLocation = require('material-ui/svg-icons/maps/my-location');

var _myLocation2 = _interopRequireDefault(_myLocation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  error: {
    'id': 'geolocation.error',
    'defaultMessage': 'Error while retrieving geolocation, details: {details}'
  },
  buttontitle: {
    'id': 'geolocation.buttontitle',
    'defaultMessage': 'Geolocation'
  },
  trackingtitle: {
    'id': 'geolocation.trackingtitle',
    'defaultMessage': 'Tracking'
  }
});

/**
 * Enable geolocation which uses the current position of the user in the map.
 * Can show the current position on the map, and also track the position.
 *
 * ```xml
 * <Geolocation map={map} />
 * ```
 * ![Geolocation button](../Geolocation.png)
 * ![Geolocation tracking mode](../Geolocation_tracking.png)
 * ![Geolocation marker](../Geolocation_marker.png)
 *
 */
var Geolocation = (_temp = _class = function (_React$PureComponent) {
  _inherits(Geolocation, _React$PureComponent);

  function Geolocation(props, context) {
    _classCallCheck(this, Geolocation);

    var _this = _possibleConstructorReturn(this, (Geolocation.__proto__ || Object.getPrototypeOf(Geolocation)).call(this, props));

    _this.state = {
      muiTheme: context.muiTheme || (0, _getMuiTheme2.default)(),
      error: false,
      open: false,
      tracking: false
    };
    return _this;
  }

  _createClass(Geolocation, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this.state.muiTheme };
    }
  }, {
    key: '_geolocate',
    value: function _geolocate() {
      var map = this.props.map;
      var view = map.getView();
      if (this._geolocation) {
        this._geolocation.setTracking(!this._geolocation.getTracking());
        if (this._geolocation.getTracking()) {
          this._hasBeenCentered = false;
        }
        this._featuresOverlay.getSource().clear();
        this._featuresOverlay.setVisible(this._geolocation.getTracking());
      } else {
        this._geolocation = new _openlayers2.default.Geolocation({
          tracking: true,
          projection: view.getProjection()
        });
        var accuracyFeature = new _openlayers2.default.Feature();
        this._geolocation.on('change:accuracyGeometry', function () {
          accuracyFeature.setGeometry(this._geolocation.getAccuracyGeometry());
          this._featuresOverlay.getSource().addFeature(accuracyFeature);
        }, this);
        var positionFeature = new _openlayers2.default.Feature();
        positionFeature.setStyle(new _openlayers2.default.style.Style({
          image: new _openlayers2.default.style.Circle({
            radius: 6,
            fill: new _openlayers2.default.style.Fill({
              color: '#3399CC'
            }),
            stroke: new _openlayers2.default.style.Stroke({
              color: '#fff',
              width: 2
            })
          })
        }));
        this._geolocation.on('error', function (error) {
          this.setState({ error: true, open: true, msg: error.message });
        }, this);
        this._geolocation.on('change:position', function () {
          var coordinates = this._geolocation.getPosition();
          positionFeature.setGeometry(coordinates ? new _openlayers2.default.geom.Point(coordinates) : null);
          this._featuresOverlay.getSource().addFeature(positionFeature);
          if (!this._hasBeenCentered) {
            view.setCenter(coordinates);
            if (this.props.zoom !== undefined) {
              view.setZoom(this.props.zoom);
            }
            this._hasBeenCentered = true;
          }
        }, this);
        this._featuresOverlay = new _openlayers2.default.layer.Vector({
          title: null,
          zIndex: 1000,
          source: new _openlayers2.default.source.Vector({ wrapX: false })
        });
        map.addLayer(this._featuresOverlay);
      }
      this.setState({ tracking: this._geolocation.getTracking() });
    }
  }, {
    key: '_handleRequestClose',
    value: function _handleRequestClose() {
      this.setState({
        open: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      if (this.state.error) {
        return _react2.default.createElement(_Snackbar2.default, {
          open: this.state.open,
          message: formatMessage(messages.error, { details: this.state.msg }),
          autoHideDuration: 2000,
          onRequestClose: this._handleRequestClose.bind(this)
        });
      } else {
        var iconStyle,
            tooltip = formatMessage(messages.buttontitle);
        if (this.state.tracking) {
          iconStyle = {
            fill: this.state.muiTheme.rawTheme.palette.active1Color
          };
          tooltip += ' (' + formatMessage(messages.trackingtitle) + ')';
        }
        return _react2.default.createElement(
          _Button2.default,
          { style: this.props.style, tooltipPosition: this.props.tooltipPosition, iconStyle: iconStyle, buttonType: 'Action', mini: true, secondary: true, className: (0, _classnames2.default)('sdk-component geolocation', this.props.className), tooltip: tooltip, onTouchTap: this._geolocate.bind(this) },
          _react2.default.createElement(_myLocation2.default, null)
        );
      }
    }
  }]);

  return Geolocation;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * The ol3 map for which to change its view's center.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Position of the tooltip.
   */
  tooltipPosition: _react2.default.PropTypes.oneOf(['bottom', 'bottom-right', 'bottom-left', 'right', 'left', 'top-right', 'top', 'top-left']),
  /**
   * The zoom level used when centering the view.
   */
  zoom: _react2.default.PropTypes.number,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(Geolocation);