'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Dialog = require('./Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _reactIntl = require('react-intl');

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  closebutton: {
    'id': 'newrulemodal.closebutton',
    'defaultMessage': 'Close'
  },
  addrulebutton: {
    'id': 'newrulemodal.addrulebutton',
    'defaultMessage': 'ADD'
  },
  dialogtitle: {
    'id': 'newrulemodal.dialogtitle',
    'defaultMessage': 'Add New Rule'
  },
  rulelabel: {
    'id': 'newrulemodal.rulelabel',
    'defaultMessage': 'Rule:'
  }
});

var NewRuleModal = (_temp = _class = function (_React$PureComponent) {
  _inherits(NewRuleModal, _React$PureComponent);

  function NewRuleModal(props) {
    _classCallCheck(this, NewRuleModal);

    var _this = _possibleConstructorReturn(this, (NewRuleModal.__proto__ || Object.getPrototypeOf(NewRuleModal)).call(this, props));

    _this.state = {
      rulename: ''
    };
    return _this;
  }

  _createClass(NewRuleModal, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps() {
      this.setState({
        rulename: ''
      });
    }
  }, {
    key: 'onChange',
    value: function onChange() {
      this.setState({
        rulename: this.refs.name.getValue()
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var actions = [_react2.default.createElement(_Button2.default, { buttonType: 'Flat', primary: true, label: formatMessage(messages.addrulebutton), onTouchTap: this.props.onAdd.bind(this, this.state.rulename) })];
      return _react2.default.createElement(
        _Dialog2.default,
        { style: this.props.style, inline: this.props.inline, actions: actions, autoScrollBodyContent: true, modal: true, title: formatMessage(messages.dialogtitle), open: this.props.open, onRequestClose: this.props.onRequestClose },
        _react2.default.createElement(_TextField2.default, { value: this.state.rulename, onChange: this.onChange.bind(this), fullWidth: true, ref: 'name', floatingLabelText: formatMessage(messages.rulelabel) })
      );
    }
  }]);

  return NewRuleModal;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Callback function when new rule gets added, gets rule name as argument.
   */
  onAdd: _react2.default.PropTypes.func.isRequired,
  /**
   * Callback function to close dialog.
   */
  onRequestClose: _react2.default.PropTypes.func.isRequired,
  /**
   * Should we show inline or as a modal dialog?
   */
  inline: _react2.default.PropTypes.bool,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(NewRuleModal);