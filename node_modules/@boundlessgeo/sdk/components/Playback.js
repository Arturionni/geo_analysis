'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ToolActions = require('../actions/ToolActions');

var _ToolActions2 = _interopRequireDefault(_ToolActions);

var _TimeService = require('../services/TimeService');

var _TimeService2 = _interopRequireDefault(_TimeService);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _Slider = require('material-ui/Slider');

var _Slider2 = _interopRequireDefault(_Slider);

var _DatePicker = require('material-ui/DatePicker');

var _DatePicker2 = _interopRequireDefault(_DatePicker);

var _LayerStore = require('../stores/LayerStore');

var _LayerStore2 = _interopRequireDefault(_LayerStore);

var _reactIntl = require('react-intl');

require('./Playback.css');

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  defaulttitle: {
    'id': 'playback.defaulttitle',
    'defaultMessage': 'Playback'
  }
});

/**
 * Adds a slider to the map that can be used to select a given date, and modifies the visibility of layers and features depending on their timestamp and the current time.
 *
 * ```xml
 * <Playback map={map} minDate={324511200000} maxDate={1385938800000} />
 * ```
 */
var Playback = (_temp = _class = function (_React$PureComponent) {
  _inherits(Playback, _React$PureComponent);

  function Playback(props, context) {
    _classCallCheck(this, Playback);

    var _this = _possibleConstructorReturn(this, (Playback.__proto__ || Object.getPrototypeOf(Playback)).call(this, props));

    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _LayerStore2.default.bindMap(_this.props.map);
    var interval;
    if (_this.props.maxDate !== undefined && _this.props.minDate !== undefined) {
      interval = (_this.props.maxDate - _this.props.minDate) / _this.props.numIntervals;
    }
    _this.state = {
      play: true,
      minDate: _this.props.minDate,
      date: _this.props.minDate,
      maxDate: _this.props.maxDate,
      interval: interval
    };
    _this._layers = [];
    // TODO
    _this._loading = 0;
    _this._loaded = 0;
    return _this;
  }

  _createClass(Playback, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._onChangeCb = this._onChange.bind(this);
      _LayerStore2.default.addChangeListener(this._onChangeCb);
      this._onChange();
      if (this.props.autoPlay === true) {
        this._playPause();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _LayerStore2.default.removeChangeListener(this._onChangeCb);
    }
  }, {
    key: '_onChange',
    value: function _onChange() {
      var state = _LayerStore2.default.getState();
      for (var i = 0, ii = state.flatLayers.length; i < ii; ++i) {
        var lyr = state.flatLayers[i];
        if (lyr.get('timeInfo') && this._layers.indexOf(lyr) === -1) {
          this._registerTime(lyr);
          this._layers.push(lyr);
        }
      }
    }
  }, {
    key: '_onSubmit',
    value: function _onSubmit(evt) {
      evt.preventDefault();
    }
  }, {
    key: '_play',
    value: function _play() {
      if (this._loading === this._loaded) {
        var newTime, dateStep;
        if (this.state.dates) {
          dateStep = this.state.dateStep + 1;
          if (dateStep > this.state.dates.length - 1) {
            dateStep = 0;
          }
          newTime = this.state.dates[dateStep];
        } else {
          newTime = this.state.date + this.state.interval;
          if (newTime > this.state.maxDate) {
            newTime = this.state.minDate;
          }
        }
        this.setState({ date: newTime, dateStep: dateStep });
      }
    }
  }, {
    key: '_playPause',
    value: function _playPause() {
      var play = !this.state.play;
      if (!play) {
        _ToolActions2.default.startPlayback();
      } else {
        _ToolActions2.default.stopPlayback();
      }
      this.setState({ play: play });
      if (play) {
        global.clearInterval(this._timer);
      } else {
        this._timer = global.setInterval(this._play.bind(this), this.props.interval);
      }
    }
  }, {
    key: '_registerTime',
    value: function _registerTime(lyr) {
      var timeInfo;
      if (lyr instanceof _openlayers2.default.layer.Vector) {
        var style = lyr.getStyle();
        timeInfo = lyr.get('timeInfo');
        var me = this;
        lyr.setStyle(function (feature, resolution) {
          var start = timeInfo.start === parseInt(timeInfo.start, 10) ? timeInfo.start : Date.parse(feature.get(timeInfo.start));
          if (isNaN(start) || start > me.state.date) {
            return null;
          }
          var end = timeInfo.end === parseInt(timeInfo.end, 10) ? timeInfo.end : Date.parse(feature.get(timeInfo.end));
          if (isNaN(end) || end < me.state.date) {
            return null;
          }
          if (style instanceof _openlayers2.default.style.Style || Array.isArray(style)) {
            return style;
          } else {
            return style.call(this, feature, resolution);
          }
        });
      } else if (lyr instanceof _openlayers2.default.layer.Tile || lyr instanceof _openlayers2.default.layer.Image) {
        var source = lyr.getSource();
        timeInfo = _TimeService2.default.parse(lyr.get('timeInfo'));
        if (Array.isArray(timeInfo)) {
          this.setState({
            dates: timeInfo,
            dateStep: 0,
            date: timeInfo[0]
          });
        } else {
          this.setState({
            minDate: timeInfo.start,
            maxDate: timeInfo.end,
            date: timeInfo.start,
            interval: timeInfo.duration
          });
        }
        if (lyr instanceof _openlayers2.default.layer.Tile) {
          source.on('tileloadstart', this._addLoading, this);
          source.on('tileloadend', this._addLoaded, this);
          source.on('tileloaderror', this._addLoaded, this);
        } else if (lyr instanceof _openlayers2.default.layer.Image) {
          source.on('imageloadstart', this._addLoading, this);
          source.on('imageloadend', this._addLoaded, this);
          source.on('imageloaderror', this._addLoaded, this);
        }
      }
    }
  }, {
    key: '_addLoading',
    value: function _addLoading() {
      this._loading++;
    }
  }, {
    key: '_addLoaded',
    value: function _addLoaded() {
      this._loaded++;
    }
  }, {
    key: '_handleTimeLayer',
    value: function _handleTimeLayer(lyr) {
      if (lyr instanceof _openlayers2.default.layer.Vector) {
        lyr.getSource().changed();
      } else {
        lyr.getSource().updateParams({ 'TIME': new Date(this.state.date).toISOString() });
      }
    }
  }, {
    key: '_refreshTimeLayers',
    value: function _refreshTimeLayers() {
      for (var i = 0, ii = this._layers.length; i < ii; ++i) {
        this._handleTimeLayer(this._layers[i]);
      }
    }
  }, {
    key: '_onRangeChange',
    value: function _onRangeChange(evt, value) {
      this.setState({ date: value });
    }
  }, {
    key: '_onRangeChangeValues',
    value: function _onRangeChangeValues(evt, value) {
      this.setState({
        dateStep: value,
        date: this.state.dates[value]
      });
    }
  }, {
    key: '_onDateChange',
    value: function _onDateChange(evt, value) {
      this.setState({ date: value.getTime() });
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var buttonIcon;
      if (this.state.play === true) {
        buttonIcon = 'fa fa-play';
      } else {
        buttonIcon = 'fa fa-pause';
      }
      var playButton;
      var slider;
      var datePicker;
      var title = this.props.title ? this.props.title : formatMessage(messages.defaulttitle);
      if (this.state.date !== undefined) {
        playButton = _react2.default.createElement(_Button2.default, { buttonType: 'Icon', key: 'play', style: { 'float': 'left' }, onTouchTap: this._playPause.bind(this), iconClassName: buttonIcon });
        this._refreshTimeLayers();
        if (this.state.dates) {
          slider = _react2.default.createElement(_Slider2.default, { step: 1, key: 'slider', style: { width: 150, 'float': 'left', marginTop: 8 }, min: 0, max: this.state.dates.length - 1, value: this.state.dateStep, onChange: this._onRangeChangeValues.bind(this) });
          datePicker = _react2.default.createElement(_DatePicker2.default, { name: 'date', key: 'date', disabled: true, autoOk: true, style: { width: 200, paddingLeft: 15, overflow: 'hidden' }, value: new Date(this.state.date) });
        } else if (this.state.minDate !== undefined && this.state.maxDate !== undefined) {
          var minDate = new Date(this.state.minDate);
          var maxDate = new Date(this.state.maxDate);
          slider = _react2.default.createElement(_Slider2.default, { sliderStyle: { marginTop: 20, marginRight: 10, marginBottom: 20, marginLeft: 10, width: 140 }, step: this.state.interval, key: 'slider', min: this.state.minDate, max: this.state.maxDate, value: this.state.date, onChange: this._onRangeChange.bind(this) });
          datePicker = _react2.default.createElement(_DatePicker2.default, {
            DateTimeFormat: _reactIntl.formatDate,
            name: 'date',
            key: 'date',
            autoOk: true,
            minDate: minDate,
            maxDate: maxDate,
            style: { width: 140, overflow: 'hidden' },
            onChange: this._onDateChange.bind(this),
            value: new Date(this.state.date) });
        }
      }

      return _react2.default.createElement(
        'div',
        { style: this.props.style, className: (0, _classnames2.default)('sdk-component sdk-playback', this.props.className) },
        _react2.default.createElement(
          'div',
          { className: 'playback-col-a' },
          _react2.default.createElement(
            'h3',
            null,
            title
          ),
          _react2.default.createElement(
            'div',
            { className: 'date' },
            _react2.default.createElement(
              'div',
              null,
              _react2.default.createElement('i', { className: 'fa fa-calendar' })
            ),
            _react2.default.createElement(
              'div',
              null,
              datePicker
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'playback-col-b' },
          _react2.default.createElement(
            'div',
            { className: 'slider' },
            slider
          ),
          _react2.default.createElement(
            'div',
            { className: 'playButton' },
            playButton
          )
        )
      );
    }
  }]);

  return Playback;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * The map whose time-enabled layers should be filtered. Time-enabled layers are layers that have a timeInfo property.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * The minimum date to use for the slider field and the date picker.
   */
  minDate: _react2.default.PropTypes.number,
  /**
   * The maximum date to use for the slider field and the date picker.
   */
  maxDate: _react2.default.PropTypes.number,
  /**
   * The time, in milliseconds, to wait in each position of the slider. Positions are defined by dividing the slider range by the number of intervals defined in the numIntervals parameter.
   */
  interval: _react2.default.PropTypes.number,
  /**
   * The number of intervals into which the full range of the slider is divided.
   */
  numIntervals: _react2.default.PropTypes.number,
  /**
   * Should the playback tool start playing automatically?
   */
  autoPlay: _react2.default.PropTypes.bool,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Title of the playback
   */
  title: _react2.default.PropTypes.string,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  interval: 500,
  numIntervals: 100,
  autoPlay: false
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(Playback);