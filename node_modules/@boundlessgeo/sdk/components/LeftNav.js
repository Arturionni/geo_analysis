'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Drawer = require('material-ui/Drawer');

var _Drawer2 = _interopRequireDefault(_Drawer);

var _Menu = require('material-ui/Menu');

var _Menu2 = _interopRequireDefault(_Menu);

var _MenuItem = require('material-ui/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _Tabs = require('material-ui/Tabs');

var _AppBar = require('material-ui/AppBar');

var _AppBar2 = _interopRequireDefault(_AppBar);

var _Popover = require('material-ui/Popover');

var _Popover2 = _interopRequireDefault(_Popover);

var _arrowDropDown = require('material-ui/svg-icons/navigation/arrow-drop-down');

var _arrowDropDown2 = _interopRequireDefault(_arrowDropDown);

var _arrowBack = require('material-ui/svg-icons/navigation/arrow-back');

var _arrowBack2 = _interopRequireDefault(_arrowBack);

var _IconButton = require('material-ui/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Drawer to use for left nav, drawer uses dropdown list to control tabs
 *
 * ```xml
 * const tablist = [   <Tab key={1} value={1} label='Legend'><Legend map={map} /></Tab>,
 *                      <Tab key={2} value={2} label='FeatureTabe'><FeatureTable ref='table' map={map} /></Tab>,
 *                      <Tab key={3} value={3} label='WFST'><WFST ref='edit' toggleGroup='navigation' showEditForm={true} map={map} />]</Tab>
 *                  ];
 * <LeftNav tabList={tablist}  />
 * ```
 */
var LeftNav = (_temp = _class = function (_React$PureComponent) {
  _inherits(LeftNav, _React$PureComponent);

  function LeftNav(props, context) {
    _classCallCheck(this, LeftNav);

    var _this = _possibleConstructorReturn(this, (LeftNav.__proto__ || Object.getPrototypeOf(LeftNav)).call(this));

    _this.state = {
      menuOpen: false
    };

    _this.handleMenuTouchTap = function (event) {
      // This prevents ghost click.
      event.preventDefault();
      _this.setState({
        menuOpen: true,
        anchorEl: event.currentTarget
      });
    };

    _this.handleMenuRequestClose = function () {
      _this.setState({
        menuOpen: false
      });
    };

    _this.handleMenuChange = function (event, value) {
      _this.setState({
        selectedIndex: value.props.value,
        menuOpen: false,
        menuText: value.props.primaryText,
        appBarIcon: _this.rightIcon[value.props.value].icon,
        appBarOnTouch: _this.rightIcon[value.props.value].onTouchTap
      });
    };

    _this.getIconFromTab = function (tabComponent) {
      if (tabComponent.type.name === 'Tab') {
        var tabChild = tabComponent.props.children;
        if (tabChild.props) {
          //Tab Child has props
          if (tabChild.props.icon) {
            //Tab children contains Icon{
            return tabChild.props.icon;
          } else if (tabChild.type === 'div') {
            //Tab children components are often wrapped in a parent Div
            var divChild = tabChild.props.children;
            if (divChild.props.icon) {
              //Div children contains Icon
              return divChild.props.icon;
            }
          }
        }
      }
      return _react2.default.createElement('span', null);
    };

    _this.close = function (event, value) {
      _this.props.onRequestClose();
    };

    _this.rightIcon = {};
    return _this;
  }

  _createClass(LeftNav, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.tabList && this.props.tabList.length > 0) {
        this.setState({
          menuText: this.props.tabList[0].props.label,
          selectedIndex: this.props.tabList[0].props.value,
          appBarIcon: this.getIconFromTab(this.props.tabList[0]),
          appBarOnTouch: this.props.tabList[0].props.onActive
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var iconStyles = {
        color: '#fff'
      };
      var tabs;
      var noDisplayStyle = {
        display: 'none'
      };
      var menuItems = [];
      var icons = {};
      if (this.props.tabList) {
        tabs = _react2.default.createElement(
          _Tabs.Tabs,
          { style: { height: 'calc(100% - 64px)' }, tabTemplateStyle: { height: '100%' }, contentContainerStyle: { height: '100%' }, tabItemContainerStyle: noDisplayStyle, inkBarStyle: noDisplayStyle, value: this.state.selectedIndex },
          this.props.tabList
        );
        this.props.tabList.forEach(function (tab) {
          if (tab.props.onActive) {
            icons[tab.props.value] = { icon: _this2.getIconFromTab(tab), onTouchTap: tab.props.onActive };
          } else {
            icons[tab.props.value] = { icon: _react2.default.createElement('span', null), onTouchTap: null };
          }
          menuItems.push(_react2.default.createElement(_MenuItem2.default, { primaryText: tab.props.label, value: tab.props.value }));
        });
      }
      this.rightIcon = icons;
      return _react2.default.createElement(
        _Drawer2.default,
        { style: this.props.style, width: this.props.width, open: this.props.open },
        _react2.default.createElement(_AppBar2.default, { title: _react2.default.createElement(
            'span',
            null,
            _react2.default.createElement(
              'span',
              { onTouchTap: this.handleMenuTouchTap },
              ' ',
              this.state.menuText,
              ' ',
              _react2.default.createElement(_arrowDropDown2.default, { style: iconStyles })
            ),
            _react2.default.createElement(
              _Popover2.default,
              {
                open: this.state.menuOpen,
                anchorEl: this.state.anchorEl,
                anchorOrigin: { horizontal: 'left', vertical: 'bottom' },
                targetOrigin: { horizontal: 'left', vertical: 'top' },
                onRequestClose: this.handleMenuRequestClose },
              _react2.default.createElement(_Menu2.default, { onItemTouchTap: this.handleMenuChange, children: menuItems })
            )
          ),
          iconElementLeft: _react2.default.createElement(
            _IconButton2.default,
            null,
            ' ',
            _react2.default.createElement(_arrowBack2.default, null),
            ' '
          ),
          onLeftIconButtonTouchTap: this.close.bind(this),

          iconElementRight: this.state.appBarIcon,
          onRightIconButtonTouchTap: this.state.appBarOnTouch,
          className: 'left-drawer-titleBar' }),
        tabs,
        this.props.children
      );
    }
  }]);

  return LeftNav;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Override width of left nav
   */
  width: _react2.default.PropTypes.number,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Contents of the Drawer
   */
  children: _react2.default.PropTypes.node,
  /**
   * array of <tab> components to be added to <Tabs>
   */
  tabList: _react2.default.PropTypes.node,
  /**
   * If true drawer is opened
   */
  open: _react2.default.PropTypes.bool,
  /**
   *  Callback for closing the drawer
   */
  onRequestClose: _react2.default.PropTypes.func.isRequired

}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  open: true,
  menuOpen: false,
  width: 360
}, _temp);
exports.default = LeftNav;