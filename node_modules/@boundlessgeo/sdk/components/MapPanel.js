'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _LayerStore = require('../stores/LayerStore');

var _LayerStore2 = _interopRequireDefault(_LayerStore);

var _Snackbar = require('material-ui/Snackbar');

var _Snackbar2 = _interopRequireDefault(_Snackbar);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

require('./MapPanel.css');

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  errormsg: {
    'id': 'layerlist.errormsg',
    'defaultMessage': 'There was an error loading tiles.'
  }
});

/**
 * A div that can render the OpenLayers map object. It will also take care of notifying the user of load errors.
 * It can also provide integration with the browser's back and forward button for extent history navigation.
 *
 * ```xml
 * <MapPanel id='map' map={map} />
 * ```
 */
var MapPanel = (_temp = _class = function (_React$Component) {
  _inherits(MapPanel, _React$Component);

  function MapPanel(props, context) {
    _classCallCheck(this, MapPanel);

    var _this = _possibleConstructorReturn(this, (MapPanel.__proto__ || Object.getPrototypeOf(MapPanel)).call(this, props));

    _this.state = {
      error: false,
      open: false
    };
    _this._proxy = context.proxy;
    _this._requestHeaders = context.requestHeaders;
    _LayerStore2.default.bindMap(_this.props.map, _this._proxy, _this._requestHeaders);
    return _this;
  }

  _createClass(MapPanel, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._onErrorCb = this._onError.bind(this);
      _LayerStore2.default.addErrorListener(this._onErrorCb);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var map = this.props.map;
      map.setTarget(_reactDom2.default.findDOMNode(this.refs.map));
      if (this.props.useHistory) {
        this._initViewFromHash();
        this._shouldUpdate = true;
        map.on('moveend', this._updatePermalink, this);
        // restore the view state when navigating through the history, see
        // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
        this._onPopState = this._onPopState.bind(this);
        global.addEventListener('popstate', this._onPopState);
      } else if (this.props.extent) {
        map.getView().fit(this.props.extent, this.props.map.getSize(), { constrainResolution: false });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _LayerStore2.default.removeErrorListener(this._onErrorCb);
      if (this.props.useHistory) {
        global.removeEventListener('popstate', this._onPopState);
      }
    }
  }, {
    key: '_onPopState',
    value: function _onPopState(event) {
      if (event.state === null) {
        return;
      }
      var view = this.props.map.getView();
      view.setCenter(event.state.center);
      view.setResolution(event.state.resolution);
      view.setRotation(event.state.rotation);
      this._shouldUpdate = false;
    }
  }, {
    key: '_updatePermalink',
    value: function _updatePermalink() {
      if (!this._shouldUpdate) {
        // do not update the URL when the view was changed in the 'popstate' handler
        this._shouldUpdate = true;
        return;
      }
      var view = this.props.map.getView();
      var center = view.getCenter();
      var hash = '#map=' + view.getResolution() + '/' + Math.round(center[0] * 100) / 100 + '/' + Math.round(center[1] * 100) / 100 + '/' + view.getRotation();
      var state = {
        resolution: view.getResolution(),
        center: view.getCenter(),
        rotation: view.getRotation()
      };
      global.history.pushState(state, 'map', hash);
    }
  }, {
    key: '_initViewFromHash',
    value: function _initViewFromHash() {
      var view = this.props.map.getView();
      if (global.location.hash !== '') {
        var hash = global.location.hash.replace('#map=', '');
        var parts = hash.split('/');
        if (parts.length === 4) {
          var resolution = parseFloat(parts[0]);
          var center = [parseFloat(parts[1]), parseFloat(parts[2])];
          var rotation = parseFloat(parts[3]);
          view.setResolution(resolution);
          view.setCenter(center);
          view.setRotation(rotation);
        }
      } else if (this.props.extent) {
        view.fit(this.props.extent, this.props.map.getSize(), { constrainResolution: false });
      }
    }
  }, {
    key: '_onError',
    value: function _onError() {
      if (this._proxy) {
        // ignore the first error
        if (this.error === true) {
          this.setState({ open: true, error: true });
        }
      } else {
        this.setState({ open: true, error: true });
      }
      this._error = true;
    }
  }, {
    key: '_handleRequestClose',
    value: function _handleRequestClose() {
      this.setState({
        open: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var error;
      if (this.state.error === true) {
        error = _react2.default.createElement(_Snackbar2.default, {
          open: this.state.open,
          message: formatMessage(messages.errormsg),
          autoHideDuration: 2000,
          onRequestClose: this._handleRequestClose.bind(this)
        });
      }
      return _react2.default.createElement(
        'div',
        { style: this.props.style, id: this.props.id, ref: 'map', className: (0, _classnames2.default)('sdk-component map-panel', this.props.className) },
        error,
        this.props.children
      );
    }
  }]);

  return MapPanel;
}(_react2.default.Component), _class.propTypes = {
  /**
   * The map to use for this map panel.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Identifier of the map div.
   */
  id: _react2.default.PropTypes.string,
  /**
   * Css class name to apply on the map div.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Extent to fit on the map initially.
   */
  extent: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.number),
  /**
   * Use the back and forward buttons of the browser for navigation history.
   */
  useHistory: _react2.default.PropTypes.bool,
  /**
   * Style config
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  children: _react2.default.PropTypes.node,
  /**
  * @ignore
  */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  proxy: _react2.default.PropTypes.string,
  requestHeaders: _react2.default.PropTypes.object
}, _class.defaultProps = {
  useHistory: true
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(MapPanel);