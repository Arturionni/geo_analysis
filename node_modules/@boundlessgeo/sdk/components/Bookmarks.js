'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _IconMenu = require('material-ui/IconMenu');

var _IconMenu2 = _interopRequireDefault(_IconMenu);

var _MenuItem = require('material-ui/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _keyboardArrowLeft = require('material-ui/svg-icons/hardware/keyboard-arrow-left');

var _keyboardArrowLeft2 = _interopRequireDefault(_keyboardArrowLeft);

var _keyboardArrowRight = require('material-ui/svg-icons/hardware/keyboard-arrow-right');

var _keyboardArrowRight2 = _interopRequireDefault(_keyboardArrowRight);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _nukaCarousel = require('nuka-carousel');

var _nukaCarousel2 = _interopRequireDefault(_nukaCarousel);

var _BookmarkDots = require('./BookmarkDots.js');

var _BookmarkDots2 = _interopRequireDefault(_BookmarkDots);

require('./Bookmarks.css');

var _reactIntl = require('react-intl');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  dropdowntext: {
    'id': 'bookmarks.dropdowntext',
    'defaultMessage': 'Bookmarks'
  }
});

/**
 * Adds the ability to retrieve spatial bookmarks.
 * A spatial bookmark consists of a name, an extent and a description. Extent needs to be in the view projection.
 *
 * ```xml
 * <Bookmarks introTitle='Paris bakeries' introDescription='Explore the best bakeries of the capital of France' map={map} bookmarks={[{name: 'foo1', description: 'description1', extent: [259562, 6254560, 260675, 6256252]}, {name: 'foo2', description: 'description2', extent: [258703, 6248811, 259816, 6250503]}]} />
 * ```
 */
var Bookmarks = (_temp = _class = function (_React$PureComponent) {
  _inherits(Bookmarks, _React$PureComponent);

  function Bookmarks(props) {
    var _class2, _temp2, _class3, _temp3;

    _classCallCheck(this, Bookmarks);

    var _this = _possibleConstructorReturn(this, (Bookmarks.__proto__ || Object.getPrototypeOf(Bookmarks)).call(this, props));

    _this._decorator = [{
      component: (_temp2 = _class2 = function (_React$Component) {
        _inherits(navPrev, _React$Component);

        function navPrev() {
          _classCallCheck(this, navPrev);

          return _possibleConstructorReturn(this, (navPrev.__proto__ || Object.getPrototypeOf(navPrev)).apply(this, arguments));
        }

        _createClass(navPrev, [{
          key: 'render',
          value: function render() {
            function getNavStyles() {
              return { margin: '40px 0 0 0' };
            }
            return _react2.default.createElement(
              'div',
              { style: getNavStyles(), onClick: this.props.previousSlide, className: 'navPrev' },
              _react2.default.createElement(_keyboardArrowLeft2.default, null)
            );
          }
        }]);

        return navPrev;
      }(_react2.default.Component), _class2.propTypes = {
        previousSlide: _react2.default.PropTypes.func.isRequired
      }, _temp2),
      position: 'CenterLeft'
    }, {
      component: (_temp3 = _class3 = function (_React$Component2) {
        _inherits(navNext, _React$Component2);

        function navNext() {
          _classCallCheck(this, navNext);

          return _possibleConstructorReturn(this, (navNext.__proto__ || Object.getPrototypeOf(navNext)).apply(this, arguments));
        }

        _createClass(navNext, [{
          key: 'render',
          value: function render() {
            function getNavStyles() {
              return { margin: '40px 0 0 0' };
            }
            return _react2.default.createElement(
              'div',
              { style: getNavStyles(), onClick: this.props.nextSlide, className: 'navNext' },
              _react2.default.createElement(_keyboardArrowRight2.default, null)
            );
          }
        }]);

        return navNext;
      }(_react2.default.Component), _class3.propTypes = {
        nextSlide: _react2.default.PropTypes.func.isRequired
      }, _temp3),
      position: 'CenterRight'
    }];

    var view = _this.props.map.getView();
    _this._center = view.getCenter();
    _this._resolution = view.getResolution();
    if (_this._center === null) {
      view.once('change:center', function (evt) {
        this._center = evt.target.getCenter();
      }, _this);
    }
    if (_this._resolution === undefined) {
      view.once('change:resolution', function (evt) {
        this._resolution = evt.target.getResolution();
      }, _this);
    }
    _this.state = {
      value: null
    };
    return _this;
  }

  _createClass(Bookmarks, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.showMarker) {
        this._layer = new _openlayers2.default.layer.Vector({
          title: null,
          managed: false,
          style: new _openlayers2.default.style.Style({
            image: new _openlayers2.default.style.Icon({
              anchor: [0.5, 46],
              anchorXUnits: 'fraction',
              anchorYUnits: 'pixels',
              opacity: 0.75,
              src: this.props.markerUrl
            })
          }),
          source: new _openlayers2.default.source.Vector({ wrapX: false })
        });
        this.props.map.addLayer(this._layer);
      }
    }
  }, {
    key: '_handleChange',
    value: function _handleChange(evt, value) {
      var bookmark;
      for (var i = 0, ii = this.props.bookmarks.length; i < ii; ++i) {
        if (this.props.bookmarks[i].name === value) {
          bookmark = this.props.bookmarks[i];
          break;
        }
      }
      this.setState({ value: value });
      this._selectBookmark(bookmark);
    }
  }, {
    key: '_selectBookmark',
    value: function _selectBookmark(bookmark) {
      var map = this.props.map;
      var view = map.getView();
      var center, animateOptions;
      if (bookmark) {
        if (this.props.animatePanZoom) {
          animateOptions = {
            duration: this.props.animationDuration
          };
        }
        var extent = bookmark.extent;
        view.fit(extent, animateOptions);
        center = _openlayers2.default.extent.getCenter(extent);
      } else {
        if (this.props.animatePanZoom) {
          view.animate({
            center: this._center,
            resolution: this._resolution,
            duration: this.props.animationDuration
          });
        } else {
          view.setCenter(this._center);
          view.setResolution(this._resolution);
        }
        center = this._center;
      }
      if (this.props.showMarker) {
        var source = this._layer.getSource();
        source.clear();
        if (bookmark) {
          var feature = new _openlayers2.default.Feature({ geometry: new _openlayers2.default.geom.Point(center) });
          source.addFeature(feature);
        }
      }
    }
  }, {
    key: '_afterChange',
    value: function _afterChange(idx) {
      var bookmark = idx === 0 ? false : this.props.bookmarks[idx - 1];
      this._selectBookmark(bookmark);
    }
  }, {
    key: 'render',
    value: function render() {
      var carouselProps = Object.assign({}, this.props);

      carouselProps.autoplayInterval = this.props.autoplaySpeed;

      var formatMessage = this.props.intl.formatMessage;

      var Decorators = this._decorator;

      if (this.props.menu === true) {
        var menuChildren = this.props.bookmarks.map(function (bookmark) {
          return _react2.default.createElement(_MenuItem2.default, {
            key: bookmark.name,
            value: bookmark.name,
            primaryText: bookmark.name });
        }, this);
        return _react2.default.createElement(
          _IconMenu2.default,
          {
            anchorOrigin: { horizontal: 'left', vertical: 'top' },
            targetOrigin: { horizontal: 'left', vertical: 'top' },
            className: (0, _classnames2.default)('sdk-component story-panel-menu', this.props.className),
            iconButtonElement: _react2.default.createElement(_Button2.default, { buttonType: 'Icon', iconClassName: 'headerIcons fa fa-bookmark', tooltip: formatMessage(messages.dropdowntext) }),
            value: this.state.value,
            onChange: this._handleChange.bind(this) },
          menuChildren
        );
      } else {
        var getHTML = function getHTML(bookmark) {
          return { __html: bookmark.description };
        };
        var carouselChildren = this.props.bookmarks.map(function (bookmark) {
          return _react2.default.createElement(
            'div',
            { key: bookmark.name },
            _react2.default.createElement(
              'h2',
              null,
              ' ',
              bookmark.name,
              ' '
            ),
            _react2.default.createElement('div', { dangerouslySetInnerHTML: getHTML(bookmark), className: 'slider-box' })
          );
        });
        carouselChildren.unshift(_react2.default.createElement(
          'div',
          { key: 'intro' },
          _react2.default.createElement(
            'h2',
            null,
            ' ',
            this.props.introTitle,
            ' '
          ),
          _react2.default.createElement(
            'p',
            null,
            ' ',
            this.props.introDescription,
            ' '
          )
        ));
        if (this.props.dots) {
          Decorators.push({ component: _BookmarkDots2.default, position: 'BottomCenter' });
        }
        return _react2.default.createElement(
          'div',
          { style: this.props.style, className: (0, _classnames2.default)('sdk-component story-panel', this.props.className) },
          _react2.default.createElement(
            _nukaCarousel2.default,
            _extends({}, carouselProps, {
              decorators: Decorators,
              arrows: true,
              afterSlide: this._afterChange.bind(this),
              framePadding: '0px 20px 38px 20px' }),
            carouselChildren
          )
        );
      }
    }
  }]);

  return Bookmarks;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * The ol3 map instance on whose view we should navigate.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Css class name to apply on the menu or the div.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * The bookmark data. An array of objects with name (string, required), description (string, required) and extent (array of number, required) keys.
   * The extent should be in the view projection.
   */
  bookmarks: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
    name: _react2.default.PropTypes.string.isRequired,
    description: _react2.default.PropTypes.string.isRequired,
    extent: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.number).isRequired
  })).isRequired,

  /**
   * Should the scroller auto scroll?
   */
  autoplay: _react2.default.PropTypes.bool,
  /**
   * Delay between each auto scoll in ms.
   */
  autoplaySpeed: _react2.default.PropTypes.number,
  /**
   * Should we animate the pan and zoom operation?
   */
  animatePanZoom: _react2.default.PropTypes.bool,
  /**
   * The duration of the animation in milleseconds. Only relevant if animatePanZoom is true.
   */
  animationDuration: _react2.default.PropTypes.number,
  /**
   * Should we show indicators? These are dots to navigate the bookmark pages.
   */
  dots: _react2.default.PropTypes.bool,
  /**
   * The title on the introduction (first) page of the bookmarks.
   */
  introTitle: _react2.default.PropTypes.string,
  /**
   * The description of the introduction (first) page of the bookmarks.
   */
  introDescription: _react2.default.PropTypes.string,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired,
  /**
   * Display as a menu drop down list.
   */
  menu: _react2.default.PropTypes.bool,
  /**
   * Animation duration.
   */
  speed: _react2.default.PropTypes.number,
  /**
   *   Should we display a marker for the bookmark? Animation duration.
   */
  showMarker: _react2.default.PropTypes.bool,
  /**
   * Url to the marker image to use for bookmark position.
   */
  markerUrl: _react2.default.PropTypes.string,
  /**
   * Used to hardcode the slider width. Accepts any string dimension value such as "80%" or "500px".
   */
  width: _react2.default.PropTypes.string,
  /**
   * Sets infinite wrapAround mode. Defaults to true
   */
  wrapAround: _react2.default.PropTypes.bool
}, _class.defaultProps = {
  autoplay: false,
  autoplayInterval: 3000,
  animatePanZoom: true,
  dots: true,
  introTitle: '',
  introDescription: '',
  animationDuration: 500,
  menu: false,
  showMarker: true,
  markerUrl: './resources/marker.png',
  wrapAround: true,
  width: '400px'
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(Bookmarks);