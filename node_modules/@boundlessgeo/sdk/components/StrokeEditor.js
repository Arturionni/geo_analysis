'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Paper = require('material-ui/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

var _ColorPicker = require('./ColorPicker');

var _ColorPicker2 = _interopRequireDefault(_ColorPicker);

var _List = require('material-ui/List');

var _Checkbox = require('material-ui/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactIntl = require('react-intl');

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  strokewidthlabel: {
    'id': 'strokeeditor.strokewidthlabel',
    'defaultMessage': 'Stroke width'
  },
  strokelabel: {
    'id': 'strokeeditor.strokelabel',
    'defaultMessage': 'Stroke'
  }
});

/**
 * Style editor for stroke properties (color and width).
 *
 * ```xml
 * <StrokeEditor onChange={this.props.onChange} initialStrokeColor={this.props.initialState.strokeColor} initialStrokeWidth={5} />
 * ```
 */
var StrokeEditor = (_temp = _class = function (_React$PureComponent) {
  _inherits(StrokeEditor, _React$PureComponent);

  function StrokeEditor(props) {
    _classCallCheck(this, StrokeEditor);

    var _this = _possibleConstructorReturn(this, (StrokeEditor.__proto__ || Object.getPrototypeOf(StrokeEditor)).call(this, props));

    _this.state = {
      strokeColor: _this.props.initialStrokeColor,
      strokeWidth: _this.props.initialStrokeWidth,
      hasStroke: _this.props.initialHasStroke
    };
    return _this;
  }

  _createClass(StrokeEditor, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.props.onChange(this.state);
    }
  }, {
    key: '_onChangeStrokeWidth',
    value: function _onChangeStrokeWidth(evt) {
      this.setState({ strokeWidth: parseFloat(evt.target.value) }, function () {
        this.props.onChange(this.state);
      });
    }
  }, {
    key: '_onChangeStroke',
    value: function _onChangeStroke(color) {
      this.setState({ strokeColor: color }, function () {
        this.props.onChange(this.state);
      });
    }
  }, {
    key: '_onStrokeCheck',
    value: function _onStrokeCheck(evt) {
      this.setState({ hasStroke: evt.target.checked }, function () {
        this.props.onChange(this.state);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var listStyle = {
        padding: '0px 16px',
        marginLeft: 0
      };
      var boxStyle = {
        marginLeft: 0
      };
      return _react2.default.createElement(
        _Paper2.default,
        { style: this.props.style, zDepth: 0, className: (0, _classnames2.default)('sdk-component stroke-editor', this.props.className) },
        _react2.default.createElement(_List.ListItem, { disabled: this.props.disabled, innerDivStyle: boxStyle, primaryText: _react2.default.createElement(_Checkbox2.default, { onCheck: this._onStrokeCheck.bind(this), checked: this.state.hasStroke, label: formatMessage(messages.strokelabel) }), rightIconButton: _react2.default.createElement(_ColorPicker2.default, { onChange: this._onChangeStroke.bind(this), initialColor: this.state.strokeColor }) }),
        _react2.default.createElement(
          _List.ListItem,
          { disabled: this.props.disabled, innerDivStyle: listStyle },
          _react2.default.createElement(_TextField2.default, { defaultValue: this.state.strokeWidth, onChange: this._onChangeStrokeWidth.bind(this), hintText: formatMessage(messages.strokewidthlabel), floatingLabelText: formatMessage(messages.strokewidthlabel), floatingLabelFixed: true, fullWidth: true })
        )
      );
    }
  }]);

  return StrokeEditor;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Callback that is called when a change is made.
   */
  onChange: _react2.default.PropTypes.func.isRequired,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /*
   * If true, the element will not be clickable and will not display hover effects.
   */
  disabled: _react2.default.PropTypes.bool,
  /**
   * Initial value for hasStroke.
   */
  initialHasStroke: _react2.default.PropTypes.bool,
  /**
   * Initial stroke color.
   */
  initialStrokeColor: _react2.default.PropTypes.object,
  /**
   * Initial stroke width.
   */
  initialStrokeWidth: _react2.default.PropTypes.number,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  disabled: false,
  initialStrokeColor: {
    rgb: {
      r: 0,
      g: 0,
      b: 0,
      a: 1
    },
    hex: '#000000'
  },
  initialHasStroke: true,
  initialStrokeWidth: 1
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(StrokeEditor);