'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _LayerStore = require('../stores/LayerStore');

var _LayerStore2 = _interopRequireDefault(_LayerStore);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _List = require('material-ui/List');

var _WMSLegend = require('./WMSLegend');

var _WMSLegend2 = _interopRequireDefault(_WMSLegend);

var _Paper = require('material-ui/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

var _ArcGISRestLegend = require('./ArcGISRestLegend');

var _ArcGISRestLegend2 = _interopRequireDefault(_ArcGISRestLegend);

var _Label = require('./Label');

var _Label2 = _interopRequireDefault(_Label);

var _reactIntl = require('react-intl');

require('./Legend.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  header: {
    'id': 'legend.header',
    'defaultMessage': 'Legend'
  },
  emptyheader: {
    'id': 'legend.emptyheader',
    'defaultMessage': 'No legend available'
  }
});

/**
 * Legend component that can show legend graphic for WMS layers only currently.
 *
 * ```xml
 * <Legend map={map} />
 * ```
 *
 * ![Legend](../Legend.png)
 */
var Legend = (_temp = _class = function (_React$PureComponent) {
  _inherits(Legend, _React$PureComponent);

  function Legend(props) {
    _classCallCheck(this, Legend);

    var _this = _possibleConstructorReturn(this, (Legend.__proto__ || Object.getPrototypeOf(Legend)).call(this, props));

    _this.state = {
      flatLayers: []
    };
    _LayerStore2.default.bindMap(_this.props.map);
    return _this;
  }

  _createClass(Legend, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._onChangeCb = this._onChange.bind(this);
      _LayerStore2.default.addChangeListener(this._onChangeCb);
      this._onChange();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _LayerStore2.default.removeChangeListener(this._onChangeCb);
    }
  }, {
    key: '_onChange',
    value: function _onChange() {
      // TODO apply nesting to this component's structure
      var flatLayers = _LayerStore2.default.getState().flatLayers.slice().reverse();
      this.setState({ flatLayers: flatLayers });
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var legends = [];
      for (var i = 0, ii = this.state.flatLayers.length; i < ii; ++i) {
        var layer = this.state.flatLayers[i];
        if (layer.getVisible()) {
          if (layer instanceof _openlayers2.default.layer.Tile && layer.getSource() instanceof _openlayers2.default.source.TileWMS || layer instanceof _openlayers2.default.layer.Image && layer.getSource() instanceof _openlayers2.default.source.ImageWMS || layer instanceof _openlayers2.default.layer.Tile && layer.getSource() instanceof _openlayers2.default.source.TileArcGISRest) {
            var primaryText = layer.get('emptyTitle') ? _react2.default.createElement(
              'div',
              { className: 'layer-title-empty' },
              layer.get('title')
            ) : layer.get('title');
            if (layer.getSource() instanceof _openlayers2.default.source.TileWMS || layer.getSource() instanceof _openlayers2.default.source.ImageWMS) {
              legends.push(_react2.default.createElement(
                _List.ListItem,
                { key: 'legend-' + layer.get('id'), disableTouchRipple: true },
                _react2.default.createElement(
                  'div',
                  null,
                  primaryText
                ),
                _react2.default.createElement(_WMSLegend2.default, _extends({ className: 'legend-list-img' }, this.props.wmsOptions, { layer: layer }))
              ));
            } else if (layer.getSource() instanceof _openlayers2.default.source.TileArcGISRest) {
              legends.push(_react2.default.createElement(
                _List.ListItem,
                { key: 'legend-' + layer.get('id'), disableTouchRipple: true },
                _react2.default.createElement(
                  'div',
                  null,
                  primaryText
                ),
                _react2.default.createElement(_ArcGISRestLegend2.default, { className: 'legend-list-img', layer: layer })
              ));
            }
          }
        }
      }
      var subHeader = legends.length === 0 ? _react2.default.createElement(
        _Paper2.default,
        { zDepth: 0, className: 'legend-header' },
        _react2.default.createElement(
          _Label2.default,
          null,
          formatMessage(messages.emptyheader)
        )
      ) : undefined;
      return _react2.default.createElement(
        _Paper2.default,
        { style: this.props.style, zDepth: 0, className: (0, _classnames2.default)('sdk-component legend', this.props.className) },
        subHeader,
        _react2.default.createElement(
          _List.List,
          { className: 'legend-list' },
          legends
        )
      );
    }
  }]);

  return Legend;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Options to send to the WMS legend. See WMSLegend component.
   */
  wmsOptions: _react2.default.PropTypes.object,
  /**
   * The map whose layers should show up in this legend component.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(Legend);