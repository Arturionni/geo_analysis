'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Paper = require('material-ui/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ColorPicker = require('./ColorPicker');

var _ColorPicker2 = _interopRequireDefault(_ColorPicker);

var _List = require('material-ui/List');

var _Checkbox = require('material-ui/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  filllabel: {
    'id': 'filleditor.filllabel',
    'defaultMessage': 'Fill'
  }
});

/**
 * Style editor for fill color.
 *
 * ```xml
 * <FillEditor onChange={this._onChange.bind(this)} initialFillColor={{rgb: {r: 0, g: 255, b: 0, a: 0.5}, hex: '#00FF00'}}/>
 * ```
 */
var FillEditor = (_temp = _class = function (_React$PureComponent) {
  _inherits(FillEditor, _React$PureComponent);

  function FillEditor(props) {
    _classCallCheck(this, FillEditor);

    var _this = _possibleConstructorReturn(this, (FillEditor.__proto__ || Object.getPrototypeOf(FillEditor)).call(this, props));

    _this.state = {
      fillColor: _this.props.initialFillColor,
      hasFill: _this.props.initialHasFill
    };
    return _this;
  }

  _createClass(FillEditor, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.props.onChange(this.state);
    }
  }, {
    key: '_onChangeFill',
    value: function _onChangeFill(color) {
      this.setState({ fillColor: color });
      this.props.onChange(this.state);
    }
  }, {
    key: '_onFillCheck',
    value: function _onFillCheck(evt) {
      this.setState({ hasFill: evt.target.checked }, function () {
        this.props.onChange(this.state);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var boxStyle = {
        marginLeft: 0
      };
      var formatMessage = this.props.intl.formatMessage;

      return _react2.default.createElement(
        _Paper2.default,
        { style: this.props.style, zDepth: 0, className: (0, _classnames2.default)('sdk-component fill-editor', this.props.className) },
        _react2.default.createElement(_List.ListItem, { disabled: this.props.disabled, innerDivStyle: boxStyle, primaryText: _react2.default.createElement(_Checkbox2.default, { onCheck: this._onFillCheck.bind(this), checked: this.state.hasFill, label: formatMessage(messages.filllabel) }), rightIconButton: _react2.default.createElement(_ColorPicker2.default, { onChange: this._onChangeFill.bind(this), initialColor: this.state.fillColor }) })
      );
    }
  }]);

  return FillEditor;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Callback that is called when a change is made.
   */
  onChange: _react2.default.PropTypes.func.isRequired,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /*
   * If true, the element will not be clickable and will not display hover effects.
   */
  disabled: _react2.default.PropTypes.bool,
  /**
   * Initial fill color.
   */
  initialFillColor: _react2.default.PropTypes.object,
  /**
   * Initial value for hasFill.
   */
  initialHasFill: _react2.default.PropTypes.bool,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.defaultProps = {
  disabled: false,
  initialFillColor: {
    rgb: {
      r: 255,
      g: 0,
      b: 0,
      a: 0.5
    },
    hex: '#FF0000'
  },
  initialHasFill: true
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(FillEditor);