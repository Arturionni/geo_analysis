'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _Dialog = require('material-ui/Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _BaseMapConfigService = require('../services/BaseMapConfigService');

var _BaseMapConfigService2 = _interopRequireDefault(_BaseMapConfigService);

var _reactIntl = require('react-intl');

var _GridList = require('material-ui/GridList');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  title: {
    'id': 'basemapmodal.title',
    'defaultMessage': 'Select a basemap'
  },
  closebutton: {
    'id': 'basemapmodal.closebutton',
    'defaultMessage': 'Close'
  }
});
/**
 * A modal of basemap thumbnails for selecting a basemap to be used in the map.  This will force the map to a single basemap
 *
 * ```xml
 * <BaseMapModal tileServices={baseMapTileServices} map={map}  />;
 * ```
 */
var BaseMapModal = (_temp = _class = function (_React$Component) {
  _inherits(BaseMapModal, _React$Component);

  function BaseMapModal(props, context) {
    _classCallCheck(this, BaseMapModal);

    var _this = _possibleConstructorReturn(this, (BaseMapModal.__proto__ || Object.getPrototypeOf(BaseMapModal)).call(this, props));

    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this.state = {
      open: false
    };
    return _this;
  }

  _createClass(BaseMapModal, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: 'close',
    value: function close() {
      this.setState({ open: false });
    }
  }, {
    key: 'open',
    value: function open() {
      this.setState({ open: true });
    }
  }, {
    key: '_tileClick',
    value: function _tileClick(tileService) {
      var foundGroup = false;
      var map = this.props.map;
      var olLayer = _BaseMapConfigService2.default.createLayer(tileService);
      map.getLayers().forEach(function (lyr) {
        if (foundGroup === false && lyr.get('type') === 'base-group') {
          foundGroup = true;
          lyr.getLayers().forEach(function (child) {
            child.setVisible(false);
          });
          lyr.getLayers().push(olLayer);
        }
      });
      if (foundGroup === false) {
        // look for a layer with type base and replace that
        map.getLayers().forEach(function (lyr) {
          if (lyr.get('type') === 'base') {
            map.removeLayer(lyr);
          }
        });
        map.getLayers().insertAt(0, olLayer);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var formatMessage = this.props.intl.formatMessage;

      var actions = [_react2.default.createElement(_Button2.default, { buttonType: 'Flat', label: formatMessage(messages.closebutton), onTouchTap: this.close.bind(this) })];
      return _react2.default.createElement(
        _Dialog2.default,
        { style: this.props.style, autoScrollBodyContent: true, actions: actions, title: formatMessage(messages.title), modal: true, open: this.state.open, onRequestClose: this.close.bind(this) },
        _react2.default.createElement(
          _GridList.GridList,
          { cols: 2, cellHeight: 120 },
          this.props.tileServices.map(function (tileService) {
            return _react2.default.createElement(
              _GridList.GridTile,
              { style: { cursor: 'pointer' }, onTouchTap: _this2._tileClick.bind(_this2, tileService),
                key: tileService.name,
                title: tileService.description },
              _react2.default.createElement('img', { src: tileService.thumbnail })
            );
          })
        )
      );
    }
  }]);

  return BaseMapModal;
}(_react2.default.Component), _class.propTypes = {
  /**
   * The OpenLayers Map.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Tile services to display as options in this dialog.  There is a built in default tileService if none provided
   */
  tileServices: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
    name: _react2.default.PropTypes.string.isRequired,
    description: _react2.default.PropTypes.string.isRequired,
    endpoint: _react2.default.PropTypes.string,
    standard: _react2.default.PropTypes.string.isRequired,
    attribution: _react2.default.PropTypes.string,
    thumbnail: _react2.default.PropTypes.string.isRequired
  })),
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  tileServices: [{
    name: 'osm',
    description: 'OSM Streets',
    standard: 'OSM',
    thumbnail: 'https://a.tile.openstreetmap.org/0/0/0.png'
  }, {
    name: 'light_all',
    description: 'CartoDB light',
    endpoint: 'http://s.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',
    standard: 'XYZ',
    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="http://cartodb.com/attributions">CartoDB</a>',
    thumbnail: 'http://s.basemaps.cartocdn.com/light_all/0/0/0.png'
  }, {
    name: 'dark_all',
    description: 'CartoDB dark',
    endpoint: 'http://s.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',
    standard: 'XYZ',
    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="http://cartodb.com/attributions">CartoDB</a>',
    thumbnail: 'http://s.basemaps.cartocdn.com/dark_all/0/0/0.png'
  }, {
    name: 'World_Imagery',
    description: 'ESRI world imagery',
    endpoint: 'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
    standard: 'XYZ',
    attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',
    thumbnail: 'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/0/0/0'
  }]
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(BaseMapModal, { withRef: true });