'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _AppDispatcher = require('../dispatchers/AppDispatcher');

var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

var _WFSService = require('../services/WFSService');

var _WFSService2 = _interopRequireDefault(_WFSService);

var _debounce = require('debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _reactTable = require('react-table');

var _reactTable2 = _interopRequireDefault(_reactTable);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _ToolActions = require('../actions/ToolActions');

var _ToolActions2 = _interopRequireDefault(_ToolActions);

var _create = require('material-ui/svg-icons/content/create');

var _create2 = _interopRequireDefault(_create);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _Toggle = require('material-ui/Toggle');

var _Toggle2 = _interopRequireDefault(_Toggle);

var _Checkbox = require('material-ui/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _delete = require('material-ui/svg-icons/action/delete');

var _delete2 = _interopRequireDefault(_delete);

var _FeatureStore = require('../stores/FeatureStore');

var _FeatureStore2 = _interopRequireDefault(_FeatureStore);

var _SelectActions = require('../actions/SelectActions');

var _SelectActions2 = _interopRequireDefault(_SelectActions);

var _LayerSelector = require('./LayerSelector');

var _LayerSelector2 = _interopRequireDefault(_LayerSelector);

var _Toolbar = require('material-ui/Toolbar');

var _reactIntl = require('react-intl');

var _Snackbar = require('material-ui/Snackbar');

var _Snackbar2 = _interopRequireDefault(_Snackbar);

var _FilterService = require('../services/FilterService');

var _FilterService2 = _interopRequireDefault(_FilterService);

var _Paper = require('material-ui/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

var _IconMenu = require('material-ui/IconMenu');

var _IconMenu2 = _interopRequireDefault(_IconMenu);

var _MenuItem = require('material-ui/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _toolutil = require('../toolutil');

var _toolutil2 = _interopRequireDefault(_toolutil);

var _FilterHelp = require('./FilterHelp');

var _FilterHelp2 = _interopRequireDefault(_FilterHelp);

var _LayerStore = require('../stores/LayerStore');

var _LayerStore2 = _interopRequireDefault(_LayerStore);

require('./react-table.css');

require('./FeatureTable.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  optionslabel: {
    'id': 'featuretable.optionslabel',
    'defaultMessage': 'Options'
  },
  errormsg: {
    'id': 'featuretable.errormsg',
    'defaultMessage': 'There was an error filtering your features. ({msg})'
  },
  loaderrormsg: {
    'id': 'featuretable.loaderrormsg',
    'defaultMessage': 'There was an error loading your features. ({msg})'
  },
  layerlabel: {
    'id': 'featuretable.layerlabel',
    'defaultMessage': 'Layer'
  },
  zoombuttontitle: {
    'id': 'featuretable.zoombuttontitle',
    'defaultMessage': 'Zoom to selected'
  },
  zoombuttontext: {
    'id': 'featuretable.zoombuttontext',
    'defaultMessage': 'Zoom'
  },
  clearbuttontitle: {
    'id': 'featuretable.clearbuttontitle',
    'defaultMessage': 'Clear selected'
  },
  clearbuttontext: {
    'id': 'featuretable.clearbuttontext',
    'defaultMessage': 'Clear'
  },
  onlyselected: {
    'id': 'featuretable.onlyselected',
    'defaultMessage': 'Only show selected'
  },
  filterplaceholder: {
    'id': 'featuretable.filterplaceholder',
    'defaultMessage': 'Type filter expression'
  },
  filterhelptext: {
    'id': 'featuretable.filterhelptext',
    'defaultMessage': 'ATTRIBUTE == "Value"'
  },
  filterlabel: {
    'id': 'featuretable.filterlabel',
    'defaultMessage': 'Filter'
  },
  filterbuttontext: {
    'id': 'featuretable.filterbuttontext',
    'defaultMessage': 'Filter results based on your criteria'
  },
  deletemsg: {
    'id': 'featuretable.deletemsg',
    'defaultMessage': 'There was an issue deleting the feature.'
  }
});

/**
 * A table to show features. Allows for selection of features.
 *
 * ```javascript
 * var selectedLayer = map.getLayers().item(2);
 * ```
 *
 * ```xml
 * <FeatureTable ref='table' layer={selectedLayer} map={map} />
 * ```
 *
 * ![Feature Table](../FeatureTable.png)
 */
var FeatureTable = (_temp = _class = function (_React$Component) {
  _inherits(FeatureTable, _React$Component);

  function FeatureTable(props, context) {
    _classCallCheck(this, FeatureTable);

    var _this = _possibleConstructorReturn(this, (FeatureTable.__proto__ || Object.getPrototypeOf(FeatureTable)).call(this, props));

    _LayerStore2.default.bindMap(_this.props.map);
    _this._dispatchToken = _toolutil2.default.register(_this);
    _this._proxy = context.proxy;
    _this._requestHeaders = context.proxy;
    _this._onChange = (0, _debounce2.default)(_this._onChange, 100).bind(_this);
    _FeatureStore2.default.bindMap(_this.props.map, _this._proxy);
    _this._selectedOnly = false;
    _this._pagesLoaded = {};
    _this.state = {
      layers: [],
      pages: -1,
      errorOpen: false,
      error: false,
      muiTheme: context.muiTheme || (0, _getMuiTheme2.default)(),
      features: null,
      selected: null,
      help: false
    };
    return _this;
  }

  _createClass(FeatureTable, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._onChangeLayersCb = this._onChangeLayers.bind(this);
      _LayerStore2.default.addChangeListener(this._onChangeLayersCb);
      _FeatureStore2.default.addChangeListener(this._onChange);
      this._onChange();
      this._onChangeLayers();
      this.setDimensionsOnState = (0, _debounce2.default)(this.setDimensionsOnState, this.props.refreshRate).bind(this);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._element = _reactDom2.default.findDOMNode(this).parentNode;
      this._formNode = _reactDom2.default.findDOMNode(this.refs.form);
      this._attachResizeEvent();
      if (this.props.layer) {
        this._setLayer(this.props.layer);
        if (this.props.onUpdate) {
          this.props.onUpdate();
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _AppDispatcher2.default.unregister(this._dispatchToken);
      _FeatureStore2.default.removeChangeListener(this._onChange);
      _LayerStore2.default.removeChangeListener(this._onChangeLayersCb);
      global.removeEventListener('resize', this.setDimensionsOnState);
    }
  }, {
    key: 'activate',
    value: function activate(interactions) {
      _toolutil2.default.activate(this, interactions);
    }
  }, {
    key: 'deactivate',
    value: function deactivate() {
      _toolutil2.default.deactivate(this);
    }
  }, {
    key: '_attachResizeEvent',
    value: function _attachResizeEvent() {
      global.addEventListener('resize', this.setDimensionsOnState);
    }
  }, {
    key: 'setDimensionsOnState',
    value: function setDimensionsOnState() {
      // force a re-render
      this.setState({});
    }
  }, {
    key: '_setLayer',
    value: function _setLayer(layer) {
      this._layer = layer;
      if (layer !== null) {
        _FeatureStore2.default.addLayer(layer, this._selectedOnly, this._proxy, this._requestHeaders);
        if (!this._layer.get('numberOfFeatures')) {
          this._layer.once('change:numberOfFeatures', function () {
            this.setState({
              pages: Math.ceil(this._layer.get('numberOfFeatures') / this._pageSize)
            });
          }, this);
        }
      }
    }
  }, {
    key: '_onLayerSelectChange',
    value: function _onLayerSelectChange(layer) {
      // TODO add clearing filter back
      //ReactDOM.findDOMNode(this.refs.filter).value = '';
      this._setLayer(layer);
    }
  }, {
    key: '_onChangeLayers',
    value: function _onChangeLayers() {
      var flatLayers = _LayerStore2.default.getState().flatLayers;
      var layers = [];
      for (var i = 0, ii = flatLayers.length; i < ii; ++i) {
        var lyr = flatLayers[i];
        if (lyr.getVisible() && lyr.get('title') !== null && (lyr instanceof _openlayers2.default.layer.Vector || lyr.get('wfsInfo') !== undefined)) {
          if (!this._layer) {
            this._layer = lyr;
          }
          layers.push(lyr);
        }
      }
      this.setState({ layers: layers });
    }
  }, {
    key: '_onChange',
    value: function _onChange() {
      if (this._layer) {
        var state = _FeatureStore2.default.getState(this._layer);
        if (!state) {
          delete this._layer;
          return;
        }
        this.setState(state);
      }
    }
  }, {
    key: '_filter',
    value: function _filter(evt, isInputChecked) {
      this._selectedOnly = isInputChecked;
      this._updateStoreFilter();
    }
  }, {
    key: '_updateStoreFilter',
    value: function _updateStoreFilter() {
      var lyr = this._layer;
      if (this._selectedOnly === true) {
        _FeatureStore2.default.setSelectedAsFilter(lyr);
      } else {
        if (!this._filtered) {
          _FeatureStore2.default.restoreOriginalFeatures(lyr);
        } else {
          _FeatureStore2.default.setFilter(lyr, this._filteredRows);
        }
      }
    }
  }, {
    key: '_clearSelected',
    value: function _clearSelected() {
      if (this.state.selected.length > 0) {
        var lyr = this._layer;
        _SelectActions2.default.clear(lyr, this._selectedOnly);
      }
    }
  }, {
    key: '_zoomSelected',
    value: function _zoomSelected() {
      var selected = this.state.selected;
      var len = selected.length;
      if (len > 0) {
        var extent = _openlayers2.default.extent.createEmpty();
        for (var i = 0; i < len; ++i) {
          extent = _openlayers2.default.extent.extend(extent, selected[i].getGeometry().getExtent());
        }
        var map = this.props.map;
        if (extent[0] === extent[2]) {
          map.getView().setCenter([extent[0], extent[1]]);
          map.getView().setZoom(this.props.pointZoom);
        } else {
          map.getView().fit(extent, map.getSize());
        }
      }
    }
  }, {
    key: '_filterByText',
    value: function _filterByText(evt) {
      var formatMessage = this.props.intl.formatMessage;

      var filterBy = evt.target.value;
      var state = _FeatureStore2.default.getState(this._layer);
      var rows = this._selectedOnly ? state.selected : state.features.getFeatures();
      var selected = this._selectedOnly ? [] : state.selected;
      var filteredSelected = [];
      var filteredRows = [];
      var queryFilter;
      if (filterBy !== '') {
        try {
          queryFilter = _FilterService2.default.filter(filterBy.replace(/'/g, '"'));
        } catch (e) {
          this.setState({
            errorOpen: true,
            error: true,
            msg: formatMessage(messages.errormsg, { msg: e.message })
          });
          queryFilter = null;
        }
        if (queryFilter !== null) {
          this.setState({
            errorOpen: false,
            error: false
          });
          var i, ii, properties, row;
          for (i = 0, ii = selected.length; i < ii; ++i) {
            row = selected[i];
            properties = row.getProperties();
            if (queryFilter(properties)) {
              filteredSelected.push(row);
            }
          }
          for (i = 0, ii = rows.length; i < ii; ++i) {
            row = rows[i];
            if (row) {
              properties = row.getProperties();
              if (queryFilter(properties)) {
                filteredRows.push(row);
              }
            }
          }
        }
      } else {
        filteredRows = rows;
      }
      this._filtered = rows.length !== filteredRows.length;
      this._filteredRows = filteredRows;
      _FeatureStore2.default.setFilter(this._layer, filteredRows);
      if (filteredSelected.length !== selected.length) {
        // we need to filter the selection as well
        _FeatureStore2.default.setSelection(this._layer, filteredSelected, true);
      }
    }
  }, {
    key: '_handleRequestClose',
    value: function _handleRequestClose() {
      this.setState({
        errorOpen: false
      });
    }
  }, {
    key: '_onSelect',
    value: function _onSelect(props) {
      _SelectActions2.default.toggleFeature(this._layer, props.row);
    }
  }, {
    key: '_onTableChange',
    value: function _onTableChange(state, instance) {
      if (!this._layer) {
        return;
      }
      var formatMessage = this.props.intl.formatMessage;

      this.setState({ loading: true });
      var start = state.page * state.pageSize;
      var clear = false;
      var sortingInfo = state.sorting.length > 0 ? state.sorting[0] : {};
      if (sortingInfo.id !== this._id || sortingInfo.asc !== this._asc) {
        clear = true;
      }
      if (state.sorting.length > 0) {
        this._asc = state.sorting[0].asc;
        this._id = state.sorting[0].id;
      } else {
        delete this._asc;
        delete this._id;
      }
      _FeatureStore2.default.loadFeatures(this._layer, start, state.pageSize, state.sorting, function () {
        this.setState({
          page: state.page,
          pageSize: state.pageSize,
          pages: this._layer.get('numberOfFeatures') ? Math.ceil(this._layer.get('numberOfFeatures') / state.pageSize) : undefined,
          loading: false
        });
      }, function (xmlhttp, msg) {
        this.setState({
          error: true,
          errorOpen: true,
          msg: formatMessage(messages.loaderrormsg, { msg: msg || xmlhttp.status + ' ' + xmlhttp.statusText }),
          loading: false
        });
      }, this, this._proxy, this._requestHeaders, clear);
    }
  }, {
    key: '_redraw',
    value: function _redraw() {
      this._layer.getSource().updateParams({ '_olSalt': Math.random() });
    }
  }, {
    key: '_onEditFeature',
    value: function _onEditFeature(feature) {
      if (!this._modifyCollection) {
        this._modifyCollection = new _openlayers2.default.Collection();
      }
      if (!this._modifyLayer) {
        this._modifyLayer = new _openlayers2.default.layer.Vector({
          title: null,
          zIndex: 1000,
          style: this.props.modifyStyle,
          source: new _openlayers2.default.source.Vector({
            features: this._modifyCollection
          })
        });
        this.props.map.addLayer(this._modifyLayer);
      }
      this._modifyCollection.clear();
      if (!this._modify) {
        this._modify = new _openlayers2.default.interaction.Modify({
          features: this._modifyCollection,
          wrapX: false
        });
      }
      this.activate(this._modify);
      this._geom = feature.getGeometry().clone();
      this._modifyCollection.push(feature);
      var me = this;
      _ToolActions2.default.showEditPopup(feature, this._layer, function (cancel) {
        if (cancel) {
          feature.setGeometry(me._geom);
          delete me._geom;
        }
        me._modifyCollection.clear();
        me.deactivate();
      });
    }
  }, {
    key: '_onDelete',
    value: function _onDelete(feature) {
      var me = this;
      var formatMessage = this.props.intl.formatMessage;

      if (this._layer.get('wfsInfo')) {
        _WFSService2.default.deleteFeature(this._layer, feature, function () {
          _FeatureStore2.default.removeFeature(me._layer, feature);
          var source = me._layer.getSource();
          if (source instanceof _openlayers2.default.source.Vector) {
            source.removeFeature(feature);
          } else {
            me._redraw();
          }
        }, function (xmlhttp, msg) {
          msg = msg || formatMessage(messages.deletemsg) + xmlhttp.status + ' ' + xmlhttp.statusText;
          me.setState({
            errorOpen: true,
            error: true,
            msg: msg
          });
        });
      } else {
        _FeatureStore2.default.removeFeature(me._layer, feature);
        me._layer.getSource().removeFeature(feature);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var schema, id;
      if (this._layer) {
        schema = _FeatureStore2.default.getSchema(this._layer);
        id = this._layer.get('id');
      }
      var error;
      if (this.state.error === true) {
        error = _react2.default.createElement(_Snackbar2.default, {
          autoHideDuration: 5000,
          style: { transitionProperty: 'none' },
          bodyStyle: { lineHeight: '24px', height: 'auto' },
          open: this.state.errorOpen,
          message: this.state.msg,
          onRequestClose: this._handleRequestClose.bind(this)
        });
      }
      var me = this;
      var sortable = this.props.sortable;
      var columns = [{
        id: 'selector',
        header: '',
        width: 40,
        sortable: false,
        render: function render(props) {
          var selected = me.state.selected.indexOf(props.row) !== -1;
          return _react2.default.createElement(_Checkbox2.default, { disableTouchRipple: true, checked: selected, onCheck: me._onSelect.bind(me, props) });
        }
      }];
      if (this.props.allowEdit && this._layer && this._layer.get('disableEdit') !== true) {
        columns.push({
          id: 'delete',
          header: '',
          width: 40,
          sortable: false,
          render: function render(props) {
            return _react2.default.createElement(_delete2.default, { style: { cursor: 'pointer' }, onTouchTap: me._onDelete.bind(me, props.row) });
          }
        }, {
          id: 'edit',
          header: '',
          width: 40,
          sortable: false,
          render: function render(props) {
            return _react2.default.createElement(_create2.default, { style: { cursor: 'pointer' }, onTouchTap: me._onEditFeature.bind(me, props.row) });
          }
        });
      }
      for (var key in schema) {
        if (schema[key] === 'link') {
          columns.push({
            id: key,
            header: key,
            sortable: sortable,
            render: function (props) {
              return _react2.default.createElement(
                'a',
                { href: props.row.get(this) },
                props.row.get(this)
              );
            }.bind(key)
          });
        } else {
          columns.push({
            id: key,
            header: key,
            sortable: sortable,
            accessor: function (d) {
              return d.get(this);
            }.bind(key)
          });
        }
      }
      var table;
      var checkToCreateTable = this._element && columns.length > 0 && this.state.features !== null;
      if (checkToCreateTable) {
        if (!this._pageSize && this._formNode && this._element.offsetHeight > 0) {
          var row = document.querySelector('.rt-td');
          var rowHeight = row ? row.offsetHeight : 42;
          var header = document.querySelector('.rt-th');
          var headerHeight = header ? header.offsetHeight : 29;
          var footer = document.querySelector('.-pagination');
          var footerHeight = footer ? footer.offsetHeight : 39;
          this._pageSize = Math.floor((this._element.offsetHeight - this._formNode.offsetHeight - headerHeight - footerHeight) / rowHeight);
        }
        var data;
        if (this._filtered || this._selectedOnly) {
          data = this.state.filter;
        } else {
          if (this._layer instanceof _openlayers2.default.layer.Vector) {
            data = this.state.features.getFeatures();
          } else {
            data = _FeatureStore2.default.getFeaturesPerPage(this._layer, this.state.page, this._pageSize);
          }
        }
        table = _react2.default.createElement(_reactTable2.default, {
          ref: 'table',
          loading: this.state.loading,
          pages: this._layer instanceof _openlayers2.default.layer.Vector ? undefined : this.state.pages,
          data: data,
          manual: !(this._layer instanceof _openlayers2.default.layer.Vector),
          showPageSizeOptions: false,
          onChange: this._layer instanceof _openlayers2.default.layer.Vector ? undefined : this._onTableChange.bind(this),
          showPageJump: false,
          pageSize: this._pageSize,
          columns: columns
        });
      }
      var style = Object.assign({ marginLeft: 10, marginRight: 10 }, this.props.style);
      return _react2.default.createElement(
        _Paper2.default,
        { zDepth: 0, className: (0, _classnames2.default)('sdk-component featureTable', this.props.className), style: style },
        _react2.default.createElement(
          _Toolbar.Toolbar,
          { ref: 'form', className: 'featureTableToolbar' },
          _react2.default.createElement(
            _Toolbar.ToolbarGroup,
            { firstChild: true },
            _react2.default.createElement(_LayerSelector2.default, _extends({}, this.props, { id: 'table-layerSelector', disabled: !this._layer, ref: 'layerSelector', onChange: this._onLayerSelectChange.bind(this), layers: this.state.layers, value: id }))
          ),
          _react2.default.createElement(
            _Toolbar.ToolbarGroup,
            null,
            _react2.default.createElement(_TextField2.default, { floatingLabelFixed: true, floatingLabelText: formatMessage(messages.filterlabel), id: 'featuretable-filter', disabled: !this._layer, ref: 'filter', onChange: this._filterByText.bind(this), hintText: formatMessage(messages.filterplaceholder) }),
            _react2.default.createElement(_FilterHelp2.default, { intl: this.props.intl }),
            _react2.default.createElement(_Button2.default, { buttonType: 'Icon', disabled: !this._layer, iconClassName: 'ms ms-crosshair', tooltip: formatMessage(messages.zoombuttontitle), onTouchTap: this._zoomSelected.bind(this) }),
            _react2.default.createElement(
              _IconMenu2.default,
              { anchorOrigin: { horizontal: 'right', vertical: 'top' }, targetOrigin: { horizontal: 'right', vertical: 'top' }, iconButtonElement: _react2.default.createElement(_Button2.default, { buttonType: 'Icon', iconClassName: 'fa fa-ellipsis-v' }) },
              _react2.default.createElement(_MenuItem2.default, { primaryText: formatMessage(messages.clearbuttontitle), disabled: !this._layer, onTouchTap: this._clearSelected.bind(this) }),
              _react2.default.createElement(_MenuItem2.default, { primaryText: _react2.default.createElement(_Toggle2.default, { label: formatMessage(messages.onlyselected), disabled: !this._layer, defaultToggled: this._selectedOnly, onToggle: this._filter.bind(this) }) })
            )
          ),
          error
        ),
        _react2.default.createElement(
          _Paper2.default,
          null,
          table
        )
      );
    }
  }]);

  return FeatureTable;
}(_react2.default.Component), _class.propTypes = {
  /**
   * The toggleGroup to use. When this tool is activated, all other tools in the same toggleGroup will be deactivated.
   */
  toggleGroup: _react2.default.PropTypes.string,
  /**
   * Identifier to use for this tool. Can be used to group tools together.
   */
  toolId: _react2.default.PropTypes.string,
  /**
   * The ol3 map in which the source for the table resides.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * The layer to use initially for loading the table.
   */
  layer: _react2.default.PropTypes.instanceOf(_openlayers2.default.layer.Layer),
  /**
   * The zoom level to zoom the map to in case of a point geometry.
   */
  pointZoom: _react2.default.PropTypes.number,
  /**
   * Refresh rate in ms that determines how often to resize the feature table when the window is resized.
   */
  refreshRate: _react2.default.PropTypes.number,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired,
  /**
   * Should we allow for sorting the data?
   */
  sortable: _react2.default.PropTypes.bool,
  /**
   * Callback that gets called when the height needs updating of the parent container.
   */
  onUpdate: _react2.default.PropTypes.func,
  /**
   * Should we allow edit (modify, delete) from the table? Needs an EditPopup component in the application.
   */
  allowEdit: _react2.default.PropTypes.bool,
  /**
   * Style for modify interaction.
   */
  modifyStyle: _react2.default.PropTypes.object
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object,
  proxy: _react2.default.PropTypes.string,
  requestHeaders: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  allowEdit: true,
  pointZoom: 16,
  sortable: true,
  refreshRate: 250
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(FeatureTable, { withRef: true });