'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _Snackbar = require('material-ui/Snackbar');

var _Snackbar2 = _interopRequireDefault(_Snackbar);

var _FeatureStore = require('../stores/FeatureStore');

var _FeatureStore2 = _interopRequireDefault(_FeatureStore);

var _LayerStore = require('../stores/LayerStore');

var _LayerStore2 = _interopRequireDefault(_LayerStore);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _LayerSelector = require('./LayerSelector');

var _LayerSelector2 = _interopRequireDefault(_LayerSelector);

var _SelectActions = require('../actions/SelectActions');

var _SelectActions2 = _interopRequireDefault(_SelectActions);

var _FilterService = require('../services/FilterService');

var _FilterService2 = _interopRequireDefault(_FilterService);

var _FilterHelp = require('./FilterHelp');

var _FilterHelp2 = _interopRequireDefault(_FilterHelp);

var _Toolbar = require('material-ui/Toolbar');

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _Paper = require('material-ui/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _reactIntl = require('react-intl');

require('./QueryBuilder.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  layerlabel: {
    'id': 'querybuilder.layerlabel',
    'defaultMessage': 'Layer'
  },
  filterlabel: {
    'id': 'querybuilder.filterlabel',
    'defaultMessage': 'Filter'
  },
  filterbuttontext: {
    'id': 'querybuilder.filterbuttontext',
    'defaultMessage': 'Selected items based on your criteria'
  },
  errortext: {
    'id': 'querybuilder.errortext',
    'defaultMessage': 'Invalid filter, should be for instance foo == "Bar"'
  },
  countmsg: {
    'id': 'querybuilder.countmsg',
    'defaultMessage': '{count, plural, =0 {No features} one {# feature} other {# features}} matched by filter.'
  },
  newbuttontitle: {
    'id': 'querybuilder.newbuttontitle',
    'defaultMessage': 'New selection'
  },
  newbuttontext: {
    'id': 'querybuilder.newbuttontext',
    'defaultMessage': 'New'
  },
  clearbuttontitle: {
    'id': 'querybuilder.clearbuttontitle',
    'defaultMessage': 'Clear current selection'
  },
  clearbuttontext: {
    'id': 'querybuilder.clearbuttontext',
    'defaultMessage': 'Clear'
  },
  addbuttontitle: {
    'id': 'querybuilder.addbuttontitle',
    'defaultMessage': 'Add to current selection'
  },
  addbuttontext: {
    'id': 'querybuilder.addbuttontext',
    'defaultMessage': 'Add'
  },
  selectintitle: {
    'id': 'querybuilder.selectintitle',
    'defaultMessage': 'Refine current selection'
  },
  selectintext: {
    'id': 'querybuilder.selectintext',
    'defaultMessage': 'Refine'
  }
});

/**
 * A component that allows users to perform queries on vector layers. Queries can be new queries, added to existing queries or users can filter inside of an existing query a.k.a. drill-down.
 *
 * ```xml
 * <QueryBuilder map={map} />
 * ```
 */
var QueryBuilder = (_temp = _class = function (_React$PureComponent) {
  _inherits(QueryBuilder, _React$PureComponent);

  function QueryBuilder(props, context) {
    _classCallCheck(this, QueryBuilder);

    var _this = _possibleConstructorReturn(this, (QueryBuilder.__proto__ || Object.getPrototypeOf(QueryBuilder)).call(this, props));

    _LayerStore2.default.bindMap(_this.props.map);
    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this._proxy = context.proxy;
    _FeatureStore2.default.bindMap(_this.props.map, _this._proxy);
    _this.state = {
      layers: [],
      showCount: false,
      errorText: null
    };
    return _this;
  }

  _createClass(QueryBuilder, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._onChangeLayersCb = this._onChangeLayers.bind(this);
      _LayerStore2.default.addChangeListener(this._onChangeLayersCb);
      this._onChangeLayers();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _LayerStore2.default.removeChangeListener(this._onChangeLayersCb);
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: '_onChangeLayers',
    value: function _onChangeLayers() {
      var flatLayers = _LayerStore2.default.getState().flatLayers;
      var layers = [];
      for (var i = 0, ii = flatLayers.length; i < ii; ++i) {
        var lyr = flatLayers[i];
        if (lyr.get('isSelectable')) {
          layers.push(lyr);
        }
      }
      this.setState({ layers: layers });
    }
  }, {
    key: '_onLayerSelectChange',
    value: function _onLayerSelectChange(layer) {
      this._layer = layer;
      this.forceUpdate();
    }
  }, {
    key: '_onSubmit',
    value: function _onSubmit(evt) {
      evt.preventDefault();
    }
  }, {
    key: '_setQueryFilter',
    value: function _setQueryFilter(evt) {
      var formatMessage = this.props.intl.formatMessage;

      var expression;
      if (evt) {
        expression = evt.target.value;
      } else {
        expression = this.refs.queryExpression.getValue();
      }
      if (!expression) {
        this._queryFilter = null;
        this.setState({ errorText: null });
      } else {
        try {
          this._queryFilter = _FilterService2.default.filter(expression);
          this.setState({ errorText: null });
        } catch (e) {
          this._queryFilter = null;
          this.setState({ errorText: formatMessage(messages.errortext) });
        }
      }
    }
  }, {
    key: '_clear',
    value: function _clear() {
      _FeatureStore2.default.clearSelection(this._layer);
    }
  }, {
    key: '_doQuery',
    value: function _doQuery(selectIn, add) {
      var selection = [];
      this._setQueryFilter();
      if (this._queryFilter === null) {
        return;
      }
      var features = _FeatureStore2.default.getState(this._layer).features.getFeatures();
      for (var i = 0, ii = features.length; i < ii; ++i) {
        var properties = features[i].getProperties();
        if (this._queryFilter(properties)) {
          features[i].selected = true;
          selection.push(features[i]);
        }
      }
      var count;
      if (selectIn === true) {
        count = _FeatureStore2.default.selectFeaturesInCurrentSelection(this._layer, selection);
      } else {
        _SelectActions2.default.selectFeatures(this._layer, selection, !add);
        count = selection.length;
      }
      this.setState({
        showCount: true,
        open: true,
        count: count
      });
    }
  }, {
    key: '_addSelection',
    value: function _addSelection() {
      this._doQuery(false, true);
    }
  }, {
    key: '_newSelection',
    value: function _newSelection() {
      this._doQuery(false);
    }
  }, {
    key: '_inSelection',
    value: function _inSelection() {
      this._doQuery(true);
    }
  }, {
    key: '_handleRequestClose',
    value: function _handleRequestClose() {
      this.setState({
        open: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var count;
      var id;
      if (this._layer) {
        id = this._layer.get('id');
      }
      if (this.state.showCount === true) {
        count = _react2.default.createElement(_Snackbar2.default, {
          open: this.state.open,
          message: formatMessage(messages.countmsg, { count: this.state.count }),
          autoHideDuration: 2000,
          onRequestClose: this._handleRequestClose.bind(this)
        });
      }
      return _react2.default.createElement(
        _Paper2.default,
        { style: this.props.style, zDepth: 0, className: (0, _classnames2.default)('sdk-component query-builder', this.props.className) },
        _react2.default.createElement(_LayerSelector2.default, _extends({}, this.props, { value: id, onChange: this._onLayerSelectChange.bind(this), id: 'layerSelector', ref: 'layerSelector', layers: this.state.layers })),
        _react2.default.createElement('br', null),
        _react2.default.createElement(_TextField2.default, { floatingLabelText: formatMessage(messages.filterlabel), errorText: this.state.errorText, ref: 'queryExpression', onChange: this._setQueryFilter.bind(this) }),
        _react2.default.createElement(_FilterHelp2.default, { intl: this.props.intl }),
        _react2.default.createElement('br', null),
        _react2.default.createElement(
          _Toolbar.Toolbar,
          null,
          _react2.default.createElement(
            _Toolbar.ToolbarGroup,
            null,
            _react2.default.createElement(_Button2.default, { label: formatMessage(messages.clearbuttontext), tooltip: formatMessage(messages.clearbuttontitle), onTouchTap: this._clear.bind(this) })
          ),
          _react2.default.createElement(_Toolbar.ToolbarSeparator, null),
          _react2.default.createElement(
            _Toolbar.ToolbarGroup,
            null,
            _react2.default.createElement(_Button2.default, { label: formatMessage(messages.newbuttontext), tooltip: formatMessage(messages.newbuttontitle), onTouchTap: this._newSelection.bind(this) })
          ),
          _react2.default.createElement(
            _Toolbar.ToolbarGroup,
            null,
            _react2.default.createElement(_Button2.default, { label: formatMessage(messages.addbuttontext), tooltip: formatMessage(messages.addbuttontitle), onTouchTap: this._addSelection.bind(this) })
          ),
          _react2.default.createElement(
            _Toolbar.ToolbarGroup,
            null,
            _react2.default.createElement(_Button2.default, { label: formatMessage(messages.selectintext), tooltip: formatMessage(messages.selectintitle), onTouchTap: this._inSelection.bind(this) })
          )
        ),
        count
      );
    }
  }]);

  return QueryBuilder;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * The ol3 map whose layers can be used for the querybuilder.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object,
  proxy: _react2.default.PropTypes.string
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(QueryBuilder);