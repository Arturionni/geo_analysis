'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _AppDispatcher = require('../dispatchers/AppDispatcher');

var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

var _toolutil = require('../toolutil');

var _toolutil2 = _interopRequireDefault(_toolutil);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _reactIntl = require('react-intl');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  buttontitle: {
    'id': 'navigation.buttontitle',
    'defaultMessage': 'Switch to map navigation (pan and zoom)'
  }
});

/**
 * Navigation button that allows to get the map back into navigation (zoom, pan, info popup) mode.
 *
 * ```xml
 * <Navigation secondary={true} toggleGroup='navigation' />
 * ```
 *
 * ![Navigation](../Navigation.png)
 * ![Navigation Active](../NavigationActive.png)
 */
var Navigation = (_temp = _class = function (_React$PureComponent) {
  _inherits(Navigation, _React$PureComponent);

  function Navigation(props, context) {
    _classCallCheck(this, Navigation);

    var _this = _possibleConstructorReturn(this, (Navigation.__proto__ || Object.getPrototypeOf(Navigation)).call(this, props));

    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this._dispatchToken = _toolutil2.default.register(_this);
    _this.state = {
      secondary: props.secondary !== undefined ? props.secondary : false
    };
    return _this;
  }

  _createClass(Navigation, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _AppDispatcher2.default.unregister(this._dispatchToken);
    }
  }, {
    key: 'activate',
    value: function activate() {
      _toolutil2.default.activate(this, []);
      this.setState({ secondary: true });
    }
  }, {
    key: 'deactivate',
    value: function deactivate() {
      _toolutil2.default.deactivate(this);
      this.setState({ secondary: false });
    }
  }, {
    key: '_onClick',
    value: function _onClick() {
      if (!this.state.secondary) {
        this.activate();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      return _react2.default.createElement(_Button2.default, _extends({ buttonType: 'Icon' }, this.props, { iconClassName: 'headerIcons ms ms-pan', className: (0, _classnames2.default)('sdk-component navigation', this.props.className), secondary: this.state.secondary, onTouchTap: this._onClick.bind(this), tooltip: formatMessage(messages.buttontitle) }));
    }
  }]);

  return Navigation;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Should the button have the secondary state initially (pressed)?
   */
  secondary: _react2.default.PropTypes.bool,
  /**
   * The toggleGroup to use. When this tool is activated, all other tools in the same toggleGroup will be deactivated.
   */
  toggleGroup: _react2.default.PropTypes.string,
  /**
   * Identifier to use for this tool. Can be used to group tools together.
   */
  toolId: _react2.default.PropTypes.string,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.defaultProps = {
  toolId: 'nav'
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(Navigation);