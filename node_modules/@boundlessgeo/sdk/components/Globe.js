'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

/* global Cesium */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _reactIntl = require('react-intl');

var _ToolActions = require('../actions/ToolActions');

var _ToolActions2 = _interopRequireDefault(_ToolActions);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _threeDRotation = require('material-ui/svg-icons/action/three-d-rotation');

var _threeDRotation2 = _interopRequireDefault(_threeDRotation);

var _ol3Cesium = require('ol3-cesium');

var _ol3Cesium2 = _interopRequireDefault(_ol3Cesium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

global.ol = _openlayers2.default;


var messages = (0, _reactIntl.defineMessages)({
  maptext: {
    'id': 'globe.maptext',
    'defaultMessage': 'Switch to map (2D)'
  },
  globetext: {
    'id': 'globe.globetext',
    'defaultMessage': 'Switch to globe (3D)'
  }
});

/**
 * Adds a button to toggle 3D mode.
 * The HTML page of the application needs to include a script tag to cesium:
 *
 * ```html
 * <script src="./resources/ol3-cesium/Cesium.js" type="text/javascript" charset="utf-8"></script>
 * ```
 *
 * ```xml
 * <Globe map={map} />
 * ```
 */
var Globe = (_temp = _class = function (_React$PureComponent) {
  _inherits(Globe, _React$PureComponent);

  function Globe(props, context) {
    _classCallCheck(this, Globe);

    var _this = _possibleConstructorReturn(this, (Globe.__proto__ || Object.getPrototypeOf(Globe)).call(this, props));

    _this.state = {
      globe: false
    };
    return _this;
  }

  _createClass(Globe, [{
    key: 'init',
    value: function init() {
      var providerUrl = '//assets.agi.com/stk-terrain/world';
      this._ol3d = new _ol3Cesium2.default.OLCesium({ map: this.props.map });
      var scene = this._ol3d.getCesiumScene();
      scene.terrainProvider = new Cesium.CesiumTerrainProvider({
        url: providerUrl
      });
    }
  }, {
    key: '_toggle',
    value: function _toggle() {
      if (!this._ol3d) {
        this.init();
      }
      this._ol3d.setEnabled(!this.state.globe);
      var globe = !this.state.globe;
      if (globe) {
        this._hideOrShowScaleBar.call(this, { target: this.props.map.getView() });
        this.props.map.getView().on('change:resolution', this._hideOrShowScaleBar, this);
        _ToolActions2.default.disableAllTools();
      } else {
        this.props.map.getView().un('change:resolution', this._hideOrShowScaleBar, this);
        this._showScaleBar();
        _ToolActions2.default.enableAllTools();
      }
      this.setState({ globe: globe });
    }
  }, {
    key: '_hideOrShowScaleBar',
    value: function _hideOrShowScaleBar(evt) {
      if (evt.target.getProjection().getCode() === 'EPSG:3857') {
        if (evt.target.getResolution() > this.props.hideScalebar) {
          this._hideScaleBar();
        } else {
          this._showScaleBar();
        }
      }
    }
  }, {
    key: '_hideScaleBar',
    value: function _hideScaleBar() {
      var scaleLine = document.getElementsByClassName('ol-scale-line');
      if (scaleLine.length === 1) {
        scaleLine[0].style.visibility = 'hidden';
      }
    }
  }, {
    key: '_showScaleBar',
    value: function _showScaleBar() {
      var scaleLine = document.getElementsByClassName('ol-scale-line');
      if (scaleLine.length === 1) {
        scaleLine[0].style.visibility = 'inherit';
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var icon, tooltip;
      icon = _react2.default.createElement(_threeDRotation2.default, null);
      if (this.state.globe) {
        tooltip = formatMessage(messages.maptext);
      } else {
        tooltip = formatMessage(messages.globetext);
      }
      return _react2.default.createElement(
        _Button2.default,
        { style: this.props.style, tooltipPosition: this.props.tooltipPosition, buttonType: 'Action', mini: true, secondary: true, className: (0, _classnames2.default)('sdk-component globe', this.props.className), tooltip: tooltip, onTouchTap: this._toggle.bind(this) },
        icon
      );
    }
  }]);

  return Globe;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Resolution at which to hide the scalebar in 3D mode
   */
  hideScalebar: _react2.default.PropTypes.number,
  /**
   * Position of the tooltip.
   */
  tooltipPosition: _react2.default.PropTypes.oneOf(['bottom', 'bottom-right', 'bottom-left', 'right', 'left', 'top-right', 'top', 'top-left']),
  /**
   * The ol3 map instance to work on.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.defaultProps = {
  hideScalebar: 78271
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(Globe);