'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _reactIntl = require('react-intl');

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _LayerStore = require('../stores/LayerStore');

var _LayerStore2 = _interopRequireDefault(_LayerStore);

var _AppDispatcher = require('../dispatchers/AppDispatcher');

var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

var _toolutil = require('../toolutil');

var _toolutil2 = _interopRequireDefault(_toolutil);

var _ToolActions = require('../actions/ToolActions');

var _ToolActions2 = _interopRequireDefault(_ToolActions);

var _IconMenu = require('material-ui/IconMenu');

var _IconMenu2 = _interopRequireDefault(_IconMenu);

var _MenuItem = require('material-ui/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  dropdowntitle: {
    'id': 'drawfeature.dropdowntitle',
    'defaultMessage': 'Draw Feature'
  },
  polygon: {
    'id': 'drawfeature.polygon',
    'defaultMessage': 'Draw Polygon'
  },
  linestring: {
    'id': 'drawfeature.linestring',
    'defaultMessage': 'Draw Line'
  },
  point: {
    'id': 'drawfeature.point',
    'defaultMessage': 'Draw Point'
  }
});

/**
 * Allows users to draw new features. This can work on WFS-T enabled layers, or on local vector layers.
 * For WFS-T the layer needs to have isWFST set to true. Also a wfsInfo object needs to be
 * configured on the layer with the following properties:
 * - featureNS: the namespace of the WFS typename
 * - featureType: the name (without prefix) of the underlying WFS typename
 * - geometryType: the type of geometry (e.g. MultiPolygon)
 * - geometryName: the name of the geometry attribute
 * - url: the online resource of the WFS endpoint
 *
 * ```xml
 * <DrawFeature map={map} />
 * ```
 */
var DrawFeature = (_temp = _class = function (_React$PureComponent) {
  _inherits(DrawFeature, _React$PureComponent);

  function DrawFeature(props, context) {
    _classCallCheck(this, DrawFeature);

    var _this = _possibleConstructorReturn(this, (DrawFeature.__proto__ || Object.getPrototypeOf(DrawFeature)).call(this, props));

    _this._dispatchToken = _toolutil2.default.register(_this);
    _LayerStore2.default.bindMap(_this.props.map);
    _this.state = {
      Polygon: false,
      Point: false,
      LineString: false,
      secondary: false,
      muiTheme: context.muiTheme || (0, _getMuiTheme2.default)(),
      disabled: false,
      error: false,
      open: false
    };
    _this._tempSource = new _openlayers2.default.source.Vector();
    _this._tempLayer = new _openlayers2.default.layer.Vector({
      zIndex: 1000,
      title: null,
      source: _this._tempSource
    });
    _this._interactions = {
      polygon: new _openlayers2.default.interaction.Draw({
        source: _this._tempSource,
        type: 'Polygon'
      }),
      linestring: new _openlayers2.default.interaction.Draw({
        source: _this._tempSource,
        type: 'LineString'
      }),
      point: new _openlayers2.default.interaction.Draw({
        source: _this._tempSource,
        type: 'Point'
      })
    };
    for (var key in _this._interactions) {
      _this._interactions[key].on('drawend', _this._onDrawEnd, _this);
    }
    return _this;
  }

  _createClass(DrawFeature, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this.state.muiTheme };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._onChangeCb = this._onChange.bind(this);
      _LayerStore2.default.addChangeListener(this._onChangeCb);
      this.props.map.addLayer(this._tempLayer);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _LayerStore2.default.removeChangeListener(this._onChangeCb);
      _AppDispatcher2.default.unregister(this._dispatchToken);
      this.deactivate();
    }
  }, {
    key: '_onChange',
    value: function _onChange() {
      var flatLayers = _LayerStore2.default.getState().flatLayers;
      var state = {
        Polygon: false,
        LineString: false,
        Point: false
      };
      for (var i = 0, ii = flatLayers.length; i < ii; ++i) {
        var lyr = flatLayers[i];
        var geomType;
        if (lyr.get('disableEdit') !== true) {
          if (lyr.get('geometryType')) {
            geomType = lyr.get('geometryType');
          } else if (lyr.get('wfsInfo')) {
            geomType = lyr.get('wfsInfo').geometryType;
          }
          if (geomType) {
            for (var key in state) {
              if (geomType.indexOf(key) !== -1) {
                state[key] = true;
              }
            }
          }
        }
      }
      this.setState(state);
    }
  }, {
    key: 'activate',
    value: function activate(interactions) {
      _toolutil2.default.activate(this, interactions);
      this.setState({ secondary: true });
    }
  }, {
    key: 'deactivate',
    value: function deactivate() {
      _toolutil2.default.deactivate(this);
      this.setState({ secondary: false });
    }
  }, {
    key: '_setActiveInteractions',
    value: function _setActiveInteractions(active) {
      this.props.map.getInteractions().forEach(function (interaction) {
        if (interaction instanceof _openlayers2.default.interaction.Draw || interaction instanceof _openlayers2.default.interaction.DoubleClickZoom) {
          interaction.setActive(active);
        }
      });
    }
  }, {
    key: '_onDrawEnd',
    value: function _onDrawEnd(evt) {
      var tempSource = this._tempSource;
      this._setActiveInteractions(false);
      var me = this;
      _ToolActions2.default.showEditPopup(evt.feature, undefined, function () {
        tempSource.clear();
        me._setActiveInteractions(true);
      });
    }
  }, {
    key: '_drawPoly',
    value: function _drawPoly() {
      this.deactivate();
      this.activate([this._interactions.polygon]);
    }
  }, {
    key: '_drawLine',
    value: function _drawLine() {
      this.deactivate();
      this.activate([this._interactions.linestring]);
    }
  }, {
    key: '_drawPoint',
    value: function _drawPoint() {
      this.deactivate();
      this.activate([this._interactions.point]);
    }
  }, {
    key: 'disable',
    value: function disable() {
      this.setState({ disabled: true });
    }
  }, {
    key: 'enable',
    value: function enable() {
      this.setState({ disabled: false });
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      return _react2.default.createElement(
        _IconMenu2.default,
        {
          style: this.props.style,
          anchorOrigin: { horizontal: 'right', vertical: 'bottom' }, targetOrigin: { horizontal: 'right', vertical: 'top' },
          iconButtonElement: _react2.default.createElement(_Button2.default, { secondary: this.state.secondary, buttonType: 'Icon', tooltip: formatMessage(messages.dropdowntitle), disabled: this.state.disabled, iconClassName: 'headerIcons ms ms-draw' }),
          disabled: this.state.disabled },
        _react2.default.createElement(_MenuItem2.default, { disabled: !this.state.Polygon, leftIcon: _react2.default.createElement('i', { className: 'ms ms-draw-polygon' }), primaryText: formatMessage(messages.polygon), onTouchTap: this._drawPoly.bind(this) }),
        _react2.default.createElement(_MenuItem2.default, { disabled: !this.state.LineString, leftIcon: _react2.default.createElement('i', { className: 'ms ms-draw-line' }), onTouchTap: this._drawLine.bind(this), primaryText: formatMessage(messages.linestring) }),
        _react2.default.createElement(_MenuItem2.default, { disabled: !this.state.Point, leftIcon: _react2.default.createElement('i', { className: 'ms ms-draw-point' }), onTouchTap: this._drawPoint.bind(this), primaryText: formatMessage(messages.point) })
      );
    }
  }]);

  return DrawFeature;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * The ol3 map whose layers can be used for the WFS-T tool.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * The toggleGroup to use. When this tool is activated, all other tools in the same toggleGroup will be deactivated.
   */
  toggleGroup: _react2.default.PropTypes.string,
  /**
   * Identifier to use for this tool. Can be used to group tools together.
   */
  toolId: _react2.default.PropTypes.string,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(DrawFeature, { withRef: true });