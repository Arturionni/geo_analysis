'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _reactIntl = require('react-intl');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _zoomOutMap = require('material-ui/svg-icons/maps/zoom-out-map');

var _zoomOutMap2 = _interopRequireDefault(_zoomOutMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  buttontitle: {
    'id': 'homebutton.buttontitle',
    'defaultMessage': 'Zoom to the initial extent'
  }
});

/**
 * A button to go back to the initial extent of the map.
 *
 * ```xml
 * <HomeButton map={map} />
 * ```
 *
 * ![Home Button](../HomeButton.png)
 */
var HomeButton = (_temp = _class = function (_React$PureComponent) {
  _inherits(HomeButton, _React$PureComponent);

  function HomeButton(props) {
    _classCallCheck(this, HomeButton);

    var _this = _possibleConstructorReturn(this, (HomeButton.__proto__ || Object.getPrototypeOf(HomeButton)).call(this, props));

    if (!_this.props.extent) {
      var view = _this.props.map.getView();
      _this._center = view.getCenter();
      _this._resolution = view.getResolution();
      if (_this._center === null) {
        view.once('change:center', function (evt) {
          this._center = evt.target.getCenter();
        }, _this);
      }
      if (_this._resolution === undefined) {
        view.once('change:resolution', function (evt) {
          this._resolution = evt.target.getResolution();
        }, _this);
      }
    }
    return _this;
  }

  _createClass(HomeButton, [{
    key: '_goHome',
    value: function _goHome() {
      var view = this.props.map.getView();
      if (this.props.extent) {
        view.fit(this.props.extent, this.props.map.getSize(), { constrainResolution: false });
      } else if (this._center !== null && this._resolution !== undefined) {
        view.setCenter(this._center);
        view.setResolution(this._resolution);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      return _react2.default.createElement(
        _Button2.default,
        { style: this.props.style, tooltipPosition: this.props.tooltipPosition, buttonType: 'Action', mini: true, secondary: true, className: (0, _classnames2.default)('sdk-component home-button', this.props.className), tooltip: formatMessage(messages.buttontitle), onTouchTap: this._goHome.bind(this) },
        _react2.default.createElement(_zoomOutMap2.default, null)
      );
    }
  }]);

  return HomeButton;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * The ol3 map for whose view the initial center and zoom should be restored.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Position of the tooltip.
   */
  tooltipPosition: _react2.default.PropTypes.oneOf(['bottom', 'bottom-right', 'bottom-left', 'right', 'left', 'top-right', 'top', 'top-left']),
  /**
   * Extent to fit on the map on pressing this button. If not set, the initial extent of the map will be used.
   */
  extent: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.number),
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(HomeButton);