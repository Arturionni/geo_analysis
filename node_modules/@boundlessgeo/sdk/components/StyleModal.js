'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _Dialog = require('./Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _List = require('material-ui/List');

var _LayerActions = require('../actions/LayerActions');

var _LayerActions2 = _interopRequireDefault(_LayerActions);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _reactIntl = require('react-intl');

var _RuleEditor = require('./RuleEditor');

var _RuleEditor2 = _interopRequireDefault(_RuleEditor);

var _SLDService = require('../services/SLDService');

var _SLDService2 = _interopRequireDefault(_SLDService);

var _OpenLayersService = require('../services/OpenLayersService');

var _OpenLayersService2 = _interopRequireDefault(_OpenLayersService);

var _RESTService = require('../services/RESTService');

var _RESTService2 = _interopRequireDefault(_RESTService);

var _Snackbar = require('material-ui/Snackbar');

var _Snackbar2 = _interopRequireDefault(_Snackbar);

var _Divider = require('material-ui/Divider');

var _Divider2 = _interopRequireDefault(_Divider);

var _FilterService = require('../services/FilterService');

var _FilterService2 = _interopRequireDefault(_FilterService);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _NewRuleModal = require('./NewRuleModal');

var _NewRuleModal2 = _interopRequireDefault(_NewRuleModal);

require('./StyleModal.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  title: {
    'id': 'stylemodal.title',
    'defaultMessage': 'Edit layer style: {layer}'
  },
  errormsg: {
    'id': 'stylemodal.errormsg',
    'defaultMessage': 'Error saving style to GeoServer. {msg}'
  },
  closebutton: {
    'id': 'stylemodal.closebutton',
    'defaultMessage': 'Close'
  },
  savebutton: {
    'id': 'stylemodal.savebutton',
    'defaultMessage': 'SAVE'
  },
  addrulebutton: {
    'id': 'stylemodal.addrulebutton',
    'defaultMessage': 'ADD'
  },
  addrulebuttontitle: {
    'id': 'stylemodal.addrulebuttontitle',
    'defaultMessage': 'Add New Rule'
  }
});

/**
 * A modal or drawer for editing the style of a layer.
 *
 * ```xml
 * <StyleModal layer={this.props.layer} />
 * ```
 */
var StyleModal = (_temp = _class = function (_React$PureComponent) {
  _inherits(StyleModal, _React$PureComponent);

  function StyleModal(props, context) {
    _classCallCheck(this, StyleModal);

    var _this = _possibleConstructorReturn(this, (StyleModal.__proto__ || Object.getPrototypeOf(StyleModal)).call(this, props));

    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this._proxy = context.proxy;
    _this._requestHeaders = context.requestHeaders;
    _this._styleCache = {};
    _this._ruleCounter = 0;
    _this.state = {
      newRuleOpen: false,
      error: false,
      errorOpen: false,
      attributes: [],
      rule: 'Rule 1',
      geometryType: null,
      rules: [{
        name: 'Rule 1'
      }]
    };
    return _this;
  }

  _createClass(StyleModal, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.layer.get('wfsInfo')) {
        this._setGeomTypeAndAttributes();
      } else {
        this.props.layer.once('change:wfsInfo', this._setGeomTypeAndAttributes, this);
      }
      if (this.props.layer.get('styleInfo')) {
        this._setRules();
      } else {
        this.props.layer.once('change:styleInfo', this._setRules, this);
      }
    }
  }, {
    key: '_setRules',
    value: function _setRules() {
      // only support for a single featureTypeStyle now
      var rules = this.props.layer.get('styleInfo').featureTypeStyles[0].rules;
      for (var i = 0, ii = rules.length; i < ii; ++i) {
        if (rules[i].name === undefined) {
          rules[i].name = rules[i].title ? rules[i].title : 'Untitled ' + (i + 1);
        }
      }
      this.setState({ rule: rules[0].name, rules: rules }, function () {
        if (this.props.layer instanceof _openlayers2.default.layer.Vector) {
          this._setStyleVector();
        }
      });
    }
  }, {
    key: 'close',
    value: function close() {
      this.props.onRequestClose();
    }
  }, {
    key: '_setGeomTypeAndAttributes',
    value: function _setGeomTypeAndAttributes() {
      var wfsInfo = this.props.layer.get('wfsInfo');
      this.setState({ attributes: wfsInfo.attributes, geometryType: wfsInfo.geometryType.replace('Multi', '') });
      this.props.layer.un('change:wfsInfo', this._setGeomTypeAndAttributes, this);
    }
  }, {
    key: '_createStyle',
    value: function _createStyle(styleState) {
      return _OpenLayersService2.default.createStyle(styleState, this.state.geometryType);
    }
  }, {
    key: '_setStyle',
    value: function _setStyle() {
      var layer = this.props.layer;
      if (layer instanceof _openlayers2.default.layer.Vector) {
        this._setStyleVector();
      } else {
        this._generateSLD();
      }
    }
  }, {
    key: '_saveStyle',
    value: function _saveStyle() {
      var me = this;
      var sld = _SLDService2.default.createSLD(this.props.layer, this.state.geometryType, [{
        rules: this.state.rules
      }]);
      if (this.props.layer.get('styleName')) {
        _RESTService2.default.updateStyle(this.props.layer, sld, function (xmlhttp) {
          me.close();
        }, function (xmlhttp) {
          me.setState({ error: true, errorOpen: true, msg: xmlhttp.status + ' ' + xmlhttp.statusText });
        }, this._proxy, this._requestHeaders);
      } else {
        _RESTService2.default.createStyle(this.props.layer, sld, function (xmlhttp) {
          me.props.layer.getSource().updateParams({ 'STYLES': me.props.layer.get('styleName'), '_olSalt': Math.random() });
          _LayerActions2.default.styleLayer(me.props.layer);
          me.close();
        }, function (xmlhttp) {
          me.setState({ error: true, errorOpen: true, msg: xmlhttp.status + ' ' + xmlhttp.statusText });
        }, this._proxy, this._requestHeaders);
      }
    }
  }, {
    key: '_generateSLD',
    value: function _generateSLD() {
      var sld = _SLDService2.default.createSLD(this.props.layer, this.state.geometryType, [{
        rules: this.state.rules
      }]);
      if (!(this._sld && this._sld === sld)) {
        this.props.layer.getSource().updateParams({ 'SLD_BODY': sld, 'TILED': false });
        _LayerActions2.default.styleLayer(this.props.layer);
      }
    }
  }, {
    key: '_setStyleVector',
    value: function _setStyleVector() {
      var me = this;
      // TODO cache as many style objects as possible
      this.props.layer.setStyle(function (feature) {
        // loop over the rules and see which one we match
        var styles = [],
            filter;
        for (var i = me.state.rules.length - 1; i >= 0; --i) {
          var rule = me.state.rules[i];
          var styleState = rule;
          var filterParseError = false;
          if (styleState.expression) {
            var expression = _FilterService2.default.filterToExpression(styleState.expression);
            try {
              filter = _FilterService2.default.filter(expression);
            } catch (e) {
              filterParseError = true;
            }
          }
          if (!filterParseError && (!filter || filter(feature.getProperties()))) {
            var style = me._createStyle(styleState);
            for (var j = 0, jj = style.length; j < jj; ++j) {
              if (style[j].getText()) {
                var text = feature.get(styleState.symbolizers[j].labelAttribute);
                style[j].getText().setText(text ? '' + text : '');
              }
            }
            styles = styles.concat(style);
          }
        }
        return styles;
      });
    }
  }, {
    key: '_onChange',
    value: function _onChange(ruleName, state) {
      // TODO support more symbolizers
      var rule = this._getRuleByName(ruleName);
      if (state.expression) {
        rule.expression = state.expression;
      } else {
        var symbolizers = rule.symbolizers;
        var styleState = symbolizers[0];
        Object.assign(styleState, state);
      }
      this._setStyle();
    }
  }, {
    key: '_removeRule',
    value: function _removeRule(name) {
      var rules = this.state.rules.slice();
      var idx;
      for (var i = 0, ii = rules.length; i < ii; ++i) {
        if (rules[i].name === name) {
          idx = i;
          break;
        }
      }
      rules.splice(idx, 1);
      this.setState({ rules: rules, rule: rules.length > 0 ? rules[0].name : null }, this._setStyle);
    }
  }, {
    key: '_handleRequestClose',
    value: function _handleRequestClose() {
      this.setState({
        errorOpen: false
      });
    }
  }, {
    key: '_getRuleByName',
    value: function _getRuleByName(ruleName) {
      for (var i = 0, ii = this.state.rules.length; i < ii; ++i) {
        if (this.state.rules[i].name === ruleName) {
          return this.state.rules[i];
        }
      }
    }
  }, {
    key: '_addNewRule',
    value: function _addNewRule(name) {
      var rules = this.state.rules.slice();
      rules.push({ name: name, symbolizers: [{}] });
      this.setState({ rules: rules, rule: name, newRuleOpen: false });
    }
  }, {
    key: '_addRule',
    value: function _addRule() {
      this.setState({
        newRuleOpen: true
      });
    }
  }, {
    key: 'closeNew',
    value: function closeNew() {
      this.setState({
        newRuleOpen: false
      });
    }
  }, {
    key: '_resizeDialog',
    value: function _resizeDialog() {
      this.refs.dialog.forceUpdate();
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var error;
      if (this.state.error === true) {
        error = _react2.default.createElement(_Snackbar2.default, {
          open: this.state.errorOpen,
          bodyStyle: { lineHeight: '24px', height: 'auto' },
          message: formatMessage(messages.errormsg, { msg: this.state.msg }),
          autoHideDuration: 2000,
          onRequestClose: this._handleRequestClose.bind(this)
        });
      }
      var ruleItems = this.state.rules.map(function (rule, key) {
        // only support a single symbolizer for now
        var ruleObj = this._getRuleByName(rule.name);
        var editor = _react2.default.createElement(_RuleEditor2.default, _extends({ onRemove: this._removeRule.bind(this, rule.name) }, this.props, { geometryType: this.state.geometryType, key: key, initialState: ruleObj, onChange: this._onChange.bind(this, rule.name), attributes: this.state.attributes }));
        return _react2.default.createElement(
          'span',
          { key: key },
          _react2.default.createElement(_List.ListItem, { onNestedListToggle: this._resizeDialog.bind(this), nestedItems: [editor], primaryTogglesNestedList: true, primaryText: rule.name }),
          _react2.default.createElement(_Divider2.default, null)
        );
      }, this);
      var actions = [_react2.default.createElement(_Button2.default, { key: 1, buttonType: 'Flat', label: formatMessage(messages.closebutton), onTouchTap: this.close.bind(this) }), _react2.default.createElement(_Button2.default, { key: 2, buttonType: 'Flat', label: formatMessage(messages.addrulebutton), tooltipPosition: 'top', tooltip: formatMessage(messages.addrulebuttontitle), onTouchTap: this._addRule.bind(this) }), _react2.default.createElement(_Button2.default, { key: 3, buttonType: 'Flat', primary: true, label: formatMessage(messages.savebutton), onTouchTap: this._saveStyle.bind(this) })];
      return _react2.default.createElement(
        'span',
        { style: this.props.style },
        _react2.default.createElement(
          _Dialog2.default,
          { ref: 'dialog', autoScrollBodyContent: true, inline: this.props.inline, title: formatMessage(messages.title, { layer: this.props.layer.get('title') }), className: 'style-modal', actions: actions, open: this.props.open, onRequestClose: this.close.bind(this) },
          _react2.default.createElement(
            _List.List,
            null,
            ruleItems
          ),
          error
        ),
        _react2.default.createElement(_NewRuleModal2.default, { intl: this.props.intl, inline: this.props.inline, open: this.state.newRuleOpen, onRequestClose: this.closeNew.bind(this), onAdd: this._addNewRule.bind(this) })
      );
    }
  }]);

  return StyleModal;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Should we show inline instead of modal?
   */
  inline: _react2.default.PropTypes.bool,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * The layer associated with the style modal.
   */
  layer: _react2.default.PropTypes.instanceOf(_openlayers2.default.layer.Base).isRequired,
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object,
  proxy: _react2.default.PropTypes.string,
  requestHeaders: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(StyleModal);