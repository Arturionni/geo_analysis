'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Dialog = require('material-ui/Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _reactIntl = require('react-intl');

var _LoginActions = require('../actions/LoginActions');

var _LoginActions2 = _interopRequireDefault(_LoginActions);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  title: {
    'id': 'loginmodal.title',
    'defaultMessage': 'Login'
  },
  usernamelabel: {
    'id': 'loginmodal.userlabel',
    'defaultMessage': 'User name'
  },
  passwordlabel: {
    'id': 'loginmodal.passwordlabel',
    'defaultMessage': 'Password'
  },
  loginbutton: {
    'id': 'loginmodal.loginbutton',
    'defaultMessage': 'Login'
  },
  invalidcredentialsmsg: {
    'id': 'loginmodal.invalidcredentialsmsg',
    'defaultMessage': 'Invalid credentials'
  },
  errormsg: {
    'id': 'loginmodal.errormsg',
    'defaultMessage': 'There was an error communicating with GeoServer, details: {details}'
  }
});

/**
 * Modal window for login to GeoServer. Used by the Login component.
 *
 * ![LoginModal](../LoginModal.png)
 */
var LoginModal = (_temp = _class = function (_React$PureComponent) {
  _inherits(LoginModal, _React$PureComponent);

  function LoginModal(props, context) {
    _classCallCheck(this, LoginModal);

    var _this = _possibleConstructorReturn(this, (LoginModal.__proto__ || Object.getPrototypeOf(LoginModal)).call(this, props));

    _this._muiTheme = context.muiTheme || (0, _getMuiTheme2.default)();
    _this.state = {
      open: _this.props.open
    };
    return _this;
  }

  _createClass(LoginModal, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.state.open !== nextProps.open) {
        this.setState({ open: nextProps.open });
      }
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return { muiTheme: this._muiTheme };
    }
  }, {
    key: '_onEnter',
    value: function _onEnter(evt) {
      if (evt.keyCode === 13) {
        this._doLogin();
      }
    }
  }, {
    key: '_doLogin',
    value: function _doLogin() {
      var username = this.refs.username.getValue();
      var pwd = this.refs.password.getValue();
      if (this.props.login) {
        this.props.login.call(this, username, pwd);
      } else {
        _LoginActions2.default.login(username, pwd, this.failureCb, this);
      }
    }
  }, {
    key: 'failureCb',
    value: function failureCb(xmlhttp) {
      var formatMessage = this.props.intl.formatMessage;

      var msg;
      if (xmlhttp.status === 401) {
        msg = formatMessage(messages.invalidcredentialsmsg);
      } else {
        msg = formatMessage(messages.errormsg, { details: xmlhttp.status + ' ' + xmlhttp.statusText });
      }
      this.setState({ errorMsg: msg });
    }
  }, {
    key: 'close',
    value: function close() {
      if (this.props.close) {
        this.props.close.call(this);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var actions = [_react2.default.createElement(_Button2.default, { buttonType: 'Flat', primary: true, label: formatMessage(messages.loginbutton), onTouchTap: this._doLogin.bind(this) })];
      return _react2.default.createElement(
        _Dialog2.default,
        { style: this.props.style, contentStyle: { width: 500 }, className: (0, _classnames2.default)('sdk-component login-modal', this.props.className), actions: actions, title: formatMessage(messages.title), open: this.state.open, onRequestClose: this.close.bind(this) },
        _react2.default.createElement(_TextField2.default, { style: { width: 450 }, floatingLabelText: formatMessage(messages.usernamelabel), ref: 'username' }),
        _react2.default.createElement('br', null),
        _react2.default.createElement(_TextField2.default, { errorText: this.state.errorMsg, style: { width: 450 }, onKeyDown: this._onEnter.bind(this), type: 'password', floatingLabelText: formatMessage(messages.passwordlabel), ref: 'password' })
      );
    }
  }]);

  return LoginModal;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Function to call when the login button is pressed. Will be passed username and password.
   */
  login: _react2.default.PropTypes.func,
  /**
   * Function to call when the close button is pressed.
   */
  close: _react2.default.PropTypes.func,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * @ignore
   */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = (0, _reactIntl.injectIntl)(LoginModal);