'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                    * Licensed under the Apache License, Version 2.0 (the "License").
                    * You may not use this file except in compliance with the License.
                    * You may obtain a copy of the License at
                    * http://www.apache.org/licenses/LICENSE-2.0
                    * Unless required by applicable law or agreed to in writing, software
                    * distributed under the License is distributed on an "AS IS" BASIS,
                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    * See the License for the specific language governing permissions and limitations under the License.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _debounce = require('debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _reactDndHtml5Backend = require('react-dnd-html5-backend');

var _reactDndHtml5Backend2 = _interopRequireDefault(_reactDndHtml5Backend);

var _reactDnd = require('react-dnd');

var _LayerActions = require('../actions/LayerActions');

var _LayerActions2 = _interopRequireDefault(_LayerActions);

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _LayerIdService = require('../services/LayerIdService');

var _LayerIdService2 = _interopRequireDefault(_LayerIdService);

var _LayerStore = require('../stores/LayerStore');

var _LayerStore2 = _interopRequireDefault(_LayerStore);

var _LayerListItem = require('./LayerListItem');

var _LayerListItem2 = _interopRequireDefault(_LayerListItem);

var _Label = require('./Label');

var _Label2 = _interopRequireDefault(_Label);

var _AddLayerModal = require('./AddLayerModal');

var _AddLayerModal2 = _interopRequireDefault(_AddLayerModal);

var _BaseMapModal = require('./BaseMapModal');

var _BaseMapModal2 = _interopRequireDefault(_BaseMapModal);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _List = require('material-ui/List');

var _layers = require('material-ui/svg-icons/maps/layers');

var _layers2 = _interopRequireDefault(_layers);

var _reactIntl = require('react-intl');

var _Paper = require('material-ui/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

require('./LayerList.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var messages = (0, _reactIntl.defineMessages)({
  layertitle: {
    'id': 'layerlist.layertitle',
    'defaultMessage': 'Layers'
  },
  addlayertitle: {
    'id': 'layerlist.addlayertitle',
    'defaultMessage': 'Add layers'
  },
  addlayertext: {
    'id': 'layerlist.addlayertext',
    'defaultMessage': 'Add Layer'
  },
  addbasemaptext: {
    'id': 'layerlist.addbasemaptext',
    'defaultMessage': 'BaseMap'
  }
});

/**
 * $$src/components/LayerListDetail.md$$
 *
 */
var LayerList = (_temp = _class = function (_React$PureComponent) {
  _inherits(LayerList, _React$PureComponent);

  function LayerList(props, context) {
    _classCallCheck(this, LayerList);

    var _this = _possibleConstructorReturn(this, (LayerList.__proto__ || Object.getPrototypeOf(LayerList)).call(this, props));

    _LayerStore2.default.bindMap(_this.props.map);
    _this.state = {
      visible: props.showOnStart,
      addLayerOpen: false,
      muiTheme: context.muiTheme || (0, _getMuiTheme2.default)(),
      baseLayer: ''
    };
    _this.moveLayer = (0, _debounce2.default)(_this.moveLayer, 100);
    return _this;
  }

  _createClass(LayerList, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._onChangeCb = this._onChange.bind(this);
      _LayerStore2.default.addChangeListener(this._onChangeCb);
      this._onChange();
      if (this.props.inlineDialogs) {
        this.setState({ visible: true });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _LayerStore2.default.removeChangeListener(this._onChangeCb);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var forEachLayer = function forEachLayer(layers, layer) {
        if (layer instanceof _openlayers2.default.layer.Group) {
          layer.getLayers().forEach(function (groupLayer) {
            forEachLayer(layers, groupLayer);
          });
        } else if (layer.get('type') === 'base') {
          layers.push(layer);
        }
      };
      var baseLayers = [];
      forEachLayer(baseLayers, this.props.map.getLayerGroup());
      if (baseLayers.length > 0) {
        for (var i = 0; i < baseLayers.length; i++) {
          baseLayers[i].setVisible(false);
        }
        baseLayers[0].setVisible(true);
        this.setState({ baseLayer: baseLayers[0].get('id') });
      }
    }
  }, {
    key: '_onChange',
    value: function _onChange() {
      this.setState(_LayerStore2.default.getState());
    }
  }, {
    key: 'renderLayerGroup',
    value: function renderLayerGroup(group) {
      return this.renderLayers(group.getLayers().getArray().slice(0).reverse(), group);
    }
  }, {
    key: 'renderLayers',
    value: function renderLayers(layers, group) {
      var me = this;
      var layerNodes = [];
      for (var i = 0, ii = layers.length; i < ii; ++i) {
        var lyr = layers[i];
        if (!this.props.filter || this.props.filter(lyr) === true) {
          layerNodes.push(me.getLayerNode(lyr, group, ii - i - 1));
        }
      }
      return layerNodes;
    }
  }, {
    key: '_showAddLayer',
    value: function _showAddLayer() {
      this.setState({
        addLayerOpen: true
      });
    }
  }, {
    key: '_closeAddLayer',
    value: function _closeAddLayer() {
      this.setState({
        addLayerOpen: false
      });
    }
  }, {
    key: '_togglePanel',
    value: function _togglePanel() {
      var newVisible = !this.state.visible;
      if (newVisible || this._modalOpen !== true) {
        this.setState({ visible: newVisible });
      }
    }
  }, {
    key: '_setBaseLayer',
    value: function _setBaseLayer(layer) {
      this.setState({ baseLayer: layer });
    }
  }, {
    key: 'getLayerNode',
    value: function getLayerNode(lyr, group, idx) {
      if (this.props.addBaseMap && lyr.get('type') === 'base' && !lyr.getVisible()) {
        return undefined;
      }
      if (lyr.get('id') === undefined) {
        lyr.set('id', _LayerIdService2.default.generateId());
      }
      if (lyr.get('title') !== null) {
        if (lyr instanceof _openlayers2.default.layer.Group) {
          var children = lyr.get('showContent') === false ? [] : this.renderLayerGroup(lyr);
          return _react2.default.createElement(_LayerListItem2.default, _extends({ setBaseLayer: this._setBaseLayer.bind(this), currentBaseLayer: this.state.baseLayer, index: idx, moveLayer: this.moveLayer }, this.props, { key: lyr.get('id'), layer: lyr, group: group, nestedItems: children, title: lyr.get('title'), disableTouchRipple: true }));
        } else {
          return _react2.default.createElement(_LayerListItem2.default, _extends({ setBaseLayer: this._setBaseLayer.bind(this), currentBaseLayer: this.state.baseLayer, index: idx, moveLayer: this.moveLayer }, this.props, { key: lyr.get('id'), layer: lyr, group: group, title: lyr.get('title'), disableTouchRipple: true }));
        }
      }
    }
  }, {
    key: '_showAddBaseMap',
    value: function _showAddBaseMap() {
      this.refs.addbasemapmodal.getWrappedInstance().open();
    }
  }, {
    key: 'moveLayer',
    value: function moveLayer(dragIndex, hoverIndex, layer, group) {
      _LayerActions2.default.moveLayer(dragIndex, hoverIndex, layer, group);
    }
  }, {
    key: 'render',
    value: function render() {
      var formatMessage = this.props.intl.formatMessage;

      var layers = this.state.layers.slice(0).reverse();
      var divClass = {
        'layer-switcher': true,
        'sdk-component': true,
        'layer-list': true
      };
      var tipLabel = this.props.tipLabel ? _react2.default.createElement(
        'div',
        { className: 'layer-list-header' },
        _react2.default.createElement(
          _Label2.default,
          null,
          this.props.tipLabel
        )
      ) : undefined;
      var addLayer, layerModal, baseModal, button;

      if (!this.props.inlineDialogs) {
        button = _react2.default.createElement(
          _Button2.default,
          { tooltipPosition: this.props.tooltipPosition, buttonType: 'Action', mini: true, className: 'layerlistbutton', tooltip: formatMessage(messages.layertitle), onTouchTap: this._togglePanel.bind(this) },
          _react2.default.createElement(_layers2.default, null)
        );
      }

      if (this.props.addLayer || this.props.addBaseMap || this.props.showUpload || this.props.showNew) {
        var layerAdd, baseAdd;
        if (this.props.addLayer || this.props.showUpload || this.props.showNew) {
          if (!this.props.inlineDialogs) {
            layerAdd = _react2.default.createElement(_Button2.default, {
              buttonType: 'Icon',
              iconClassName: 'ms ms-ogc-web-services',
              onTouchTap: this._showAddLayer.bind(this),
              tooltip: formatMessage(messages.addlayertext) });
          }
          layerModal = _react2.default.createElement(_AddLayerModal2.default, { allowUpload: this.props.showUpload, allowCreate: this.props.showNew, open: this.props.addLayer && this.props.addLayer.open !== undefined ? this.props.addLayer.open : this.state.addLayerOpen, inline: this.props.inlineDialogs, srsName: this.props.map.getView().getProjection().getCode(), allowUserInput: this.props.addLayer && this.props.addLayer.allowUserInput, onRequestClose: this.props.addLayer && this.props.addLayer.onRequestClose ? this.props.addLayer.onRequestClose : this._closeAddLayer.bind(this), sources: this.props.addLayer ? this.props.addLayer.sources : undefined, map: this.props.map });
        }
        if (this.props.addBaseMap) {
          baseAdd = _react2.default.createElement(_Button2.default, { buttonType: 'Icon', iconClassName: 'ms ms-layers-base', tooltip: formatMessage(messages.addbasemaptext), onTouchTap: this._showAddBaseMap.bind(this), disableTouchRipple: true });
          //Fallback to handle original implementation of BaseMapModal using single prop addBaseMap.tileServices
          //over new implementation using 2 props addBaseMap and baseMapTileServices
          var tileServices = this.props.baseMapTileServices || this.props.addBaseMap.tileServices;
          baseModal = _react2.default.createElement(_BaseMapModal2.default, { tileServices: tileServices, map: this.props.map, ref: 'addbasemapmodal' });
        }
        addLayer = _react2.default.createElement(
          'span',
          null,
          layerAdd,
          baseAdd
        );
      }
      return _react2.default.createElement(
        'div',
        { ref: 'parent', className: (0, _classnames2.default)(divClass, this.props.className) },
        button,
        _react2.default.createElement(
          _Paper2.default,
          { style: { display: this.state.visible ? 'block' : 'none', minWidth: this.props.minWidth }, zDepth: 0, className: 'layer-tree-panel' },
          tipLabel,
          _react2.default.createElement(
            _List.List,
            { className: 'layer-list-list' },
            this.renderLayers(layers)
          ),
          addLayer
        ),
        this.props.children,
        layerModal,
        baseModal
      );
    }
  }]);

  return LayerList;
}(_react2.default.PureComponent), _class.propTypes = {
  /**
   * Should we allow upload of vector layers?
   */
  showUpload: _react2.default.PropTypes.bool,
  /**
   * Should we allow creation of new vector layers?
   */
  showNew: _react2.default.PropTypes.bool,
  /**
   * The map whose layers should show up in this layer list.
   */
  map: _react2.default.PropTypes.instanceOf(_openlayers2.default.Map).isRequired,
  /**
   * Style config.
   */
  style: _react2.default.PropTypes.object,
  /**
   * Should we show a button that allows the user to zoom to the layer's extent?
   */
  showZoomTo: _react2.default.PropTypes.bool,
  /**
   * Should we show a button that can open up the feature table?
   */
  showTable: _react2.default.PropTypes.bool,
  /**
   * Should we allow for reordering of layers?
   */
  allowReordering: _react2.default.PropTypes.bool,
  /**
   * Should we allow for filtering of features in a layer?
   */
  allowFiltering: _react2.default.PropTypes.bool,
  /**
   * Should we allow for labeling of features in a layer?
   */
  allowLabeling: _react2.default.PropTypes.bool,
  /**
   * Should we allow for styling of features in a vector layer?
   */
  allowStyling: _react2.default.PropTypes.bool,
  /**
   * Should we allow for editing of features in a vector layer?
   * This does require having a WFST component in your application.
   */
  allowEditing: _react2.default.PropTypes.bool,
  /**
   * Should we allow for removal of layers?
   */
  allowRemove: _react2.default.PropTypes.bool,
  /**
   * Should we show a download button for layers?
   */
  showDownload: _react2.default.PropTypes.bool,
  /**
   * Should we include the legend in the layer list?
   */
  includeLegend: _react2.default.PropTypes.bool,
  /**
   * The feature format to serialize in for downloads.
   */
  downloadFormat: _react2.default.PropTypes.oneOf(['GeoJSON', 'KML', 'GPX']),
  /**
   * Should we show an opacity slider for layers?
   */
  showOpacity: _react2.default.PropTypes.bool,
  /**
   * Text to show on top of layers.
   */
  tipLabel: _react2.default.PropTypes.string,
  /**
   * Should we show this component on start of the application?
   */
  showOnStart: _react2.default.PropTypes.bool,
  /**
   * Should groups be collapsible?
   */
  collapsible: _react2.default.PropTypes.bool,
  /**
   * Icon for the component
   */
  icon: _react2.default.PropTypes.node,
  /**
   * Add basemap functionality that adds a button that will open the BaseMapModal componenet
   */
  addBaseMap: _react2.default.PropTypes.bool,
  /**
  *  Tile services for the BaseMapModal component.  There is a built in default tileService if none provided
  */
  baseMapTileServices: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
    name: _react2.default.PropTypes.string.isRequired,
    description: _react2.default.PropTypes.string.isRequired,
    endpoint: _react2.default.PropTypes.string,
    standard: _react2.default.PropTypes.string.isRequired,
    attribution: _react2.default.PropTypes.string,
    thumbnail: _react2.default.PropTypes.string.isRequired
  })),
  /**
   * Should we allow adding layers?
   */
  addLayer: _react2.default.PropTypes.shape({
    sources: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
      title: _react2.default.PropTypes.string.isRequired,
      type: _react2.default.PropTypes.string.isRequired,
      url: _react2.default.PropTypes.string.isRequired,
      properties: _react2.default.PropTypes.object
    })),
    allowUserInput: _react2.default.PropTypes.bool
  }),
  /**
   * Css class name to apply on the root element of this component.
   */
  className: _react2.default.PropTypes.string,
  /**
   * Minimum width as a number of a LayerList, this is mainly an issue on ie11
   */
  minWidth: _react2.default.PropTypes.number,
  /**
   * Position of the tooltip.
   */
  tooltipPosition: _react2.default.PropTypes.oneOf(['bottom', 'bottom-right', 'bottom-left', 'right', 'left', 'top-right', 'top', 'top-left']),
  /**
   * A filter function to filter out some of the layers by returning false.
   */
  filter: _react2.default.PropTypes.func,
  /**
   * Style config for when label is out of scale.
   */
  labelStyleOutOfScale: _react2.default.PropTypes.object,
  /**
   * Should we handle resolution changes to show when a layer is in or out of scale?
   */
  handleResolutionChange: _react2.default.PropTypes.bool,
  /**
   * @ignore
   */
  children: _react2.default.PropTypes.node,
  /**
   * Should dialogs show inline instead of a modal?
   */
  inlineDialogs: _react2.default.PropTypes.bool,
  /**
  * @ignore
  */
  intl: _reactIntl.intlShape.isRequired
}, _class.contextTypes = {
  muiTheme: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  inlineDialogs: false,
  handleResolutionChange: true,
  labelStyleOutOfScale: {
    color: '#BBBBBB'
  },
  showZoomTo: false,
  showTable: false,
  allowReordering: false,
  allowEditing: false,
  allowFiltering: false,
  allowLabeling: false,
  allowRemove: true,
  allowStyling: false,
  showDownload: false,
  downloadFormat: 'GeoJSON',
  includeLegend: false,
  showOpacity: false,
  showOnStart: false,
  collapsible: true,
  minWidth: 360
}, _temp);
exports.default = (0, _reactIntl.injectIntl)((0, _reactDnd.DragDropContext)(_reactDndHtml5Backend2.default)(LayerList));