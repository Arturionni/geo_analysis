'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _SelectConstants = require('../constants/SelectConstants');

var _SelectConstants2 = _interopRequireDefault(_SelectConstants);

var _LayerConstants = require('../constants/LayerConstants');

var _LayerConstants2 = _interopRequireDefault(_LayerConstants);

var _AppDispatcher = require('../dispatchers/AppDispatcher');

var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

var _LayerStore = require('./LayerStore');

var _LayerStore2 = _interopRequireDefault(_LayerStore);

var _WFSService = require('../services/WFSService');

var _WFSService2 = _interopRequireDefault(_WFSService);

var _ArcGISRestService = require('../services/ArcGISRestService');

var _ArcGISRestService2 = _interopRequireDefault(_ArcGISRestService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License").
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/* global document */

var FeatureStore = function (_EventEmitter) {
  _inherits(FeatureStore, _EventEmitter);

  function FeatureStore() {
    _classCallCheck(this, FeatureStore);

    var _this = _possibleConstructorReturn(this, (FeatureStore.__proto__ || Object.getPrototypeOf(FeatureStore)).call(this));

    _this._pageInfo = {};
    _this._createDefaultSelectStyleFunction = function () {
      var styles = {};
      var width = 3;
      var white = [255, 255, 255, 1];
      var yellow = [255, 255, 0, 1];
      styles.Polygon = [new _openlayers2.default.style.Style({
        fill: new _openlayers2.default.style.Fill({
          color: [255, 255, 0, 0.5]
        })
      })];
      styles.MultiPolygon = styles.Polygon;
      styles.LineString = [new _openlayers2.default.style.Style({
        stroke: new _openlayers2.default.style.Stroke({
          color: white,
          width: width + 2
        })
      }), new _openlayers2.default.style.Style({
        stroke: new _openlayers2.default.style.Stroke({
          color: yellow,
          width: width
        })
      })];
      styles.MultiLineString = styles.LineString;
      styles.Circle = styles.Polygon.concat(styles.LineString);
      styles.Point = [new _openlayers2.default.style.Style({
        image: new _openlayers2.default.style.Circle({
          radius: width * 2,
          fill: new _openlayers2.default.style.Fill({
            color: yellow
          }),
          stroke: new _openlayers2.default.style.Stroke({
            color: white,
            width: width / 2
          })
        }),
        zIndex: Infinity
      })];
      styles.MultiPoint = styles.Point;
      styles.GeometryCollection = styles.Polygon.concat(styles.LineString, styles.Point);
      styles.Polygon.push.apply(styles.Polygon, styles.LineString);
      styles.GeometryCollection.push.apply(styles.GeometryCollection, styles.LineString);
      return function (feature, resolution) {
        var geom = feature.getGeometry();
        if (geom) {
          return styles[geom.getType()];
        } else {
          return null;
        }
      };
    };
    _this._regexes = {
      url: /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/,
      file: /.*[\\\\/].*\..*/
    };
    _this._layers = {};
    _this._schema = {};
    _this._config = {};
    return _this;
  }

  _createClass(FeatureStore, [{
    key: '_getLayer',
    value: function _getLayer(feature) {
      for (var key in this._config) {
        for (var i = 0, ii = this._config[key].features.length; i < ii; ++i) {
          if (this._config[key].features[i] === feature) {
            return this._layers[key];
          }
        }
      }
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map, opt_proxy) {
      if (this._map !== map) {
        this._map = map;
        var me = this;
        var defaultStyle = this._createDefaultSelectStyleFunction();
        this._select = new _openlayers2.default.interaction.Select({
          wrapX: false,
          style: function style(feature, resolution) {
            var layer = me._getLayer(feature);
            var selectedStyle;
            if (layer) {
              selectedStyle = layer.get('selectedStyle');
            }
            if (selectedStyle) {
              if (selectedStyle instanceof _openlayers2.default.style.Style || Array.isArray(selectedStyle)) {
                return selectedStyle;
              } else {
                return selectedStyle.call(this, feature, resolution);
              }
            } else {
              return defaultStyle.call(this, feature, resolution);
            }
          }
        });
        this._select.handleEvent = function (mapBrowserEvent) {
          return true;
        };
        this._map.addInteraction(this._select);
        _LayerStore2.default.bindMap(map);
        var layers = _LayerStore2.default.getState().flatLayers;
        for (var i = 0, ii = layers.length; i < ii; ++i) {
          if (layers[i] instanceof _openlayers2.default.layer.Vector) {
            this.addLayer(layers[i], opt_proxy);
          }
        }
      }
    }
  }, {
    key: 'setSelectOnClick',
    value: function setSelectOnClick(active) {
      this.active = active;
    }
  }, {
    key: 'addFeature',
    value: function addFeature(layer, feature) {
      var id = layer.get('id');
      this._config[id].features.addFeature(feature);
      this.emitChange();
    }
  }, {
    key: 'removeFeature',
    value: function removeFeature(layer, feature) {
      var id = layer.get('id');
      var idx = this._config[id].selected.indexOf(feature);
      if (idx !== -1) {
        this._config[id].selected.splice(idx, 1);
        this._updateSelect();
      }
      idx = this._config[id].filter.indexOf(feature);
      if (idx !== -1) {
        this._config[id].filter.splice(idx, 1);
      }
      this._config[id].features.removeFeature(feature);
      this.emitChange();
    }
  }, {
    key: 'removeLayer',
    value: function removeLayer(layer) {
      var id = layer.get('id');
      delete this._layers[id];
      delete this._schema[id];
      delete this._config[id];
      this.emitChange();
    }
  }, {
    key: 'getFeaturesPerPage',
    value: function getFeaturesPerPage(layer, page, pageSize) {
      var id = layer.get('id');
      var features = this._config[id].features.getFeatures();
      return features.slice(page * pageSize, page * pageSize + pageSize);
    }
  }, {
    key: 'addLayer',
    value: function addLayer(layer, filter, opt_proxy, opt_requestHeaders) {
      var id = layer.get('id');
      if (!this._config[id]) {
        this._config[id] = {
          features: new _openlayers2.default.source.Vector({ useSpatialIndex: false }),
          selected: [],
          filter: []
        };
      }
      if (layer instanceof _openlayers2.default.layer.Tile) {
        if (!layer.get('numberOfFeatures') && !layer.get('loading')) {
          layer.set('loading', true);
          if (layer.getSource() instanceof _openlayers2.default.source.TileArcGISRest) {
            _ArcGISRestService2.default.getNumberOfFeatures(layer, function (count) {
              layer.set('numberOfFeatures', count);
              layer.set('loading', false);
            });
          } else {
            _WFSService2.default.getNumberOfFeatures(layer, function (count) {
              layer.set('numberOfFeatures', count);
              layer.set('loading', false);
            }, opt_proxy, opt_requestHeaders);
          }
        }
      }
      if (!this._layers[id]) {
        this._layers[id] = layer;
        this.bindLayer(layer);
      }
      if (filter === true) {
        this.setSelectedAsFilter(layer);
      } else {
        this.restoreOriginalFeatures(layer);
      }
    }
  }, {
    key: 'appendFeatures',
    value: function appendFeatures(layer, features) {
      if (features.length > 0) {
        var id = layer.get('id');
        this._config[id].features.addFeatures(features);
      }
    }
  }, {
    key: '_setFeatures',
    value: function _setFeatures(layer, features) {
      var id = layer.get('id');
      this._config[id].features.clear();
      this._config[id].features.addFeatures(features);
    }
  }, {
    key: 'loadFeatures',
    value: function loadFeatures(layer, startIndex, pageSize, sortingInfo, onSuccess, onFailure, scope, opt_proxy, opt_requestHeaders, opt_clear) {
      var srsName = this._map.getView().getProjection().getCode();
      var me = this;
      var success = function success(features) {
        if (opt_clear) {
          me._setFeatures(layer, features);
        } else {
          me.appendFeatures(layer, features);
        }
        me.emitChange();
        if (onSuccess) {
          onSuccess.call(scope);
        }
      };
      var failure = function failure(xmlhttp, exception) {
        me.appendFeatures(layer, []);
        me.emitChange();
        if (onFailure) {
          onFailure.call(scope, xmlhttp, exception);
        }
      };
      if (layer.getSource() instanceof _openlayers2.default.source.TileArcGISRest) {
        _ArcGISRestService2.default.loadFeatures(layer, startIndex, pageSize, sortingInfo, srsName, success, failure);
      } else {
        _WFSService2.default.loadFeatures(layer, startIndex, pageSize, sortingInfo, srsName, success, failure, opt_proxy, opt_requestHeaders);
      }
    }
  }, {
    key: 'bindLayer',
    value: function bindLayer(layer) {
      var source = layer.getSource();
      if (source instanceof _openlayers2.default.source.Cluster) {
        source = source.getSource();
      }
      if (source instanceof _openlayers2.default.source.Vector) {
        source.on('change', function (evt) {
          if (!this._ignoreSourceChange) {
            if (evt.target.getState() === 'ready') {
              var features = evt.target.getFeatures();
              this._setFeatures(layer, features);
              delete this._schema[layer.get('id')];
              this.emitChange();
            }
          }
        }, this);
        this._setFeatures(layer, source.getFeatures());
        delete this._schema[layer.get('id')];
      }
    }
  }, {
    key: '_determineType',
    value: function _determineType(value) {
      var type = 'string';
      if (this._regexes.url.test(value) || this._regexes.file.test(value)) {
        type = 'link';
      }
      return type;
    }
  }, {
    key: 'clearSelection',
    value: function clearSelection(layer, filter) {
      var id = layer.get('id');
      if (!this._config[id]) {
        this._config[id] = {};
      }
      this._config[id].selected = [];
      this._updateSelect();
      if (filter === true) {
        this.setSelectedAsFilter(layer);
      } else {
        this.emitChange();
      }
    }
  }, {
    key: 'selectFeaturesInCurrentSelection',
    value: function selectFeaturesInCurrentSelection(layer, features) {
      var id = layer.get('id'),
          i,
          ii;
      var selected = this._config[id].selected;
      var remove = [];
      for (i = 0, ii = selected.length; i < ii; ++i) {
        if (features.indexOf(selected[i]) === -1) {
          remove.push(selected[i]);
        }
      }
      for (i = 0, ii = remove.length; i < ii; ++i) {
        var idx = selected.indexOf(remove[i]);
        if (idx > -1) {
          selected.splice(idx, 1);
        }
      }
      if (remove.length > 0) {
        this._updateSelect();
      }
      this.emitChange();
      return selected.length;
    }
  }, {
    key: '_updateSelect',
    value: function _updateSelect() {
      var selectedFeatures = this._select.getFeatures();
      if (selectedFeatures.getLength() > 0) {
        selectedFeatures.clear();
      }
      var state = this._config;
      for (var key in state) {
        for (var i = 0, ii = state[key].selected.length; i < ii; ++i) {
          selectedFeatures.push(state[key].selected[i]);
        }
      }
    }
  }, {
    key: 'toggleFeature',
    value: function toggleFeature(layer, feature) {
      this.clearOnInvisible(layer);
      // special handling for cluster features
      if (layer instanceof _openlayers2.default.layer.Vector && layer.getSource() instanceof _openlayers2.default.source.Cluster) {
        feature.selected = !feature.selected;
        this._ignoreSourceChange = true;
        feature.changed();
        this._ignoreSourceChange = false;
      }
      var id = layer.get('id'),
          idx = this._config[id].selected.indexOf(feature);
      if (idx === -1) {
        this._config[id].selected.push(feature);
      } else {
        this._config[id].selected.splice(idx, 1);
      }
      this._updateSelect();
      this.emitChange();
    }
  }, {
    key: '_clearIfCluster',
    value: function _clearIfCluster(layer, features) {
      // special handling for clusters
      // if a cluster has children selected, it should not show up as well
      if (layer instanceof _openlayers2.default.layer.Vector && layer.getSource() instanceof _openlayers2.default.source.Cluster) {
        var dirty = [];
        var f = layer.getSource().getFeatures();
        for (var i = 0, ii = f.length; i < ii; ++i) {
          var children = f[i].get('features');
          for (var j = 0, jj = children.length; j < jj; ++j) {
            if (features.indexOf(children[j]) === -1) {
              if (children[j].selected) {
                if (dirty.indexOf(f[i]) === -1) {
                  dirty.push(f[i]);
                }
              }
              children[j].selected = false;
            }
          }
        }
        for (var d = 0, dd = dirty.length; d < dd; ++d) {
          dirty[d].changed();
        }
      }
    }
  }, {
    key: 'clearOnInvisible',
    value: function clearOnInvisible(layer) {
      var id = layer.get('id');
      layer.once('change:visible', function (evt) {
        this._config[id].selected = [];
        this._clearIfCluster(layer, []);
        this.emitChange();
        this._updateSelect();
      }, this);
    }
  }, {
    key: 'setSelection',
    value: function setSelection(layer, features, clear) {
      var id = layer.get('id');
      this.clearOnInvisible(layer);
      if (clear) {
        this._clearIfCluster(layer, features);
      }
      if (!this._config[id]) {
        this._config[id] = {};
      }
      var filter = this._config[id].selected === this._config[id].filter;
      if (clear === true) {
        this._config[id].selected = features;
        this._updateSelect();
        if (filter === true) {
          this._config[id].filter = features;
        }
      } else {
        var needChange = false;
        for (var i = 0, ii = features.length; i < ii; ++i) {
          if (this._config[id].selected.indexOf(features[i]) === -1) {
            needChange = true;
            this._config[id].selected.push(features[i]);
          }
        }
        if (needChange) {
          this._updateSelect();
        }
      }
      // cluster layers need to get redrawn
      if (layer instanceof _openlayers2.default.layer.Vector && layer.getSource() instanceof _openlayers2.default.source.Cluster) {
        layer.getSource().changed();
      }
      this.emitChange();
    }
  }, {
    key: 'setFilter',
    value: function setFilter(layer, filter) {
      var id = layer.get('id');
      this._config[id].filter = filter;
      this.emitChange();
    }
  }, {
    key: 'setSelectedAsFilter',
    value: function setSelectedAsFilter(layer) {
      var id = layer.get('id');
      this.setFilter(layer, this._config[id].selected);
    }
  }, {
    key: 'restoreOriginalFeatures',
    value: function restoreOriginalFeatures(layer) {
      var id = layer.get('id');
      this._config[id].filter = [];
      this.emitChange();
    }
  }, {
    key: 'getSchema',
    value: function getSchema(layer) {
      var id = layer.get('id');
      if (!this._schema[id] && this._config[id] && this._config[id].features.getFeatures().length > 0) {
        var schema = {};
        var feature = this._config[id].features.getFeatures()[0];
        if (!feature) {
          var wfsInfo = layer.get('wfsInfo');
          for (var i = 0, ii = wfsInfo.attributes.length; i < ii; ++i) {
            schema[wfsInfo.attributes[i]] = 'string';
          }
        } else {
          var geom = feature.getGeometryName();
          var values = feature.getProperties();
          for (var key in values) {
            if (key !== geom && key !== 'boundedBy') {
              schema[key] = this._determineType(values[key]);
            }
          }
        }
        this._schema[id] = schema;
      }
      return this._schema[id];
    }
  }, {
    key: 'getState',
    value: function getState(layer) {
      if (layer) {
        return this._config[layer.get('id')];
      } else {
        return this._config;
      }
    }
  }, {
    key: 'emitChange',
    value: function emitChange() {
      this.emit('CHANGE');
    }
  }, {
    key: 'addChangeListener',
    value: function addChangeListener(cb) {
      this.on('CHANGE', cb);
    }
  }, {
    key: 'removeChangeListener',
    value: function removeChangeListener(cb) {
      this.removeListener('CHANGE', cb);
    }
  }]);

  return FeatureStore;
}(_events.EventEmitter);

var _FeatureStore = new FeatureStore();

_AppDispatcher2.default.register(function (payload) {
  var action = payload.action;
  switch (action.type) {
    case _SelectConstants2.default.CLEAR:
      _FeatureStore.clearSelection(action.layer, action.filter);
      break;
    case _SelectConstants2.default.SELECT_FEATURES:
      _FeatureStore.setSelection(action.layer, action.features, action.clear);
      break;
    case _SelectConstants2.default.TOGGLE_FEATURE:
      if (action.feature) {
        _FeatureStore.toggleFeature(action.layer, action.feature);
      }
      break;
    case _LayerConstants2.default.REMOVE_LAYER:
      _FeatureStore.removeLayer(action.layer);
      break;
    default:
      break;
  }
});

exports.default = _FeatureStore;