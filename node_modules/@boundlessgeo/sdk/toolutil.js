'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _openlayers = require('openlayers');

var _openlayers2 = _interopRequireDefault(_openlayers);

var _ToolConstants = require('./constants/ToolConstants');

var _ToolConstants2 = _interopRequireDefault(_ToolConstants);

var _AppDispatcher = require('./dispatchers/AppDispatcher');

var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

var _ToolActions = require('./actions/ToolActions');

var _ToolActions2 = _interopRequireDefault(_ToolActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2015-present Boundless Spatial Inc., http://boundlessgeo.com
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

exports.default = {
  activate: function activate(tool, interactions) {
    if (interactions instanceof _openlayers2.default.interaction.Interaction) {
      tool.currentInteractions = [interactions];
    } else if (Array.isArray(interactions)) {
      tool.currentInteractions = interactions;
    } else {
      tool.currentInteractions = [];
    }
    var map = tool.props.map;
    for (var i = 0, ii = tool.currentInteractions.length; i < ii; ++i) {
      map.addInteraction(tool.currentInteractions[i]);
    }
    _ToolActions2.default.activateTool(tool, tool.props.toggleGroup, tool.props.toolId);
    tool.active = true;
  },
  deactivate: function deactivate(tool) {
    if (tool.currentInteractions) {
      var map = tool.props.map;
      for (var i = 0, ii = tool.currentInteractions.length; i < ii; ++i) {
        map.removeInteraction(tool.currentInteractions[i]);
      }
    }
    delete tool.currentInteractions;
    tool.active = false;
  },
  register: function register(tool) {
    return _AppDispatcher2.default.register(function (payload) {
      var action = payload.action;
      switch (action.type) {
        case _ToolConstants2.default.DISABLE_ALL_TOOLS:
          if (tool.disable) {
            tool.disable();
          }
          break;
        case _ToolConstants2.default.ENABLE_ALL_TOOLS:
          if (tool.enable) {
            tool.enable();
          }
          break;
        case _ToolConstants2.default.ACTIVATE_TOOL:
          if (tool.props.toggleGroup && tool.props.toggleGroup === action.toggleGroup) {
            if (tool !== action.tool) {
              if (tool.props.toolId) {
                if (tool.props.toolId !== action.toolId) {
                  tool.deactivate();
                } else {
                  if (tool.active !== true) {
                    tool.activate();
                  }
                }
              } else {
                tool.deactivate();
              }
            }
          }
          break;
        default:
          break;
      }
    });
  }
};